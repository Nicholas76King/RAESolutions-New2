Imports Rae.RaeSolutions.DataAccess.Projects
Imports System


Namespace Rae.RaeSolutions.Business.Entities

   ''' <summary>
   ''' Special option that user enters. 
   ''' Should be verifiable with an option that has been authorized by a RAE employee.
   ''' </summary>
   ''' <history by="Casey Joyce" finish="2006/06/02" hours="1">
   ''' Created
   ''' </history>
   Public Class SpecialOption
      Implements ICloneable(Of SpecialOption)
      Implements IEquatable(Of SpecialOption)
      Implements ICopyable(Of SpecialOption)
      Implements IPersistable

#Region " Declarations"

      Private m_Id As Integer
      Private m_Code As String
      Private m_Price As nullable_value(Of Double)
      Private m_Description As String
      Private m_AuthorizedBy As String
      Private m_AuthorizedFor As String
      Private m_Quantity As nullable_value(Of Integer)
      Private m_EquipmentId As item_id
      Private m_revision As Single

#End Region


#Region " Properties"

      ''' <summary>
      ''' Unique auto number ID generated by database.
      ''' </summary>
      Public Property Id() As Integer
         Get
            Return Me.m_Id
         End Get
         Set(ByVal value As Integer)
            Me.m_Id = value
         End Set
      End Property


      ''' <summary>
      ''' Special option's unique code.
      ''' </summary>
      Public Property Code() As String
         Get
            Return Me.m_Code
         End Get
         Set(ByVal value As String)
            Me.m_Code = value
         End Set
      End Property


      ''' <summary>
      ''' Price of special option.
      ''' </summary>
      Public Property Price() As nullable_value(Of Double)
         Get
            Return Me.m_Price
         End Get
         Set(ByVal value As nullable_value(Of Double))
            Me.m_Price = value
         End Set
      End Property


      ''' <summary>
      ''' Description of special option.
      ''' </summary>
      Public Property Description() As String
         Get
            Return Me.m_Description
         End Get
         Set(ByVal value As String)
            Me.m_Description = value
         End Set
      End Property


      ''' <summary>
      ''' Person who authorized the special option.
      ''' </summary>
      Public Property AuthorizedBy() As String
         Get
            Return Me.m_AuthorizedBy
         End Get
         Set(ByVal value As String)
            Me.m_AuthorizedBy = value
         End Set
      End Property


      ''' <summary>
      ''' Identity special option was authorized for.
      ''' </summary>
      Public Property AuthorizedFor() As String
         Get
            Return Me.m_AuthorizedFor
         End Get
         Set(ByVal value As String)
            Me.m_AuthorizedFor = value
         End Set
      End Property


      ''' <summary>
      ''' Quantity
      ''' </summary>
      Public Property Quantity() As nullable_value(Of Integer)
         Get
            Return Me.m_Quantity
         End Get
         Set(ByVal value As nullable_value(Of Integer))
            Me.m_Quantity = value
         End Set
      End Property


      ''' <summary>
      ''' Equipment ID
      ''' </summary>
      Public Property EquipmentId() As item_id
         Get
            Return Me.m_EquipmentId
         End Get
         Set(ByVal value As item_id)
            Me.m_EquipmentId = value
         End Set
      End Property


      ''' <summary>
      ''' Revision number
      ''' </summary>
      Public Property Revision() As Single
         Get
            Return Me.m_revision
         End Get
         Set(ByVal value As Single)
            Me.m_revision = value
         End Set
      End Property

#End Region


#Region " Methods"

      ''' <summary>
      ''' Constructs special option with all properties set.
      ''' </summary>
      ''' <param name="authorizedBy">Authorized by</param>
      ''' <param name="code">Special option code</param>
      ''' <param name="authorizedFor">Authorized for</param>
      ''' <param name="description">Description of special option.</param>
      ''' <param name="equipmentId">Equipment ID.</param>
      ''' <param name="expirationDate">Date price for special option expires.</param>
      ''' <param name="price">Price of special option.</param>
      ''' <param name="quantity">Quantity.</param>
      Public Sub New(ByVal code As String, ByVal description As String, ByVal price As Double, ByVal quantity As Integer, _
      ByVal authorizedBy As String, ByVal authorizedFor As String, ByVal expirationDate As Date, ByVal equipmentId As item_id, ByVal revision As Single)
         Me.New(code, price, equipmentId, revision)
         Me.m_Description = description
         Me.m_Quantity.value = quantity
         Me.m_AuthorizedBy = authorizedBy
         Me.m_AuthorizedFor = authorizedFor
      End Sub

      ''' <summary>
      ''' Constructs special option with sufficient info to save.
      ''' </summary>
      ''' <param name="code">
      ''' Special option code.</param>
      ''' <param name="price">
      ''' Special option price</param>
      ''' <param name="equipmentId">
      ''' Equipment ID.</param>
      Public Sub New(ByVal code As String, ByVal price As Double, ByVal equipmentId As item_id, ByVal revision As Single)
         Me.New()
         Me.m_Code = code
         Me.m_Price.value = price
         Me.m_EquipmentId = equipmentId
         Me.m_revision = revision
      End Sub

      ''' <summary>
      ''' Constructs special option with sufficient info to load from data source.
      ''' </summary>
      Public Sub New(ByVal id As Integer, ByVal revision As Single)
         Me.New()
         Me.m_Id = id
         Me.m_revision = revision
      End Sub

      ''' <summary>
      ''' Constructs a special option.
      ''' </summary>
      Public Sub New()
         Me.m_Price = New nullable_value(Of Double)
         Me.m_Quantity = New nullable_value(Of Integer)
      End Sub


      ''' <summary>
      ''' Clones another special option.
      ''' </summary>
      Public Function Clone() As SpecialOption Implements _
      ICloneable(Of SpecialOption).Clone
         Dim other As New SpecialOption

         other.Id = Me.Id
         other.AuthorizedBy = Me.AuthorizedBy
         other.AuthorizedFor = Me.AuthorizedFor
         other.Code = Me.Code
         other.Description = Me.Description
         other.Price = Me.Price.clone()
         other.Quantity = Me.Quantity.clone()
         If Me.EquipmentId IsNot Nothing Then
            other.EquipmentId = New item_id(Me.EquipmentId.Id)
         End If
         other.Revision = Me.Revision

         Return other
      End Function


      ''' <summary>
      ''' Compares equality of two special options.
      ''' </summary>
      Public Shadows Function Equals(ByVal other As SpecialOption) As Boolean _
      Implements IEquatable(Of SpecialOption).Equals
         If other Is Nothing Then Return False

         If Me.m_Id = other.m_Id _
         AndAlso Me.m_AuthorizedBy = other.m_AuthorizedBy _
         AndAlso Me.m_AuthorizedFor = other.m_AuthorizedFor _
         AndAlso Me.m_Code = other.m_Code _
         AndAlso Me.m_Description = other.m_Description _
         AndAlso Me.m_Price.equals(other.m_Price) _
         AndAlso Me.m_Quantity.equals(other.m_Quantity) _
         AndAlso Me.m_EquipmentId.Equals(other.m_EquipmentId) _
         AndAlso Me.m_revision = other.Revision Then
            Return True
         Else
            Return False
         End If
      End Function


      ''' <summary>
      ''' Copies another special option.
      ''' </summary>
      Public Sub Copy(ByVal other As SpecialOption) _
      Implements ICopyable(Of SpecialOption).Copy
         If other Is Nothing Then
            Throw New ArgumentNullException("Attempt to copy special option failed. Option to copy is null.")
         End If

         Me.m_Id = other.m_Id
         Me.m_AuthorizedBy = other.m_AuthorizedBy
         Me.m_AuthorizedFor = other.m_AuthorizedFor
         Me.m_Code = other.m_Code
         Me.m_Description = other.m_Description
         Me.m_Price = other.m_Price
         Me.m_Quantity = other.m_Quantity
         Me.m_EquipmentId = New item_id(other.EquipmentId.Id)
         Me.m_revision = other.Revision
      End Sub


      ''' <summary>
      ''' Loads a special option by code. Auto number ID property must be set before loading.
      ''' </summary>
      Public Sub Load() _
      Implements IPersistable.Load
         Me.Copy(SpecialOptionsDa.Retrieve(Me.m_Id))
      End Sub


      ''' <summary>
      ''' Saves special option to data source.
      ''' </summary>
      Public Sub Save() _
      Implements IPersistable.Save
         If Not Me.ValidateSave() Then
            Throw New InvalidOperationException("The special option's code and price must be set before saving.")
         End If

         If SpecialOptionsDa.Exists(Me.m_Id) Then
            SpecialOptionsDa.Update(Me)
         Else
            SpecialOptionsDa.Create(Me)
         End If
      End Sub


      ''' <summary>
      ''' Special option code (ex. SP01).
      ''' </summary>
      Public Overrides Function ToString() As String
         Return Me.Code
      End Function


      ''' <summary>
      ''' Validates current state before saving.
      ''' </summary>
      ''' <returns>
      ''' True if is valid; else false.
      ''' </returns>
      Private Function ValidateSave() As Boolean
         Dim isValid As Boolean

         If Me.m_Price.value > -1 Then
            isValid = True
         End If

         Return isValid
      End Function

#End Region

   End Class

End Namespace
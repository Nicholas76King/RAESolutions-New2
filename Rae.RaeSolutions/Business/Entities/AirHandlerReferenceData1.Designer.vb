'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace RAE.RAESolutions.Business.Entities
    
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("AirHandlerReferenceData"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
    Partial Public Class AirHandlerReferenceData
        Inherits Global.System.Data.DataSet
        
        Private tableHours As HoursDataTable
        
        Private tableMotors As MotorsDataTable
        
        Private tableBidiFans As BidiFansDataTable
        
        Private tableDuctHeaters As DuctHeatersDataTable
        
        Private tableCoilPrices As CoilPricesDataTable
        
        Private tableForwardCurvedFans As ForwardCurvedFansDataTable
        
        Private tableFilters As FiltersDataTable
        
        Private tableDampers As DampersDataTable
        
        Private tableCoils As CoilsDataTable
        
        Private tableSectionDimensions As SectionDimensionsDataTable
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, false)
            If (Me.IsBinarySerialized(info, context) = true) Then
                Me.InitVars(false)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("Hours")) Is Nothing) Then
                    MyBase.Tables.Add(New HoursDataTable(ds.Tables("Hours")))
                End If
                If (Not (ds.Tables("Motors")) Is Nothing) Then
                    MyBase.Tables.Add(New MotorsDataTable(ds.Tables("Motors")))
                End If
                If (Not (ds.Tables("BidiFans")) Is Nothing) Then
                    MyBase.Tables.Add(New BidiFansDataTable(ds.Tables("BidiFans")))
                End If
                If (Not (ds.Tables("DuctHeaters")) Is Nothing) Then
                    MyBase.Tables.Add(New DuctHeatersDataTable(ds.Tables("DuctHeaters")))
                End If
                If (Not (ds.Tables("CoilPrices")) Is Nothing) Then
                    MyBase.Tables.Add(New CoilPricesDataTable(ds.Tables("CoilPrices")))
                End If
                If (Not (ds.Tables("ForwardCurvedFans")) Is Nothing) Then
                    MyBase.Tables.Add(New ForwardCurvedFansDataTable(ds.Tables("ForwardCurvedFans")))
                End If
                If (Not (ds.Tables("Filters")) Is Nothing) Then
                    MyBase.Tables.Add(New FiltersDataTable(ds.Tables("Filters")))
                End If
                If (Not (ds.Tables("Dampers")) Is Nothing) Then
                    MyBase.Tables.Add(New DampersDataTable(ds.Tables("Dampers")))
                End If
                If (Not (ds.Tables("Coils")) Is Nothing) Then
                    MyBase.Tables.Add(New CoilsDataTable(ds.Tables("Coils")))
                End If
                If (Not (ds.Tables("SectionDimensions")) Is Nothing) Then
                    MyBase.Tables.Add(New SectionDimensionsDataTable(ds.Tables("SectionDimensions")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Hours() As HoursDataTable
            Get
                Return Me.tableHours
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Motors() As MotorsDataTable
            Get
                Return Me.tableMotors
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property BidiFans() As BidiFansDataTable
            Get
                Return Me.tableBidiFans
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property DuctHeaters() As DuctHeatersDataTable
            Get
                Return Me.tableDuctHeaters
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property CoilPrices() As CoilPricesDataTable
            Get
                Return Me.tableCoilPrices
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property ForwardCurvedFans() As ForwardCurvedFansDataTable
            Get
                Return Me.tableForwardCurvedFans
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Filters() As FiltersDataTable
            Get
                Return Me.tableFilters
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Dampers() As DampersDataTable
            Get
                Return Me.tableDampers
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Coils() As CoilsDataTable
            Get
                Return Me.tableCoils
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property SectionDimensions() As SectionDimensionsDataTable
            Get
                Return Me.tableSectionDimensions
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.BrowsableAttribute(true),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As AirHandlerReferenceData = CType(MyBase.Clone,AirHandlerReferenceData)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXml(reader)
                If (Not (ds.Tables("Hours")) Is Nothing) Then
                    MyBase.Tables.Add(New HoursDataTable(ds.Tables("Hours")))
                End If
                If (Not (ds.Tables("Motors")) Is Nothing) Then
                    MyBase.Tables.Add(New MotorsDataTable(ds.Tables("Motors")))
                End If
                If (Not (ds.Tables("BidiFans")) Is Nothing) Then
                    MyBase.Tables.Add(New BidiFansDataTable(ds.Tables("BidiFans")))
                End If
                If (Not (ds.Tables("DuctHeaters")) Is Nothing) Then
                    MyBase.Tables.Add(New DuctHeatersDataTable(ds.Tables("DuctHeaters")))
                End If
                If (Not (ds.Tables("CoilPrices")) Is Nothing) Then
                    MyBase.Tables.Add(New CoilPricesDataTable(ds.Tables("CoilPrices")))
                End If
                If (Not (ds.Tables("ForwardCurvedFans")) Is Nothing) Then
                    MyBase.Tables.Add(New ForwardCurvedFansDataTable(ds.Tables("ForwardCurvedFans")))
                End If
                If (Not (ds.Tables("Filters")) Is Nothing) Then
                    MyBase.Tables.Add(New FiltersDataTable(ds.Tables("Filters")))
                End If
                If (Not (ds.Tables("Dampers")) Is Nothing) Then
                    MyBase.Tables.Add(New DampersDataTable(ds.Tables("Dampers")))
                End If
                If (Not (ds.Tables("Coils")) Is Nothing) Then
                    MyBase.Tables.Add(New CoilsDataTable(ds.Tables("Coils")))
                End If
                If (Not (ds.Tables("SectionDimensions")) Is Nothing) Then
                    MyBase.Tables.Add(New SectionDimensionsDataTable(ds.Tables("SectionDimensions")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableHours = CType(MyBase.Tables("Hours"),HoursDataTable)
            If (initTable = true) Then
                If (Not (Me.tableHours) Is Nothing) Then
                    Me.tableHours.InitVars
                End If
            End If
            Me.tableMotors = CType(MyBase.Tables("Motors"),MotorsDataTable)
            If (initTable = true) Then
                If (Not (Me.tableMotors) Is Nothing) Then
                    Me.tableMotors.InitVars
                End If
            End If
            Me.tableBidiFans = CType(MyBase.Tables("BidiFans"),BidiFansDataTable)
            If (initTable = true) Then
                If (Not (Me.tableBidiFans) Is Nothing) Then
                    Me.tableBidiFans.InitVars
                End If
            End If
            Me.tableDuctHeaters = CType(MyBase.Tables("DuctHeaters"),DuctHeatersDataTable)
            If (initTable = true) Then
                If (Not (Me.tableDuctHeaters) Is Nothing) Then
                    Me.tableDuctHeaters.InitVars
                End If
            End If
            Me.tableCoilPrices = CType(MyBase.Tables("CoilPrices"),CoilPricesDataTable)
            If (initTable = true) Then
                If (Not (Me.tableCoilPrices) Is Nothing) Then
                    Me.tableCoilPrices.InitVars
                End If
            End If
            Me.tableForwardCurvedFans = CType(MyBase.Tables("ForwardCurvedFans"),ForwardCurvedFansDataTable)
            If (initTable = true) Then
                If (Not (Me.tableForwardCurvedFans) Is Nothing) Then
                    Me.tableForwardCurvedFans.InitVars
                End If
            End If
            Me.tableFilters = CType(MyBase.Tables("Filters"),FiltersDataTable)
            If (initTable = true) Then
                If (Not (Me.tableFilters) Is Nothing) Then
                    Me.tableFilters.InitVars
                End If
            End If
            Me.tableDampers = CType(MyBase.Tables("Dampers"),DampersDataTable)
            If (initTable = true) Then
                If (Not (Me.tableDampers) Is Nothing) Then
                    Me.tableDampers.InitVars
                End If
            End If
            Me.tableCoils = CType(MyBase.Tables("Coils"),CoilsDataTable)
            If (initTable = true) Then
                If (Not (Me.tableCoils) Is Nothing) Then
                    Me.tableCoils.InitVars
                End If
            End If
            Me.tableSectionDimensions = CType(MyBase.Tables("SectionDimensions"),SectionDimensionsDataTable)
            If (initTable = true) Then
                If (Not (Me.tableSectionDimensions) Is Nothing) Then
                    Me.tableSectionDimensions.InitVars
                End If
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.DataSetName = "AirHandlerReferenceData"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/AirHandlerData.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableHours = New HoursDataTable()
            MyBase.Tables.Add(Me.tableHours)
            Me.tableMotors = New MotorsDataTable()
            MyBase.Tables.Add(Me.tableMotors)
            Me.tableBidiFans = New BidiFansDataTable()
            MyBase.Tables.Add(Me.tableBidiFans)
            Me.tableDuctHeaters = New DuctHeatersDataTable()
            MyBase.Tables.Add(Me.tableDuctHeaters)
            Me.tableCoilPrices = New CoilPricesDataTable()
            MyBase.Tables.Add(Me.tableCoilPrices)
            Me.tableForwardCurvedFans = New ForwardCurvedFansDataTable()
            MyBase.Tables.Add(Me.tableForwardCurvedFans)
            Me.tableFilters = New FiltersDataTable()
            MyBase.Tables.Add(Me.tableFilters)
            Me.tableDampers = New DampersDataTable()
            MyBase.Tables.Add(Me.tableDampers)
            Me.tableCoils = New CoilsDataTable()
            MyBase.Tables.Add(Me.tableCoils)
            Me.tableSectionDimensions = New SectionDimensionsDataTable()
            MyBase.Tables.Add(Me.tableSectionDimensions)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeHours() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeMotors() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeBidiFans() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeDuctHeaters() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeCoilPrices() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeForwardCurvedFans() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeFilters() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeDampers() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeCoils() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeSectionDimensions() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As AirHandlerReferenceData = New AirHandlerReferenceData()
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub HoursRowChangeEventHandler(ByVal sender As Object, ByVal e As HoursRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub MotorsRowChangeEventHandler(ByVal sender As Object, ByVal e As MotorsRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub BidiFansRowChangeEventHandler(ByVal sender As Object, ByVal e As BidiFansRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub DuctHeatersRowChangeEventHandler(ByVal sender As Object, ByVal e As DuctHeatersRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub CoilPricesRowChangeEventHandler(ByVal sender As Object, ByVal e As CoilPricesRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub ForwardCurvedFansRowChangeEventHandler(ByVal sender As Object, ByVal e As ForwardCurvedFansRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub FiltersRowChangeEventHandler(ByVal sender As Object, ByVal e As FiltersRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub DampersRowChangeEventHandler(ByVal sender As Object, ByVal e As DampersRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub CoilsRowChangeEventHandler(ByVal sender As Object, ByVal e As CoilsRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub SectionDimensionsRowChangeEventHandler(ByVal sender As Object, ByVal e As SectionDimensionsRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class HoursDataTable
            Inherits Global.System.Data.TypedTableBase(Of HoursRow)
            
            Private columnID As Global.System.Data.DataColumn
            
            Private columnModel As Global.System.Data.DataColumn
            
            Private columnFAHoursPerWallPanel As Global.System.Data.DataColumn
            
            Private columnFAHoursPerRoofPanel As Global.System.Data.DataColumn
            
            Private columnFAHoursPerFloorPanel As Global.System.Data.DataColumn
            
            Private columnFAHoursPerDoor As Global.System.Data.DataColumn
            
            Private columnFAHoursPerAirSeal As Global.System.Data.DataColumn
            
            Private columnOtherHoursPerWallPanel As Global.System.Data.DataColumn
            
            Private columnOtherHoursPerRoofPanel As Global.System.Data.DataColumn
            
            Private columnOtherHoursPerFloorPanel As Global.System.Data.DataColumn
            
            Private columnOtherHoursPerDoor As Global.System.Data.DataColumn
            
            Private columnOtherHoursPerAirSeal As Global.System.Data.DataColumn
            
            Private columnSMBaseHeight As Global.System.Data.DataColumn
            
            Private columnSBBaseHeight As Global.System.Data.DataColumn
            
            Private columnUniversalFrameAndClips As Global.System.Data.DataColumn
            
            Private columnFAHoodHours As Global.System.Data.DataColumn
            
            Private columnOtherHoodHours As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Hours"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ModelColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModel
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FAHoursPerWallPanelColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFAHoursPerWallPanel
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FAHoursPerRoofPanelColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFAHoursPerRoofPanel
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FAHoursPerFloorPanelColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFAHoursPerFloorPanel
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FAHoursPerDoorColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFAHoursPerDoor
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FAHoursPerAirSealColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFAHoursPerAirSeal
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property OtherHoursPerWallPanelColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnOtherHoursPerWallPanel
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property OtherHoursPerRoofPanelColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnOtherHoursPerRoofPanel
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property OtherHoursPerFloorPanelColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnOtherHoursPerFloorPanel
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property OtherHoursPerDoorColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnOtherHoursPerDoor
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property OtherHoursPerAirSealColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnOtherHoursPerAirSeal
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SMBaseHeightColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSMBaseHeight
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SBBaseHeightColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSBBaseHeight
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property UniversalFrameAndClipsColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUniversalFrameAndClips
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FAHoodHoursColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFAHoodHours
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property OtherHoodHoursColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnOtherHoodHours
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As HoursRow
                Get
                    Return CType(Me.Rows(index),HoursRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event HoursRowChanging As HoursRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event HoursRowChanged As HoursRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event HoursRowDeleting As HoursRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event HoursRowDeleted As HoursRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddHoursRow(ByVal row As HoursRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddHoursRow( _
                        ByVal Model As String,  _
                        ByVal FAHoursPerWallPanel As Double,  _
                        ByVal FAHoursPerRoofPanel As Double,  _
                        ByVal FAHoursPerFloorPanel As Double,  _
                        ByVal FAHoursPerDoor As Double,  _
                        ByVal FAHoursPerAirSeal As Double,  _
                        ByVal OtherHoursPerWallPanel As Double,  _
                        ByVal OtherHoursPerRoofPanel As Double,  _
                        ByVal OtherHoursPerFloorPanel As Double,  _
                        ByVal OtherHoursPerDoor As Double,  _
                        ByVal OtherHoursPerAirSeal As Double,  _
                        ByVal SMBaseHeight As Integer,  _
                        ByVal SBBaseHeight As Integer,  _
                        ByVal UniversalFrameAndClips As Integer,  _
                        ByVal FAHoodHours As Double,  _
                        ByVal OtherHoodHours As Double) As HoursRow
                Dim rowHoursRow As HoursRow = CType(Me.NewRow,HoursRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, Model, FAHoursPerWallPanel, FAHoursPerRoofPanel, FAHoursPerFloorPanel, FAHoursPerDoor, FAHoursPerAirSeal, OtherHoursPerWallPanel, OtherHoursPerRoofPanel, OtherHoursPerFloorPanel, OtherHoursPerDoor, OtherHoursPerAirSeal, SMBaseHeight, SBBaseHeight, UniversalFrameAndClips, FAHoodHours, OtherHoodHours}
                rowHoursRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowHoursRow)
                Return rowHoursRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByID(ByVal ID As Integer) As HoursRow
                Return CType(Me.Rows.Find(New Object() {ID}),HoursRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As HoursDataTable = CType(MyBase.Clone,HoursDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New HoursDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnID = MyBase.Columns("ID")
                Me.columnModel = MyBase.Columns("Model")
                Me.columnFAHoursPerWallPanel = MyBase.Columns("FAHoursPerWallPanel")
                Me.columnFAHoursPerRoofPanel = MyBase.Columns("FAHoursPerRoofPanel")
                Me.columnFAHoursPerFloorPanel = MyBase.Columns("FAHoursPerFloorPanel")
                Me.columnFAHoursPerDoor = MyBase.Columns("FAHoursPerDoor")
                Me.columnFAHoursPerAirSeal = MyBase.Columns("FAHoursPerAirSeal")
                Me.columnOtherHoursPerWallPanel = MyBase.Columns("OtherHoursPerWallPanel")
                Me.columnOtherHoursPerRoofPanel = MyBase.Columns("OtherHoursPerRoofPanel")
                Me.columnOtherHoursPerFloorPanel = MyBase.Columns("OtherHoursPerFloorPanel")
                Me.columnOtherHoursPerDoor = MyBase.Columns("OtherHoursPerDoor")
                Me.columnOtherHoursPerAirSeal = MyBase.Columns("OtherHoursPerAirSeal")
                Me.columnSMBaseHeight = MyBase.Columns("SMBaseHeight")
                Me.columnSBBaseHeight = MyBase.Columns("SBBaseHeight")
                Me.columnUniversalFrameAndClips = MyBase.Columns("UniversalFrameAndClips")
                Me.columnFAHoodHours = MyBase.Columns("FAHoodHours")
                Me.columnOtherHoodHours = MyBase.Columns("OtherHoodHours")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnID)
                Me.columnModel = New Global.System.Data.DataColumn("Model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModel)
                Me.columnFAHoursPerWallPanel = New Global.System.Data.DataColumn("FAHoursPerWallPanel", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFAHoursPerWallPanel)
                Me.columnFAHoursPerRoofPanel = New Global.System.Data.DataColumn("FAHoursPerRoofPanel", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFAHoursPerRoofPanel)
                Me.columnFAHoursPerFloorPanel = New Global.System.Data.DataColumn("FAHoursPerFloorPanel", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFAHoursPerFloorPanel)
                Me.columnFAHoursPerDoor = New Global.System.Data.DataColumn("FAHoursPerDoor", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFAHoursPerDoor)
                Me.columnFAHoursPerAirSeal = New Global.System.Data.DataColumn("FAHoursPerAirSeal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFAHoursPerAirSeal)
                Me.columnOtherHoursPerWallPanel = New Global.System.Data.DataColumn("OtherHoursPerWallPanel", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOtherHoursPerWallPanel)
                Me.columnOtherHoursPerRoofPanel = New Global.System.Data.DataColumn("OtherHoursPerRoofPanel", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOtherHoursPerRoofPanel)
                Me.columnOtherHoursPerFloorPanel = New Global.System.Data.DataColumn("OtherHoursPerFloorPanel", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOtherHoursPerFloorPanel)
                Me.columnOtherHoursPerDoor = New Global.System.Data.DataColumn("OtherHoursPerDoor", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOtherHoursPerDoor)
                Me.columnOtherHoursPerAirSeal = New Global.System.Data.DataColumn("OtherHoursPerAirSeal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOtherHoursPerAirSeal)
                Me.columnSMBaseHeight = New Global.System.Data.DataColumn("SMBaseHeight", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSMBaseHeight)
                Me.columnSBBaseHeight = New Global.System.Data.DataColumn("SBBaseHeight", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSBBaseHeight)
                Me.columnUniversalFrameAndClips = New Global.System.Data.DataColumn("UniversalFrameAndClips", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUniversalFrameAndClips)
                Me.columnFAHoodHours = New Global.System.Data.DataColumn("FAHoodHours", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFAHoodHours)
                Me.columnOtherHoodHours = New Global.System.Data.DataColumn("OtherHoodHours", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOtherHoodHours)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("AirHandlerDataKey1", New Global.System.Data.DataColumn() {Me.columnID}, true))
                Me.columnID.AutoIncrement = true
                Me.columnID.AllowDBNull = false
                Me.columnID.Unique = true
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewHoursRow() As HoursRow
                Return CType(Me.NewRow,HoursRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New HoursRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(HoursRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.HoursRowChangedEvent) Is Nothing) Then
                    RaiseEvent HoursRowChanged(Me, New HoursRowChangeEvent(CType(e.Row,HoursRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.HoursRowChangingEvent) Is Nothing) Then
                    RaiseEvent HoursRowChanging(Me, New HoursRowChangeEvent(CType(e.Row,HoursRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.HoursRowDeletedEvent) Is Nothing) Then
                    RaiseEvent HoursRowDeleted(Me, New HoursRowChangeEvent(CType(e.Row,HoursRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.HoursRowDeletingEvent) Is Nothing) Then
                    RaiseEvent HoursRowDeleting(Me, New HoursRowChangeEvent(CType(e.Row,HoursRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveHoursRow(ByVal row As HoursRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As AirHandlerReferenceData = New AirHandlerReferenceData()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "HoursDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class MotorsDataTable
            Inherits Global.System.Data.TypedTableBase(Of MotorsRow)
            
            Private columnID As Global.System.Data.DataColumn
            
            Private columnEnclosure As Global.System.Data.DataColumn
            
            Private columnEfficiency As Global.System.Data.DataColumn
            
            Private columnHP As Global.System.Data.DataColumn
            
            Private columnRPM As Global.System.Data.DataColumn
            
            Private columnNEMAFrame As Global.System.Data.DataColumn
            
            Private columnManufacturer As Global.System.Data.DataColumn
            
            Private columnCatalogNum As Global.System.Data.DataColumn
            
            Private columnListCost As Global.System.Data.DataColumn
            
            Private columnCDim As Global.System.Data.DataColumn
            
            Private columnShipWeight As Global.System.Data.DataColumn
            
            Private columnFullLoadEfficiency As Global.System.Data.DataColumn
            
            Private columnHertz As Global.System.Data.DataColumn
            
            Private columnVoltageCode As Global.System.Data.DataColumn
            
            Private columnFLA As Global.System.Data.DataColumn
            
            Private columnVFDCompatible As Global.System.Data.DataColumn
            
            Private columnLaborHours As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Motors"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property EnclosureColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEnclosure
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property EfficiencyColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEfficiency
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property HPColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnHP
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property RPMColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRPM
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property NEMAFrameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNEMAFrame
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ManufacturerColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnManufacturer
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CatalogNumColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCatalogNum
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ListCostColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnListCost
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CDimColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCDim
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ShipWeightColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnShipWeight
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FullLoadEfficiencyColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFullLoadEfficiency
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property HertzColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnHertz
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property VoltageCodeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnVoltageCode
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FLAColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFLA
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property VFDCompatibleColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnVFDCompatible
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property LaborHoursColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLaborHours
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As MotorsRow
                Get
                    Return CType(Me.Rows(index),MotorsRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event MotorsRowChanging As MotorsRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event MotorsRowChanged As MotorsRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event MotorsRowDeleting As MotorsRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event MotorsRowDeleted As MotorsRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddMotorsRow(ByVal row As MotorsRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddMotorsRow( _
                        ByVal Enclosure As String,  _
                        ByVal Efficiency As String,  _
                        ByVal HP As String,  _
                        ByVal RPM As Integer,  _
                        ByVal NEMAFrame As String,  _
                        ByVal Manufacturer As String,  _
                        ByVal CatalogNum As String,  _
                        ByVal ListCost As Double,  _
                        ByVal CDim As Double,  _
                        ByVal ShipWeight As Double,  _
                        ByVal FullLoadEfficiency As Double,  _
                        ByVal Hertz As Integer,  _
                        ByVal VoltageCode As String,  _
                        ByVal FLA As Double,  _
                        ByVal VFDCompatible As String,  _
                        ByVal LaborHours As Integer) As MotorsRow
                Dim rowMotorsRow As MotorsRow = CType(Me.NewRow,MotorsRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, Enclosure, Efficiency, HP, RPM, NEMAFrame, Manufacturer, CatalogNum, ListCost, CDim, ShipWeight, FullLoadEfficiency, Hertz, VoltageCode, FLA, VFDCompatible, LaborHours}
                rowMotorsRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowMotorsRow)
                Return rowMotorsRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByID(ByVal ID As Integer) As MotorsRow
                Return CType(Me.Rows.Find(New Object() {ID}),MotorsRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As MotorsDataTable = CType(MyBase.Clone,MotorsDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New MotorsDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnID = MyBase.Columns("ID")
                Me.columnEnclosure = MyBase.Columns("Enclosure")
                Me.columnEfficiency = MyBase.Columns("Efficiency")
                Me.columnHP = MyBase.Columns("HP")
                Me.columnRPM = MyBase.Columns("RPM")
                Me.columnNEMAFrame = MyBase.Columns("NEMAFrame")
                Me.columnManufacturer = MyBase.Columns("Manufacturer")
                Me.columnCatalogNum = MyBase.Columns("CatalogNum")
                Me.columnListCost = MyBase.Columns("ListCost")
                Me.columnCDim = MyBase.Columns("CDim")
                Me.columnShipWeight = MyBase.Columns("ShipWeight")
                Me.columnFullLoadEfficiency = MyBase.Columns("FullLoadEfficiency")
                Me.columnHertz = MyBase.Columns("Hertz")
                Me.columnVoltageCode = MyBase.Columns("VoltageCode")
                Me.columnFLA = MyBase.Columns("FLA")
                Me.columnVFDCompatible = MyBase.Columns("VFDCompatible")
                Me.columnLaborHours = MyBase.Columns("LaborHours")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnID)
                Me.columnEnclosure = New Global.System.Data.DataColumn("Enclosure", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEnclosure)
                Me.columnEfficiency = New Global.System.Data.DataColumn("Efficiency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEfficiency)
                Me.columnHP = New Global.System.Data.DataColumn("HP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnHP)
                Me.columnRPM = New Global.System.Data.DataColumn("RPM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRPM)
                Me.columnNEMAFrame = New Global.System.Data.DataColumn("NEMAFrame", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNEMAFrame)
                Me.columnManufacturer = New Global.System.Data.DataColumn("Manufacturer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnManufacturer)
                Me.columnCatalogNum = New Global.System.Data.DataColumn("CatalogNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCatalogNum)
                Me.columnListCost = New Global.System.Data.DataColumn("ListCost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnListCost)
                Me.columnCDim = New Global.System.Data.DataColumn("CDim", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCDim)
                Me.columnShipWeight = New Global.System.Data.DataColumn("ShipWeight", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnShipWeight)
                Me.columnFullLoadEfficiency = New Global.System.Data.DataColumn("FullLoadEfficiency", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFullLoadEfficiency)
                Me.columnHertz = New Global.System.Data.DataColumn("Hertz", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnHertz)
                Me.columnVoltageCode = New Global.System.Data.DataColumn("VoltageCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnVoltageCode)
                Me.columnFLA = New Global.System.Data.DataColumn("FLA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFLA)
                Me.columnVFDCompatible = New Global.System.Data.DataColumn("VFDCompatible", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnVFDCompatible)
                Me.columnLaborHours = New Global.System.Data.DataColumn("LaborHours", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLaborHours)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("AirHandlerDataKey2", New Global.System.Data.DataColumn() {Me.columnID}, true))
                Me.columnID.AutoIncrement = true
                Me.columnID.AllowDBNull = false
                Me.columnID.Unique = true
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewMotorsRow() As MotorsRow
                Return CType(Me.NewRow,MotorsRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New MotorsRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(MotorsRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.MotorsRowChangedEvent) Is Nothing) Then
                    RaiseEvent MotorsRowChanged(Me, New MotorsRowChangeEvent(CType(e.Row,MotorsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.MotorsRowChangingEvent) Is Nothing) Then
                    RaiseEvent MotorsRowChanging(Me, New MotorsRowChangeEvent(CType(e.Row,MotorsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.MotorsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent MotorsRowDeleted(Me, New MotorsRowChangeEvent(CType(e.Row,MotorsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.MotorsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent MotorsRowDeleting(Me, New MotorsRowChangeEvent(CType(e.Row,MotorsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveMotorsRow(ByVal row As MotorsRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As AirHandlerReferenceData = New AirHandlerReferenceData()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "MotorsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class BidiFansDataTable
            Inherits Global.System.Data.TypedTableBase(Of BidiFansRow)
            
            Private columnID As Global.System.Data.DataColumn
            
            Private columnModel As Global.System.Data.DataColumn
            
            Private columnSize As Global.System.Data.DataColumn
            
            Private columnCost As Global.System.Data.DataColumn
            
            Private columnPlatformCost1 As Global.System.Data.DataColumn
            
            Private columnPlatformCost2 As Global.System.Data.DataColumn
            
            Private columnWeight As Global.System.Data.DataColumn
            
            Private columnLaborHours As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "BidiFans"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ModelColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModel
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SizeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSize
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CostColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCost
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property PlatformCost1Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPlatformCost1
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property PlatformCost2Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPlatformCost2
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property WeightColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnWeight
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property LaborHoursColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLaborHours
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As BidiFansRow
                Get
                    Return CType(Me.Rows(index),BidiFansRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event BidiFansRowChanging As BidiFansRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event BidiFansRowChanged As BidiFansRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event BidiFansRowDeleting As BidiFansRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event BidiFansRowDeleted As BidiFansRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddBidiFansRow(ByVal row As BidiFansRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddBidiFansRow(ByVal Model As String, ByVal Size As Double, ByVal Cost As Double, ByVal PlatformCost1 As Double, ByVal PlatformCost2 As Double, ByVal Weight As Double, ByVal LaborHours As Integer) As BidiFansRow
                Dim rowBidiFansRow As BidiFansRow = CType(Me.NewRow,BidiFansRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, Model, Size, Cost, PlatformCost1, PlatformCost2, Weight, LaborHours}
                rowBidiFansRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowBidiFansRow)
                Return rowBidiFansRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByID(ByVal ID As Integer) As BidiFansRow
                Return CType(Me.Rows.Find(New Object() {ID}),BidiFansRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As BidiFansDataTable = CType(MyBase.Clone,BidiFansDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New BidiFansDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnID = MyBase.Columns("ID")
                Me.columnModel = MyBase.Columns("Model")
                Me.columnSize = MyBase.Columns("Size")
                Me.columnCost = MyBase.Columns("Cost")
                Me.columnPlatformCost1 = MyBase.Columns("PlatformCost1")
                Me.columnPlatformCost2 = MyBase.Columns("PlatformCost2")
                Me.columnWeight = MyBase.Columns("Weight")
                Me.columnLaborHours = MyBase.Columns("LaborHours")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnID)
                Me.columnModel = New Global.System.Data.DataColumn("Model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModel)
                Me.columnSize = New Global.System.Data.DataColumn("Size", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSize)
                Me.columnCost = New Global.System.Data.DataColumn("Cost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCost)
                Me.columnPlatformCost1 = New Global.System.Data.DataColumn("PlatformCost1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPlatformCost1)
                Me.columnPlatformCost2 = New Global.System.Data.DataColumn("PlatformCost2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPlatformCost2)
                Me.columnWeight = New Global.System.Data.DataColumn("Weight", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnWeight)
                Me.columnLaborHours = New Global.System.Data.DataColumn("LaborHours", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLaborHours)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("AirHandlerDataKey3", New Global.System.Data.DataColumn() {Me.columnID}, true))
                Me.columnID.AutoIncrement = true
                Me.columnID.AllowDBNull = false
                Me.columnID.Unique = true
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewBidiFansRow() As BidiFansRow
                Return CType(Me.NewRow,BidiFansRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New BidiFansRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(BidiFansRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.BidiFansRowChangedEvent) Is Nothing) Then
                    RaiseEvent BidiFansRowChanged(Me, New BidiFansRowChangeEvent(CType(e.Row,BidiFansRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.BidiFansRowChangingEvent) Is Nothing) Then
                    RaiseEvent BidiFansRowChanging(Me, New BidiFansRowChangeEvent(CType(e.Row,BidiFansRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.BidiFansRowDeletedEvent) Is Nothing) Then
                    RaiseEvent BidiFansRowDeleted(Me, New BidiFansRowChangeEvent(CType(e.Row,BidiFansRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.BidiFansRowDeletingEvent) Is Nothing) Then
                    RaiseEvent BidiFansRowDeleting(Me, New BidiFansRowChangeEvent(CType(e.Row,BidiFansRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveBidiFansRow(ByVal row As BidiFansRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As AirHandlerReferenceData = New AirHandlerReferenceData()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "BidiFansDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class DuctHeatersDataTable
            Inherits Global.System.Data.TypedTableBase(Of DuctHeatersRow)
            
            Private columnID As Global.System.Data.DataColumn
            
            Private columnVolts As Global.System.Data.DataColumn
            
            Private columnKwMin As Global.System.Data.DataColumn
            
            Private columnKwMax As Global.System.Data.DataColumn
            
            Private columnStage As Global.System.Data.DataColumn
            
            Private columnBaseCost As Global.System.Data.DataColumn
            
            Private columnExtraStageCost As Global.System.Data.DataColumn
            
            Private columnDisconnectSwitchCost As Global.System.Data.DataColumn
            
            Private columnFusingCostMin As Global.System.Data.DataColumn
            
            Private columnScrCost As Global.System.Data.DataColumn
            
            Private columnLaborHours As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "DuctHeaters"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property VoltsColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnVolts
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property KwMinColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnKwMin
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property KwMaxColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnKwMax
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property StageColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnStage
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property BaseCostColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnBaseCost
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ExtraStageCostColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnExtraStageCost
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property DisconnectSwitchCostColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDisconnectSwitchCost
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FusingCostMinColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFusingCostMin
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ScrCostColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnScrCost
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property LaborHoursColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLaborHours
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As DuctHeatersRow
                Get
                    Return CType(Me.Rows(index),DuctHeatersRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event DuctHeatersRowChanging As DuctHeatersRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event DuctHeatersRowChanged As DuctHeatersRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event DuctHeatersRowDeleting As DuctHeatersRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event DuctHeatersRowDeleted As DuctHeatersRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddDuctHeatersRow(ByVal row As DuctHeatersRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddDuctHeatersRow(ByVal Volts As Integer, ByVal KwMin As Double, ByVal KwMax As Double, ByVal Stage As Integer, ByVal BaseCost As Double, ByVal ExtraStageCost As Double, ByVal DisconnectSwitchCost As Double, ByVal FusingCostMin As Double, ByVal ScrCost As Double, ByVal LaborHours As Integer) As DuctHeatersRow
                Dim rowDuctHeatersRow As DuctHeatersRow = CType(Me.NewRow,DuctHeatersRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, Volts, KwMin, KwMax, Stage, BaseCost, ExtraStageCost, DisconnectSwitchCost, FusingCostMin, ScrCost, LaborHours}
                rowDuctHeatersRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowDuctHeatersRow)
                Return rowDuctHeatersRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByID(ByVal ID As Integer) As DuctHeatersRow
                Return CType(Me.Rows.Find(New Object() {ID}),DuctHeatersRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As DuctHeatersDataTable = CType(MyBase.Clone,DuctHeatersDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New DuctHeatersDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnID = MyBase.Columns("ID")
                Me.columnVolts = MyBase.Columns("Volts")
                Me.columnKwMin = MyBase.Columns("KwMin")
                Me.columnKwMax = MyBase.Columns("KwMax")
                Me.columnStage = MyBase.Columns("Stage")
                Me.columnBaseCost = MyBase.Columns("BaseCost")
                Me.columnExtraStageCost = MyBase.Columns("ExtraStageCost")
                Me.columnDisconnectSwitchCost = MyBase.Columns("DisconnectSwitchCost")
                Me.columnFusingCostMin = MyBase.Columns("FusingCostMin")
                Me.columnScrCost = MyBase.Columns("ScrCost")
                Me.columnLaborHours = MyBase.Columns("LaborHours")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnID)
                Me.columnVolts = New Global.System.Data.DataColumn("Volts", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnVolts)
                Me.columnKwMin = New Global.System.Data.DataColumn("KwMin", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnKwMin)
                Me.columnKwMax = New Global.System.Data.DataColumn("KwMax", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnKwMax)
                Me.columnStage = New Global.System.Data.DataColumn("Stage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnStage)
                Me.columnBaseCost = New Global.System.Data.DataColumn("BaseCost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnBaseCost)
                Me.columnExtraStageCost = New Global.System.Data.DataColumn("ExtraStageCost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnExtraStageCost)
                Me.columnDisconnectSwitchCost = New Global.System.Data.DataColumn("DisconnectSwitchCost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDisconnectSwitchCost)
                Me.columnFusingCostMin = New Global.System.Data.DataColumn("FusingCostMin", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFusingCostMin)
                Me.columnScrCost = New Global.System.Data.DataColumn("ScrCost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnScrCost)
                Me.columnLaborHours = New Global.System.Data.DataColumn("LaborHours", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLaborHours)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("AirHandlerDataKey5", New Global.System.Data.DataColumn() {Me.columnID}, true))
                Me.columnID.AutoIncrement = true
                Me.columnID.AllowDBNull = false
                Me.columnID.Unique = true
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewDuctHeatersRow() As DuctHeatersRow
                Return CType(Me.NewRow,DuctHeatersRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New DuctHeatersRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(DuctHeatersRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.DuctHeatersRowChangedEvent) Is Nothing) Then
                    RaiseEvent DuctHeatersRowChanged(Me, New DuctHeatersRowChangeEvent(CType(e.Row,DuctHeatersRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.DuctHeatersRowChangingEvent) Is Nothing) Then
                    RaiseEvent DuctHeatersRowChanging(Me, New DuctHeatersRowChangeEvent(CType(e.Row,DuctHeatersRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.DuctHeatersRowDeletedEvent) Is Nothing) Then
                    RaiseEvent DuctHeatersRowDeleted(Me, New DuctHeatersRowChangeEvent(CType(e.Row,DuctHeatersRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.DuctHeatersRowDeletingEvent) Is Nothing) Then
                    RaiseEvent DuctHeatersRowDeleting(Me, New DuctHeatersRowChangeEvent(CType(e.Row,DuctHeatersRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveDuctHeatersRow(ByVal row As DuctHeatersRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As AirHandlerReferenceData = New AirHandlerReferenceData()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "DuctHeatersDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class CoilPricesDataTable
            Inherits Global.System.Data.TypedTableBase(Of CoilPricesRow)
            
            Private columnID As Global.System.Data.DataColumn
            
            Private columnModel As Global.System.Data.DataColumn
            
            Private columnNumRows As Global.System.Data.DataColumn
            
            Private columnCost As Global.System.Data.DataColumn
            
            Private columnFAHours As Global.System.Data.DataColumn
            
            Private columnOtherHours As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "CoilPrices"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ModelColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModel
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property NumRowsColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNumRows
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CostColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCost
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FAHoursColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFAHours
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property OtherHoursColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnOtherHours
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As CoilPricesRow
                Get
                    Return CType(Me.Rows(index),CoilPricesRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CoilPricesRowChanging As CoilPricesRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CoilPricesRowChanged As CoilPricesRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CoilPricesRowDeleting As CoilPricesRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CoilPricesRowDeleted As CoilPricesRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddCoilPricesRow(ByVal row As CoilPricesRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddCoilPricesRow(ByVal Model As String, ByVal NumRows As Integer, ByVal Cost As Double, ByVal FAHours As Double, ByVal OtherHours As Double) As CoilPricesRow
                Dim rowCoilPricesRow As CoilPricesRow = CType(Me.NewRow,CoilPricesRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, Model, NumRows, Cost, FAHours, OtherHours}
                rowCoilPricesRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowCoilPricesRow)
                Return rowCoilPricesRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByID(ByVal ID As Integer) As CoilPricesRow
                Return CType(Me.Rows.Find(New Object() {ID}),CoilPricesRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As CoilPricesDataTable = CType(MyBase.Clone,CoilPricesDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New CoilPricesDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnID = MyBase.Columns("ID")
                Me.columnModel = MyBase.Columns("Model")
                Me.columnNumRows = MyBase.Columns("NumRows")
                Me.columnCost = MyBase.Columns("Cost")
                Me.columnFAHours = MyBase.Columns("FAHours")
                Me.columnOtherHours = MyBase.Columns("OtherHours")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnID)
                Me.columnModel = New Global.System.Data.DataColumn("Model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModel)
                Me.columnNumRows = New Global.System.Data.DataColumn("NumRows", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNumRows)
                Me.columnCost = New Global.System.Data.DataColumn("Cost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCost)
                Me.columnFAHours = New Global.System.Data.DataColumn("FAHours", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFAHours)
                Me.columnOtherHours = New Global.System.Data.DataColumn("OtherHours", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOtherHours)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("AirHandlerDataKey6", New Global.System.Data.DataColumn() {Me.columnID}, true))
                Me.columnID.AutoIncrement = true
                Me.columnID.AllowDBNull = false
                Me.columnID.Unique = true
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewCoilPricesRow() As CoilPricesRow
                Return CType(Me.NewRow,CoilPricesRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New CoilPricesRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(CoilPricesRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.CoilPricesRowChangedEvent) Is Nothing) Then
                    RaiseEvent CoilPricesRowChanged(Me, New CoilPricesRowChangeEvent(CType(e.Row,CoilPricesRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.CoilPricesRowChangingEvent) Is Nothing) Then
                    RaiseEvent CoilPricesRowChanging(Me, New CoilPricesRowChangeEvent(CType(e.Row,CoilPricesRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.CoilPricesRowDeletedEvent) Is Nothing) Then
                    RaiseEvent CoilPricesRowDeleted(Me, New CoilPricesRowChangeEvent(CType(e.Row,CoilPricesRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.CoilPricesRowDeletingEvent) Is Nothing) Then
                    RaiseEvent CoilPricesRowDeleting(Me, New CoilPricesRowChangeEvent(CType(e.Row,CoilPricesRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveCoilPricesRow(ByVal row As CoilPricesRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As AirHandlerReferenceData = New AirHandlerReferenceData()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "CoilPricesDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ForwardCurvedFansDataTable
            Inherits Global.System.Data.TypedTableBase(Of ForwardCurvedFansRow)
            
            Private columnID As Global.System.Data.DataColumn
            
            Private columnModel As Global.System.Data.DataColumn
            
            Private columnSize As Global.System.Data.DataColumn
            
            Private columnShaftDiameter As Global.System.Data.DataColumn
            
            Private columnMaxRPM As Global.System.Data.DataColumn
            
            Private columnHP As Global.System.Data.DataColumn
            
            Private columnBlowerPullyPitchDiameterMin As Global.System.Data.DataColumn
            
            Private columnMotorPlatform1 As Global.System.Data.DataColumn
            
            Private columnMotorPlatform2 As Global.System.Data.DataColumn
            
            Private columnDelhiPartNum As Global.System.Data.DataColumn
            
            Private columnCost As Global.System.Data.DataColumn
            
            Private columnWeight As Global.System.Data.DataColumn
            
            Private columnLaborHours As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "ForwardCurvedFans"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ModelColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModel
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SizeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSize
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ShaftDiameterColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnShaftDiameter
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property MaxRPMColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMaxRPM
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property HPColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnHP
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property BlowerPullyPitchDiameterMinColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnBlowerPullyPitchDiameterMin
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property MotorPlatform1Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMotorPlatform1
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property MotorPlatform2Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMotorPlatform2
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property DelhiPartNumColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDelhiPartNum
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CostColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCost
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property WeightColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnWeight
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property LaborHoursColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLaborHours
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ForwardCurvedFansRow
                Get
                    Return CType(Me.Rows(index),ForwardCurvedFansRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ForwardCurvedFansRowChanging As ForwardCurvedFansRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ForwardCurvedFansRowChanged As ForwardCurvedFansRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ForwardCurvedFansRowDeleting As ForwardCurvedFansRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ForwardCurvedFansRowDeleted As ForwardCurvedFansRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddForwardCurvedFansRow(ByVal row As ForwardCurvedFansRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddForwardCurvedFansRow(ByVal Model As String, ByVal Size As String, ByVal ShaftDiameter As String, ByVal MaxRPM As Double, ByVal HP As Double, ByVal BlowerPullyPitchDiameterMin As Double, ByVal MotorPlatform1 As Double, ByVal MotorPlatform2 As Double, ByVal DelhiPartNum As String, ByVal Cost As Double, ByVal Weight As Double, ByVal LaborHours As Integer) As ForwardCurvedFansRow
                Dim rowForwardCurvedFansRow As ForwardCurvedFansRow = CType(Me.NewRow,ForwardCurvedFansRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, Model, Size, ShaftDiameter, MaxRPM, HP, BlowerPullyPitchDiameterMin, MotorPlatform1, MotorPlatform2, DelhiPartNum, Cost, Weight, LaborHours}
                rowForwardCurvedFansRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowForwardCurvedFansRow)
                Return rowForwardCurvedFansRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByID(ByVal ID As Integer) As ForwardCurvedFansRow
                Return CType(Me.Rows.Find(New Object() {ID}),ForwardCurvedFansRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ForwardCurvedFansDataTable = CType(MyBase.Clone,ForwardCurvedFansDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ForwardCurvedFansDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnID = MyBase.Columns("ID")
                Me.columnModel = MyBase.Columns("Model")
                Me.columnSize = MyBase.Columns("Size")
                Me.columnShaftDiameter = MyBase.Columns("ShaftDiameter")
                Me.columnMaxRPM = MyBase.Columns("MaxRPM")
                Me.columnHP = MyBase.Columns("HP")
                Me.columnBlowerPullyPitchDiameterMin = MyBase.Columns("BlowerPullyPitchDiameterMin")
                Me.columnMotorPlatform1 = MyBase.Columns("MotorPlatform1")
                Me.columnMotorPlatform2 = MyBase.Columns("MotorPlatform2")
                Me.columnDelhiPartNum = MyBase.Columns("DelhiPartNum")
                Me.columnCost = MyBase.Columns("Cost")
                Me.columnWeight = MyBase.Columns("Weight")
                Me.columnLaborHours = MyBase.Columns("LaborHours")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnID)
                Me.columnModel = New Global.System.Data.DataColumn("Model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModel)
                Me.columnSize = New Global.System.Data.DataColumn("Size", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSize)
                Me.columnShaftDiameter = New Global.System.Data.DataColumn("ShaftDiameter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnShaftDiameter)
                Me.columnMaxRPM = New Global.System.Data.DataColumn("MaxRPM", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMaxRPM)
                Me.columnHP = New Global.System.Data.DataColumn("HP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnHP)
                Me.columnBlowerPullyPitchDiameterMin = New Global.System.Data.DataColumn("BlowerPullyPitchDiameterMin", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnBlowerPullyPitchDiameterMin)
                Me.columnMotorPlatform1 = New Global.System.Data.DataColumn("MotorPlatform1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMotorPlatform1)
                Me.columnMotorPlatform2 = New Global.System.Data.DataColumn("MotorPlatform2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMotorPlatform2)
                Me.columnDelhiPartNum = New Global.System.Data.DataColumn("DelhiPartNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDelhiPartNum)
                Me.columnCost = New Global.System.Data.DataColumn("Cost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCost)
                Me.columnWeight = New Global.System.Data.DataColumn("Weight", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnWeight)
                Me.columnLaborHours = New Global.System.Data.DataColumn("LaborHours", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLaborHours)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("AirHandlerDataKey4", New Global.System.Data.DataColumn() {Me.columnID}, true))
                Me.columnID.AutoIncrement = true
                Me.columnID.AllowDBNull = false
                Me.columnID.Unique = true
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewForwardCurvedFansRow() As ForwardCurvedFansRow
                Return CType(Me.NewRow,ForwardCurvedFansRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ForwardCurvedFansRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ForwardCurvedFansRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ForwardCurvedFansRowChangedEvent) Is Nothing) Then
                    RaiseEvent ForwardCurvedFansRowChanged(Me, New ForwardCurvedFansRowChangeEvent(CType(e.Row,ForwardCurvedFansRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ForwardCurvedFansRowChangingEvent) Is Nothing) Then
                    RaiseEvent ForwardCurvedFansRowChanging(Me, New ForwardCurvedFansRowChangeEvent(CType(e.Row,ForwardCurvedFansRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ForwardCurvedFansRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ForwardCurvedFansRowDeleted(Me, New ForwardCurvedFansRowChangeEvent(CType(e.Row,ForwardCurvedFansRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ForwardCurvedFansRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ForwardCurvedFansRowDeleting(Me, New ForwardCurvedFansRowChangeEvent(CType(e.Row,ForwardCurvedFansRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveForwardCurvedFansRow(ByVal row As ForwardCurvedFansRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As AirHandlerReferenceData = New AirHandlerReferenceData()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ForwardCurvedFansDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class FiltersDataTable
            Inherits Global.System.Data.TypedTableBase(Of FiltersRow)
            
            Private columnID As Global.System.Data.DataColumn
            
            Private columnFilterPartNum As Global.System.Data.DataColumn
            
            Private columnSpecification As Global.System.Data.DataColumn
            
            Private columnListPrice As Global.System.Data.DataColumn
            
            Private columnWeight As Global.System.Data.DataColumn
            
            Private columnLaborHours As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Filters"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FilterPartNumColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFilterPartNum
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SpecificationColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSpecification
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ListPriceColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnListPrice
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property WeightColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnWeight
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property LaborHoursColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLaborHours
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As FiltersRow
                Get
                    Return CType(Me.Rows(index),FiltersRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event FiltersRowChanging As FiltersRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event FiltersRowChanged As FiltersRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event FiltersRowDeleting As FiltersRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event FiltersRowDeleted As FiltersRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddFiltersRow(ByVal row As FiltersRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddFiltersRow(ByVal FilterPartNum As Integer, ByVal Specification As String, ByVal ListPrice As Double, ByVal Weight As Double, ByVal LaborHours As Integer) As FiltersRow
                Dim rowFiltersRow As FiltersRow = CType(Me.NewRow,FiltersRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, FilterPartNum, Specification, ListPrice, Weight, LaborHours}
                rowFiltersRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowFiltersRow)
                Return rowFiltersRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByID(ByVal ID As Integer) As FiltersRow
                Return CType(Me.Rows.Find(New Object() {ID}),FiltersRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As FiltersDataTable = CType(MyBase.Clone,FiltersDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New FiltersDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnID = MyBase.Columns("ID")
                Me.columnFilterPartNum = MyBase.Columns("FilterPartNum")
                Me.columnSpecification = MyBase.Columns("Specification")
                Me.columnListPrice = MyBase.Columns("ListPrice")
                Me.columnWeight = MyBase.Columns("Weight")
                Me.columnLaborHours = MyBase.Columns("LaborHours")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnID)
                Me.columnFilterPartNum = New Global.System.Data.DataColumn("FilterPartNum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFilterPartNum)
                Me.columnSpecification = New Global.System.Data.DataColumn("Specification", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSpecification)
                Me.columnListPrice = New Global.System.Data.DataColumn("ListPrice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnListPrice)
                Me.columnWeight = New Global.System.Data.DataColumn("Weight", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnWeight)
                Me.columnLaborHours = New Global.System.Data.DataColumn("LaborHours", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLaborHours)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("AirHandlerDataKey7", New Global.System.Data.DataColumn() {Me.columnID}, true))
                Me.columnID.AutoIncrement = true
                Me.columnID.AllowDBNull = false
                Me.columnID.Unique = true
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewFiltersRow() As FiltersRow
                Return CType(Me.NewRow,FiltersRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New FiltersRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(FiltersRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.FiltersRowChangedEvent) Is Nothing) Then
                    RaiseEvent FiltersRowChanged(Me, New FiltersRowChangeEvent(CType(e.Row,FiltersRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.FiltersRowChangingEvent) Is Nothing) Then
                    RaiseEvent FiltersRowChanging(Me, New FiltersRowChangeEvent(CType(e.Row,FiltersRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.FiltersRowDeletedEvent) Is Nothing) Then
                    RaiseEvent FiltersRowDeleted(Me, New FiltersRowChangeEvent(CType(e.Row,FiltersRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.FiltersRowDeletingEvent) Is Nothing) Then
                    RaiseEvent FiltersRowDeleting(Me, New FiltersRowChangeEvent(CType(e.Row,FiltersRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveFiltersRow(ByVal row As FiltersRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As AirHandlerReferenceData = New AirHandlerReferenceData()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "FiltersDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class DampersDataTable
            Inherits Global.System.Data.TypedTableBase(Of DampersRow)
            
            Private columnID As Global.System.Data.DataColumn
            
            Private columnModel As Global.System.Data.DataColumn
            
            Private columnType As Global.System.Data.DataColumn
            
            Private columnMetal As Global.System.Data.DataColumn
            
            Private columnOAHeight As Global.System.Data.DataColumn
            
            Private columnOAWidth As Global.System.Data.DataColumn
            
            Private columnRAHeight As Global.System.Data.DataColumn
            
            Private columnRAWidth As Global.System.Data.DataColumn
            
            Private columnCost As Global.System.Data.DataColumn
            
            Private columnLaborHours As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Dampers"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ModelColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModel
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnType
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property MetalColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMetal
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property OAHeightColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnOAHeight
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property OAWidthColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnOAWidth
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property RAHeightColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRAHeight
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property RAWidthColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRAWidth
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CostColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCost
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property LaborHoursColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLaborHours
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As DampersRow
                Get
                    Return CType(Me.Rows(index),DampersRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event DampersRowChanging As DampersRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event DampersRowChanged As DampersRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event DampersRowDeleting As DampersRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event DampersRowDeleted As DampersRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddDampersRow(ByVal row As DampersRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddDampersRow(ByVal Model As String, ByVal Type As String, ByVal Metal As String, ByVal OAHeight As Double, ByVal OAWidth As Double, ByVal RAHeight As Double, ByVal RAWidth As Double, ByVal Cost As Double, ByVal LaborHours As Integer) As DampersRow
                Dim rowDampersRow As DampersRow = CType(Me.NewRow,DampersRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, Model, Type, Metal, OAHeight, OAWidth, RAHeight, RAWidth, Cost, LaborHours}
                rowDampersRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowDampersRow)
                Return rowDampersRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByID(ByVal ID As Integer) As DampersRow
                Return CType(Me.Rows.Find(New Object() {ID}),DampersRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As DampersDataTable = CType(MyBase.Clone,DampersDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New DampersDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnID = MyBase.Columns("ID")
                Me.columnModel = MyBase.Columns("Model")
                Me.columnType = MyBase.Columns("Type")
                Me.columnMetal = MyBase.Columns("Metal")
                Me.columnOAHeight = MyBase.Columns("OAHeight")
                Me.columnOAWidth = MyBase.Columns("OAWidth")
                Me.columnRAHeight = MyBase.Columns("RAHeight")
                Me.columnRAWidth = MyBase.Columns("RAWidth")
                Me.columnCost = MyBase.Columns("Cost")
                Me.columnLaborHours = MyBase.Columns("LaborHours")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnID)
                Me.columnModel = New Global.System.Data.DataColumn("Model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModel)
                Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnType)
                Me.columnMetal = New Global.System.Data.DataColumn("Metal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMetal)
                Me.columnOAHeight = New Global.System.Data.DataColumn("OAHeight", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOAHeight)
                Me.columnOAWidth = New Global.System.Data.DataColumn("OAWidth", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOAWidth)
                Me.columnRAHeight = New Global.System.Data.DataColumn("RAHeight", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRAHeight)
                Me.columnRAWidth = New Global.System.Data.DataColumn("RAWidth", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRAWidth)
                Me.columnCost = New Global.System.Data.DataColumn("Cost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCost)
                Me.columnLaborHours = New Global.System.Data.DataColumn("LaborHours", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLaborHours)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("AirHandlerDataKey8", New Global.System.Data.DataColumn() {Me.columnID}, true))
                Me.columnID.AutoIncrement = true
                Me.columnID.AllowDBNull = false
                Me.columnID.Unique = true
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewDampersRow() As DampersRow
                Return CType(Me.NewRow,DampersRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New DampersRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(DampersRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.DampersRowChangedEvent) Is Nothing) Then
                    RaiseEvent DampersRowChanged(Me, New DampersRowChangeEvent(CType(e.Row,DampersRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.DampersRowChangingEvent) Is Nothing) Then
                    RaiseEvent DampersRowChanging(Me, New DampersRowChangeEvent(CType(e.Row,DampersRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.DampersRowDeletedEvent) Is Nothing) Then
                    RaiseEvent DampersRowDeleted(Me, New DampersRowChangeEvent(CType(e.Row,DampersRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.DampersRowDeletingEvent) Is Nothing) Then
                    RaiseEvent DampersRowDeleting(Me, New DampersRowChangeEvent(CType(e.Row,DampersRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveDampersRow(ByVal row As DampersRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As AirHandlerReferenceData = New AirHandlerReferenceData()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "DampersDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class CoilsDataTable
            Inherits Global.System.Data.TypedTableBase(Of CoilsRow)
            
            Private columnModel As Global.System.Data.DataColumn
            
            Private columnAirflowMax As Global.System.Data.DataColumn
            
            Private columnAirflowMin As Global.System.Data.DataColumn
            
            Private columnNominalCapacityMin As Global.System.Data.DataColumn
            
            Private columnNominalCapacityMax As Global.System.Data.DataColumn
            
            Private columnCabWidth As Global.System.Data.DataColumn
            
            Private columnCabHeight As Global.System.Data.DataColumn
            
            Private columnMBOADamperArea As Global.System.Data.DataColumn
            
            Private columnMBOAHoodArea As Global.System.Data.DataColumn
            
            Private columnMbRaDmpArea As Global.System.Data.DataColumn
            
            Private columnFlatFilterArea As Global.System.Data.DataColumn
            
            Private columnFilterHeight As Global.System.Data.DataColumn
            
            Private columnFilterLength As Global.System.Data.DataColumn
            
            Private columnNumFilters As Global.System.Data.DataColumn
            
            Private columnActualCoilArea As Global.System.Data.DataColumn
            
            Private columnNumCoils As Global.System.Data.DataColumn
            
            Private columnFinHeight As Global.System.Data.DataColumn
            
            Private columnFinLength As Global.System.Data.DataColumn
            
            Private columnCoilArea As Global.System.Data.DataColumn
            
            Private columnDwdiFcFanSize As Global.System.Data.DataColumn
            
            Private columnDwdiDcMotorHpMax As Global.System.Data.DataColumn
            
            Private columnSwsiPlenumFanSize As Global.System.Data.DataColumn
            
            Private columnSwsiPlenumFanHpMax As Global.System.Data.DataColumn
            
            Private columnAirBlenderArea As Global.System.Data.DataColumn
            
            Private columnSoundAttenuatorArea As Global.System.Data.DataColumn
            
            Private columnDischargeOpeningArea As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Coils"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ModelColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModel
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property AirflowMaxColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAirflowMax
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property AirflowMinColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAirflowMin
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property NominalCapacityMinColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNominalCapacityMin
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property NominalCapacityMaxColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNominalCapacityMax
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CabWidthColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCabWidth
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CabHeightColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCabHeight
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property MBOADamperAreaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMBOADamperArea
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property MBOAHoodAreaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMBOAHoodArea
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property MbRaDmpAreaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMbRaDmpArea
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FlatFilterAreaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFlatFilterArea
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FilterHeightColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFilterHeight
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FilterLengthColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFilterLength
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property NumFiltersColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNumFilters
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ActualCoilAreaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnActualCoilArea
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property NumCoilsColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNumCoils
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FinHeightColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFinHeight
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FinLengthColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFinLength
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CoilAreaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCoilArea
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property DwdiFcFanSizeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDwdiFcFanSize
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property DwdiDcMotorHpMaxColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDwdiDcMotorHpMax
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SwsiPlenumFanSizeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSwsiPlenumFanSize
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SwsiPlenumFanHpMaxColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSwsiPlenumFanHpMax
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property AirBlenderAreaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAirBlenderArea
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SoundAttenuatorAreaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSoundAttenuatorArea
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property DischargeOpeningAreaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDischargeOpeningArea
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As CoilsRow
                Get
                    Return CType(Me.Rows(index),CoilsRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CoilsRowChanging As CoilsRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CoilsRowChanged As CoilsRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CoilsRowDeleting As CoilsRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CoilsRowDeleted As CoilsRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddCoilsRow(ByVal row As CoilsRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddCoilsRow( _
                        ByVal Model As String,  _
                        ByVal AirflowMax As Double,  _
                        ByVal AirflowMin As Double,  _
                        ByVal NominalCapacityMin As Double,  _
                        ByVal NominalCapacityMax As Double,  _
                        ByVal CabWidth As Double,  _
                        ByVal CabHeight As Double,  _
                        ByVal MBOADamperArea As Double,  _
                        ByVal MBOAHoodArea As Double,  _
                        ByVal MbRaDmpArea As Double,  _
                        ByVal FlatFilterArea As Double,  _
                        ByVal FilterHeight As Double,  _
                        ByVal FilterLength As Double,  _
                        ByVal NumFilters As Integer,  _
                        ByVal ActualCoilArea As Double,  _
                        ByVal NumCoils As Integer,  _
                        ByVal FinHeight As Double,  _
                        ByVal FinLength As Double,  _
                        ByVal CoilArea As Double,  _
                        ByVal DwdiFcFanSize As String,  _
                        ByVal DwdiDcMotorHpMax As Double,  _
                        ByVal SwsiPlenumFanSize As String,  _
                        ByVal SwsiPlenumFanHpMax As Double,  _
                        ByVal AirBlenderArea As Double,  _
                        ByVal SoundAttenuatorArea As Double,  _
                        ByVal DischargeOpeningArea As Double) As CoilsRow
                Dim rowCoilsRow As CoilsRow = CType(Me.NewRow,CoilsRow)
                Dim columnValuesArray() As Object = New Object() {Model, AirflowMax, AirflowMin, NominalCapacityMin, NominalCapacityMax, CabWidth, CabHeight, MBOADamperArea, MBOAHoodArea, MbRaDmpArea, FlatFilterArea, FilterHeight, FilterLength, NumFilters, ActualCoilArea, NumCoils, FinHeight, FinLength, CoilArea, DwdiFcFanSize, DwdiDcMotorHpMax, SwsiPlenumFanSize, SwsiPlenumFanHpMax, AirBlenderArea, SoundAttenuatorArea, DischargeOpeningArea}
                rowCoilsRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowCoilsRow)
                Return rowCoilsRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As CoilsDataTable = CType(MyBase.Clone,CoilsDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New CoilsDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnModel = MyBase.Columns("Model")
                Me.columnAirflowMax = MyBase.Columns("AirflowMax")
                Me.columnAirflowMin = MyBase.Columns("AirflowMin")
                Me.columnNominalCapacityMin = MyBase.Columns("NominalCapacityMin")
                Me.columnNominalCapacityMax = MyBase.Columns("NominalCapacityMax")
                Me.columnCabWidth = MyBase.Columns("CabWidth")
                Me.columnCabHeight = MyBase.Columns("CabHeight")
                Me.columnMBOADamperArea = MyBase.Columns("MBOADamperArea")
                Me.columnMBOAHoodArea = MyBase.Columns("MBOAHoodArea")
                Me.columnMbRaDmpArea = MyBase.Columns("MbRaDmpArea")
                Me.columnFlatFilterArea = MyBase.Columns("FlatFilterArea")
                Me.columnFilterHeight = MyBase.Columns("FilterHeight")
                Me.columnFilterLength = MyBase.Columns("FilterLength")
                Me.columnNumFilters = MyBase.Columns("NumFilters")
                Me.columnActualCoilArea = MyBase.Columns("ActualCoilArea")
                Me.columnNumCoils = MyBase.Columns("NumCoils")
                Me.columnFinHeight = MyBase.Columns("FinHeight")
                Me.columnFinLength = MyBase.Columns("FinLength")
                Me.columnCoilArea = MyBase.Columns("CoilArea")
                Me.columnDwdiFcFanSize = MyBase.Columns("DwdiFcFanSize")
                Me.columnDwdiDcMotorHpMax = MyBase.Columns("DwdiDcMotorHpMax")
                Me.columnSwsiPlenumFanSize = MyBase.Columns("SwsiPlenumFanSize")
                Me.columnSwsiPlenumFanHpMax = MyBase.Columns("SwsiPlenumFanHpMax")
                Me.columnAirBlenderArea = MyBase.Columns("AirBlenderArea")
                Me.columnSoundAttenuatorArea = MyBase.Columns("SoundAttenuatorArea")
                Me.columnDischargeOpeningArea = MyBase.Columns("DischargeOpeningArea")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnModel = New Global.System.Data.DataColumn("Model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModel)
                Me.columnAirflowMax = New Global.System.Data.DataColumn("AirflowMax", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAirflowMax)
                Me.columnAirflowMin = New Global.System.Data.DataColumn("AirflowMin", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAirflowMin)
                Me.columnNominalCapacityMin = New Global.System.Data.DataColumn("NominalCapacityMin", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNominalCapacityMin)
                Me.columnNominalCapacityMax = New Global.System.Data.DataColumn("NominalCapacityMax", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNominalCapacityMax)
                Me.columnCabWidth = New Global.System.Data.DataColumn("CabWidth", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCabWidth)
                Me.columnCabHeight = New Global.System.Data.DataColumn("CabHeight", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCabHeight)
                Me.columnMBOADamperArea = New Global.System.Data.DataColumn("MBOADamperArea", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMBOADamperArea)
                Me.columnMBOAHoodArea = New Global.System.Data.DataColumn("MBOAHoodArea", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMBOAHoodArea)
                Me.columnMbRaDmpArea = New Global.System.Data.DataColumn("MbRaDmpArea", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMbRaDmpArea)
                Me.columnFlatFilterArea = New Global.System.Data.DataColumn("FlatFilterArea", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFlatFilterArea)
                Me.columnFilterHeight = New Global.System.Data.DataColumn("FilterHeight", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFilterHeight)
                Me.columnFilterLength = New Global.System.Data.DataColumn("FilterLength", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFilterLength)
                Me.columnNumFilters = New Global.System.Data.DataColumn("NumFilters", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNumFilters)
                Me.columnActualCoilArea = New Global.System.Data.DataColumn("ActualCoilArea", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnActualCoilArea)
                Me.columnNumCoils = New Global.System.Data.DataColumn("NumCoils", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNumCoils)
                Me.columnFinHeight = New Global.System.Data.DataColumn("FinHeight", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFinHeight)
                Me.columnFinLength = New Global.System.Data.DataColumn("FinLength", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFinLength)
                Me.columnCoilArea = New Global.System.Data.DataColumn("CoilArea", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCoilArea)
                Me.columnDwdiFcFanSize = New Global.System.Data.DataColumn("DwdiFcFanSize", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDwdiFcFanSize)
                Me.columnDwdiDcMotorHpMax = New Global.System.Data.DataColumn("DwdiDcMotorHpMax", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDwdiDcMotorHpMax)
                Me.columnSwsiPlenumFanSize = New Global.System.Data.DataColumn("SwsiPlenumFanSize", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSwsiPlenumFanSize)
                Me.columnSwsiPlenumFanHpMax = New Global.System.Data.DataColumn("SwsiPlenumFanHpMax", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSwsiPlenumFanHpMax)
                Me.columnAirBlenderArea = New Global.System.Data.DataColumn("AirBlenderArea", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAirBlenderArea)
                Me.columnSoundAttenuatorArea = New Global.System.Data.DataColumn("SoundAttenuatorArea", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSoundAttenuatorArea)
                Me.columnDischargeOpeningArea = New Global.System.Data.DataColumn("DischargeOpeningArea", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDischargeOpeningArea)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewCoilsRow() As CoilsRow
                Return CType(Me.NewRow,CoilsRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New CoilsRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(CoilsRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.CoilsRowChangedEvent) Is Nothing) Then
                    RaiseEvent CoilsRowChanged(Me, New CoilsRowChangeEvent(CType(e.Row,CoilsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.CoilsRowChangingEvent) Is Nothing) Then
                    RaiseEvent CoilsRowChanging(Me, New CoilsRowChangeEvent(CType(e.Row,CoilsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.CoilsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent CoilsRowDeleted(Me, New CoilsRowChangeEvent(CType(e.Row,CoilsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.CoilsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent CoilsRowDeleting(Me, New CoilsRowChangeEvent(CType(e.Row,CoilsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveCoilsRow(ByVal row As CoilsRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As AirHandlerReferenceData = New AirHandlerReferenceData()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "CoilsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class SectionDimensionsDataTable
            Inherits Global.System.Data.TypedTableBase(Of SectionDimensionsRow)
            
            Private columnID As Global.System.Data.DataColumn
            
            Private columnModel As Global.System.Data.DataColumn
            
            Private columnH As Global.System.Data.DataColumn
            
            Private columnW As Global.System.Data.DataColumn
            
            Private columnMB1 As Global.System.Data.DataColumn
            
            Private columnRH As Global.System.Data.DataColumn
            
            Private columnRW As Global.System.Data.DataColumn
            
            Private columnBLD1 As Global.System.Data.DataColumn
            
            Private columnFF1 As Global.System.Data.DataColumn
            
            Private columnFF2 As Global.System.Data.DataColumn
            
            Private columnFF3 As Global.System.Data.DataColumn
            
            Private columnPF1 As Global.System.Data.DataColumn
            
            Private columnHF1 As Global.System.Data.DataColumn
            
            Private columnHF2 As Global.System.Data.DataColumn
            
            Private columnC1 As Global.System.Data.DataColumn
            
            Private columnC2 As Global.System.Data.DataColumn
            
            Private columnC3 As Global.System.Data.DataColumn
            
            Private columnC4 As Global.System.Data.DataColumn
            
            Private columnATT As Global.System.Data.DataColumn
            
            Private columnSS As Global.System.Data.DataColumn
            
            Private columnD1 As Global.System.Data.DataColumn
            
            Private columnD2 As Global.System.Data.DataColumn
            
            Private columnDH As Global.System.Data.DataColumn
            
            Private columnDW As Global.System.Data.DataColumn
            
            Private columnUS1 As Global.System.Data.DataColumn
            
            Private columnC5 As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "SectionDimensions"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ModelColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModel
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property HColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnH
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property WColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnW
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property MB1Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMB1
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property RHColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRH
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property RWColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRW
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property BLD1Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnBLD1
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FF1Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFF1
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FF2Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFF2
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FF3Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFF3
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property PF1Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPF1
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property HF1Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnHF1
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property HF2Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnHF2
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property C1Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnC1
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property C2Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnC2
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property C3Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnC3
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property C4Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnC4
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ATTColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnATT
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SSColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSS
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property D1Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnD1
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property D2Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnD2
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property DHColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDH
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property DWColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDW
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property US1Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUS1
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property C5Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnC5
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As SectionDimensionsRow
                Get
                    Return CType(Me.Rows(index),SectionDimensionsRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event SectionDimensionsRowChanging As SectionDimensionsRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event SectionDimensionsRowChanged As SectionDimensionsRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event SectionDimensionsRowDeleting As SectionDimensionsRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event SectionDimensionsRowDeleted As SectionDimensionsRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddSectionDimensionsRow(ByVal row As SectionDimensionsRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddSectionDimensionsRow( _
                        ByVal Model As String,  _
                        ByVal H As Double,  _
                        ByVal W As Double,  _
                        ByVal MB1 As Double,  _
                        ByVal RH As Double,  _
                        ByVal RW As Double,  _
                        ByVal BLD1 As Double,  _
                        ByVal FF1 As Double,  _
                        ByVal FF2 As Double,  _
                        ByVal FF3 As Double,  _
                        ByVal PF1 As Double,  _
                        ByVal HF1 As Double,  _
                        ByVal HF2 As Double,  _
                        ByVal C1 As Double,  _
                        ByVal C2 As Double,  _
                        ByVal C3 As Double,  _
                        ByVal C4 As Double,  _
                        ByVal ATT As Double,  _
                        ByVal SS As Double,  _
                        ByVal D1 As Double,  _
                        ByVal D2 As Double,  _
                        ByVal DH As Double,  _
                        ByVal DW As Double,  _
                        ByVal US1 As Double,  _
                        ByVal C5 As Double) As SectionDimensionsRow
                Dim rowSectionDimensionsRow As SectionDimensionsRow = CType(Me.NewRow,SectionDimensionsRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, Model, H, W, MB1, RH, RW, BLD1, FF1, FF2, FF3, PF1, HF1, HF2, C1, C2, C3, C4, ATT, SS, D1, D2, DH, DW, US1, C5}
                rowSectionDimensionsRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowSectionDimensionsRow)
                Return rowSectionDimensionsRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByID(ByVal ID As Integer) As SectionDimensionsRow
                Return CType(Me.Rows.Find(New Object() {ID}),SectionDimensionsRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As SectionDimensionsDataTable = CType(MyBase.Clone,SectionDimensionsDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New SectionDimensionsDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnID = MyBase.Columns("ID")
                Me.columnModel = MyBase.Columns("Model")
                Me.columnH = MyBase.Columns("H")
                Me.columnW = MyBase.Columns("W")
                Me.columnMB1 = MyBase.Columns("MB1")
                Me.columnRH = MyBase.Columns("RH")
                Me.columnRW = MyBase.Columns("RW")
                Me.columnBLD1 = MyBase.Columns("BLD1")
                Me.columnFF1 = MyBase.Columns("FF1")
                Me.columnFF2 = MyBase.Columns("FF2")
                Me.columnFF3 = MyBase.Columns("FF3")
                Me.columnPF1 = MyBase.Columns("PF1")
                Me.columnHF1 = MyBase.Columns("HF1")
                Me.columnHF2 = MyBase.Columns("HF2")
                Me.columnC1 = MyBase.Columns("C1")
                Me.columnC2 = MyBase.Columns("C2")
                Me.columnC3 = MyBase.Columns("C3")
                Me.columnC4 = MyBase.Columns("C4")
                Me.columnATT = MyBase.Columns("ATT")
                Me.columnSS = MyBase.Columns("SS")
                Me.columnD1 = MyBase.Columns("D1")
                Me.columnD2 = MyBase.Columns("D2")
                Me.columnDH = MyBase.Columns("DH")
                Me.columnDW = MyBase.Columns("DW")
                Me.columnUS1 = MyBase.Columns("US1")
                Me.columnC5 = MyBase.Columns("C5")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnID)
                Me.columnModel = New Global.System.Data.DataColumn("Model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModel)
                Me.columnH = New Global.System.Data.DataColumn("H", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnH)
                Me.columnW = New Global.System.Data.DataColumn("W", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnW)
                Me.columnMB1 = New Global.System.Data.DataColumn("MB1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMB1)
                Me.columnRH = New Global.System.Data.DataColumn("RH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRH)
                Me.columnRW = New Global.System.Data.DataColumn("RW", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRW)
                Me.columnBLD1 = New Global.System.Data.DataColumn("BLD1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnBLD1)
                Me.columnFF1 = New Global.System.Data.DataColumn("FF1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFF1)
                Me.columnFF2 = New Global.System.Data.DataColumn("FF2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFF2)
                Me.columnFF3 = New Global.System.Data.DataColumn("FF3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFF3)
                Me.columnPF1 = New Global.System.Data.DataColumn("PF1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPF1)
                Me.columnHF1 = New Global.System.Data.DataColumn("HF1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnHF1)
                Me.columnHF2 = New Global.System.Data.DataColumn("HF2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnHF2)
                Me.columnC1 = New Global.System.Data.DataColumn("C1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnC1)
                Me.columnC2 = New Global.System.Data.DataColumn("C2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnC2)
                Me.columnC3 = New Global.System.Data.DataColumn("C3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnC3)
                Me.columnC4 = New Global.System.Data.DataColumn("C4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnC4)
                Me.columnATT = New Global.System.Data.DataColumn("ATT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnATT)
                Me.columnSS = New Global.System.Data.DataColumn("SS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSS)
                Me.columnD1 = New Global.System.Data.DataColumn("D1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnD1)
                Me.columnD2 = New Global.System.Data.DataColumn("D2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnD2)
                Me.columnDH = New Global.System.Data.DataColumn("DH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDH)
                Me.columnDW = New Global.System.Data.DataColumn("DW", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDW)
                Me.columnUS1 = New Global.System.Data.DataColumn("US1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUS1)
                Me.columnC5 = New Global.System.Data.DataColumn("C5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnC5)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("AirHandlerDataKey9", New Global.System.Data.DataColumn() {Me.columnID}, true))
                Me.columnID.AutoIncrement = true
                Me.columnID.AllowDBNull = false
                Me.columnID.Unique = true
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewSectionDimensionsRow() As SectionDimensionsRow
                Return CType(Me.NewRow,SectionDimensionsRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New SectionDimensionsRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(SectionDimensionsRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.SectionDimensionsRowChangedEvent) Is Nothing) Then
                    RaiseEvent SectionDimensionsRowChanged(Me, New SectionDimensionsRowChangeEvent(CType(e.Row,SectionDimensionsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.SectionDimensionsRowChangingEvent) Is Nothing) Then
                    RaiseEvent SectionDimensionsRowChanging(Me, New SectionDimensionsRowChangeEvent(CType(e.Row,SectionDimensionsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.SectionDimensionsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent SectionDimensionsRowDeleted(Me, New SectionDimensionsRowChangeEvent(CType(e.Row,SectionDimensionsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.SectionDimensionsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent SectionDimensionsRowDeleting(Me, New SectionDimensionsRowChangeEvent(CType(e.Row,SectionDimensionsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveSectionDimensionsRow(ByVal row As SectionDimensionsRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As AirHandlerReferenceData = New AirHandlerReferenceData()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "SectionDimensionsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class HoursRow
            Inherits Global.System.Data.DataRow
            
            Private tableHours As HoursDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableHours = CType(Me.Table,HoursDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ID() As Integer
                Get
                    Return CType(Me(Me.tableHours.IDColumn),Integer)
                End Get
                Set
                    Me(Me.tableHours.IDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Model() As String
                Get
                    Try 
                        Return CType(Me(Me.tableHours.ModelColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Model' in table 'Hours' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableHours.ModelColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FAHoursPerWallPanel() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableHours.FAHoursPerWallPanelColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FAHoursPerWallPanel' in table 'Hours' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableHours.FAHoursPerWallPanelColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FAHoursPerRoofPanel() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableHours.FAHoursPerRoofPanelColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FAHoursPerRoofPanel' in table 'Hours' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableHours.FAHoursPerRoofPanelColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FAHoursPerFloorPanel() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableHours.FAHoursPerFloorPanelColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FAHoursPerFloorPanel' in table 'Hours' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableHours.FAHoursPerFloorPanelColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FAHoursPerDoor() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableHours.FAHoursPerDoorColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FAHoursPerDoor' in table 'Hours' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableHours.FAHoursPerDoorColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FAHoursPerAirSeal() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableHours.FAHoursPerAirSealColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FAHoursPerAirSeal' in table 'Hours' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableHours.FAHoursPerAirSealColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property OtherHoursPerWallPanel() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableHours.OtherHoursPerWallPanelColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'OtherHoursPerWallPanel' in table 'Hours' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableHours.OtherHoursPerWallPanelColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property OtherHoursPerRoofPanel() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableHours.OtherHoursPerRoofPanelColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'OtherHoursPerRoofPanel' in table 'Hours' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableHours.OtherHoursPerRoofPanelColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property OtherHoursPerFloorPanel() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableHours.OtherHoursPerFloorPanelColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'OtherHoursPerFloorPanel' in table 'Hours' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableHours.OtherHoursPerFloorPanelColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property OtherHoursPerDoor() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableHours.OtherHoursPerDoorColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'OtherHoursPerDoor' in table 'Hours' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableHours.OtherHoursPerDoorColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property OtherHoursPerAirSeal() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableHours.OtherHoursPerAirSealColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'OtherHoursPerAirSeal' in table 'Hours' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableHours.OtherHoursPerAirSealColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property SMBaseHeight() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableHours.SMBaseHeightColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SMBaseHeight' in table 'Hours' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableHours.SMBaseHeightColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property SBBaseHeight() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableHours.SBBaseHeightColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SBBaseHeight' in table 'Hours' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableHours.SBBaseHeightColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property UniversalFrameAndClips() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableHours.UniversalFrameAndClipsColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'UniversalFrameAndClips' in table 'Hours' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableHours.UniversalFrameAndClipsColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FAHoodHours() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableHours.FAHoodHoursColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FAHoodHours' in table 'Hours' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableHours.FAHoodHoursColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property OtherHoodHours() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableHours.OtherHoodHoursColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'OtherHoodHours' in table 'Hours' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableHours.OtherHoodHoursColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsModelNull() As Boolean
                Return Me.IsNull(Me.tableHours.ModelColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetModelNull()
                Me(Me.tableHours.ModelColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFAHoursPerWallPanelNull() As Boolean
                Return Me.IsNull(Me.tableHours.FAHoursPerWallPanelColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFAHoursPerWallPanelNull()
                Me(Me.tableHours.FAHoursPerWallPanelColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFAHoursPerRoofPanelNull() As Boolean
                Return Me.IsNull(Me.tableHours.FAHoursPerRoofPanelColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFAHoursPerRoofPanelNull()
                Me(Me.tableHours.FAHoursPerRoofPanelColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFAHoursPerFloorPanelNull() As Boolean
                Return Me.IsNull(Me.tableHours.FAHoursPerFloorPanelColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFAHoursPerFloorPanelNull()
                Me(Me.tableHours.FAHoursPerFloorPanelColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFAHoursPerDoorNull() As Boolean
                Return Me.IsNull(Me.tableHours.FAHoursPerDoorColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFAHoursPerDoorNull()
                Me(Me.tableHours.FAHoursPerDoorColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFAHoursPerAirSealNull() As Boolean
                Return Me.IsNull(Me.tableHours.FAHoursPerAirSealColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFAHoursPerAirSealNull()
                Me(Me.tableHours.FAHoursPerAirSealColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsOtherHoursPerWallPanelNull() As Boolean
                Return Me.IsNull(Me.tableHours.OtherHoursPerWallPanelColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetOtherHoursPerWallPanelNull()
                Me(Me.tableHours.OtherHoursPerWallPanelColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsOtherHoursPerRoofPanelNull() As Boolean
                Return Me.IsNull(Me.tableHours.OtherHoursPerRoofPanelColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetOtherHoursPerRoofPanelNull()
                Me(Me.tableHours.OtherHoursPerRoofPanelColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsOtherHoursPerFloorPanelNull() As Boolean
                Return Me.IsNull(Me.tableHours.OtherHoursPerFloorPanelColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetOtherHoursPerFloorPanelNull()
                Me(Me.tableHours.OtherHoursPerFloorPanelColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsOtherHoursPerDoorNull() As Boolean
                Return Me.IsNull(Me.tableHours.OtherHoursPerDoorColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetOtherHoursPerDoorNull()
                Me(Me.tableHours.OtherHoursPerDoorColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsOtherHoursPerAirSealNull() As Boolean
                Return Me.IsNull(Me.tableHours.OtherHoursPerAirSealColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetOtherHoursPerAirSealNull()
                Me(Me.tableHours.OtherHoursPerAirSealColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsSMBaseHeightNull() As Boolean
                Return Me.IsNull(Me.tableHours.SMBaseHeightColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetSMBaseHeightNull()
                Me(Me.tableHours.SMBaseHeightColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsSBBaseHeightNull() As Boolean
                Return Me.IsNull(Me.tableHours.SBBaseHeightColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetSBBaseHeightNull()
                Me(Me.tableHours.SBBaseHeightColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsUniversalFrameAndClipsNull() As Boolean
                Return Me.IsNull(Me.tableHours.UniversalFrameAndClipsColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetUniversalFrameAndClipsNull()
                Me(Me.tableHours.UniversalFrameAndClipsColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFAHoodHoursNull() As Boolean
                Return Me.IsNull(Me.tableHours.FAHoodHoursColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFAHoodHoursNull()
                Me(Me.tableHours.FAHoodHoursColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsOtherHoodHoursNull() As Boolean
                Return Me.IsNull(Me.tableHours.OtherHoodHoursColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetOtherHoodHoursNull()
                Me(Me.tableHours.OtherHoodHoursColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class MotorsRow
            Inherits Global.System.Data.DataRow
            
            Private tableMotors As MotorsDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableMotors = CType(Me.Table,MotorsDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ID() As Integer
                Get
                    Return CType(Me(Me.tableMotors.IDColumn),Integer)
                End Get
                Set
                    Me(Me.tableMotors.IDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Enclosure() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMotors.EnclosureColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Enclosure' in table 'Motors' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMotors.EnclosureColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Efficiency() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMotors.EfficiencyColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Efficiency' in table 'Motors' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMotors.EfficiencyColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property HP() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMotors.HPColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'HP' in table 'Motors' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMotors.HPColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property RPM() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableMotors.RPMColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'RPM' in table 'Motors' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMotors.RPMColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property NEMAFrame() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMotors.NEMAFrameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'NEMAFrame' in table 'Motors' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMotors.NEMAFrameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Manufacturer() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMotors.ManufacturerColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Manufacturer' in table 'Motors' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMotors.ManufacturerColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CatalogNum() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMotors.CatalogNumColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CatalogNum' in table 'Motors' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMotors.CatalogNumColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ListCost() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableMotors.ListCostColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ListCost' in table 'Motors' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMotors.ListCostColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CDim() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableMotors.CDimColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CDim' in table 'Motors' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMotors.CDimColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ShipWeight() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableMotors.ShipWeightColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ShipWeight' in table 'Motors' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMotors.ShipWeightColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FullLoadEfficiency() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableMotors.FullLoadEfficiencyColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FullLoadEfficiency' in table 'Motors' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMotors.FullLoadEfficiencyColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Hertz() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableMotors.HertzColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Hertz' in table 'Motors' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMotors.HertzColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property VoltageCode() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMotors.VoltageCodeColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'VoltageCode' in table 'Motors' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMotors.VoltageCodeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FLA() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableMotors.FLAColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FLA' in table 'Motors' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMotors.FLAColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property VFDCompatible() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMotors.VFDCompatibleColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'VFDCompatible' in table 'Motors' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMotors.VFDCompatibleColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property LaborHours() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableMotors.LaborHoursColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LaborHours' in table 'Motors' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMotors.LaborHoursColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsEnclosureNull() As Boolean
                Return Me.IsNull(Me.tableMotors.EnclosureColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetEnclosureNull()
                Me(Me.tableMotors.EnclosureColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsEfficiencyNull() As Boolean
                Return Me.IsNull(Me.tableMotors.EfficiencyColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetEfficiencyNull()
                Me(Me.tableMotors.EfficiencyColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsHPNull() As Boolean
                Return Me.IsNull(Me.tableMotors.HPColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetHPNull()
                Me(Me.tableMotors.HPColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsRPMNull() As Boolean
                Return Me.IsNull(Me.tableMotors.RPMColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetRPMNull()
                Me(Me.tableMotors.RPMColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsNEMAFrameNull() As Boolean
                Return Me.IsNull(Me.tableMotors.NEMAFrameColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetNEMAFrameNull()
                Me(Me.tableMotors.NEMAFrameColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsManufacturerNull() As Boolean
                Return Me.IsNull(Me.tableMotors.ManufacturerColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetManufacturerNull()
                Me(Me.tableMotors.ManufacturerColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCatalogNumNull() As Boolean
                Return Me.IsNull(Me.tableMotors.CatalogNumColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCatalogNumNull()
                Me(Me.tableMotors.CatalogNumColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsListCostNull() As Boolean
                Return Me.IsNull(Me.tableMotors.ListCostColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetListCostNull()
                Me(Me.tableMotors.ListCostColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCDimNull() As Boolean
                Return Me.IsNull(Me.tableMotors.CDimColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCDimNull()
                Me(Me.tableMotors.CDimColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsShipWeightNull() As Boolean
                Return Me.IsNull(Me.tableMotors.ShipWeightColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetShipWeightNull()
                Me(Me.tableMotors.ShipWeightColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFullLoadEfficiencyNull() As Boolean
                Return Me.IsNull(Me.tableMotors.FullLoadEfficiencyColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFullLoadEfficiencyNull()
                Me(Me.tableMotors.FullLoadEfficiencyColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsHertzNull() As Boolean
                Return Me.IsNull(Me.tableMotors.HertzColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetHertzNull()
                Me(Me.tableMotors.HertzColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsVoltageCodeNull() As Boolean
                Return Me.IsNull(Me.tableMotors.VoltageCodeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetVoltageCodeNull()
                Me(Me.tableMotors.VoltageCodeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFLANull() As Boolean
                Return Me.IsNull(Me.tableMotors.FLAColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFLANull()
                Me(Me.tableMotors.FLAColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsVFDCompatibleNull() As Boolean
                Return Me.IsNull(Me.tableMotors.VFDCompatibleColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetVFDCompatibleNull()
                Me(Me.tableMotors.VFDCompatibleColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsLaborHoursNull() As Boolean
                Return Me.IsNull(Me.tableMotors.LaborHoursColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetLaborHoursNull()
                Me(Me.tableMotors.LaborHoursColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class BidiFansRow
            Inherits Global.System.Data.DataRow
            
            Private tableBidiFans As BidiFansDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableBidiFans = CType(Me.Table,BidiFansDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ID() As Integer
                Get
                    Return CType(Me(Me.tableBidiFans.IDColumn),Integer)
                End Get
                Set
                    Me(Me.tableBidiFans.IDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Model() As String
                Get
                    Try 
                        Return CType(Me(Me.tableBidiFans.ModelColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Model' in table 'BidiFans' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBidiFans.ModelColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Size() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableBidiFans.SizeColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Size' in table 'BidiFans' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBidiFans.SizeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Cost() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableBidiFans.CostColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Cost' in table 'BidiFans' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBidiFans.CostColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property PlatformCost1() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableBidiFans.PlatformCost1Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'PlatformCost1' in table 'BidiFans' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBidiFans.PlatformCost1Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property PlatformCost2() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableBidiFans.PlatformCost2Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'PlatformCost2' in table 'BidiFans' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBidiFans.PlatformCost2Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Weight() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableBidiFans.WeightColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Weight' in table 'BidiFans' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBidiFans.WeightColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property LaborHours() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableBidiFans.LaborHoursColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LaborHours' in table 'BidiFans' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableBidiFans.LaborHoursColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsModelNull() As Boolean
                Return Me.IsNull(Me.tableBidiFans.ModelColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetModelNull()
                Me(Me.tableBidiFans.ModelColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsSizeNull() As Boolean
                Return Me.IsNull(Me.tableBidiFans.SizeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetSizeNull()
                Me(Me.tableBidiFans.SizeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCostNull() As Boolean
                Return Me.IsNull(Me.tableBidiFans.CostColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCostNull()
                Me(Me.tableBidiFans.CostColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsPlatformCost1Null() As Boolean
                Return Me.IsNull(Me.tableBidiFans.PlatformCost1Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetPlatformCost1Null()
                Me(Me.tableBidiFans.PlatformCost1Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsPlatformCost2Null() As Boolean
                Return Me.IsNull(Me.tableBidiFans.PlatformCost2Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetPlatformCost2Null()
                Me(Me.tableBidiFans.PlatformCost2Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsWeightNull() As Boolean
                Return Me.IsNull(Me.tableBidiFans.WeightColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetWeightNull()
                Me(Me.tableBidiFans.WeightColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsLaborHoursNull() As Boolean
                Return Me.IsNull(Me.tableBidiFans.LaborHoursColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetLaborHoursNull()
                Me(Me.tableBidiFans.LaborHoursColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class DuctHeatersRow
            Inherits Global.System.Data.DataRow
            
            Private tableDuctHeaters As DuctHeatersDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableDuctHeaters = CType(Me.Table,DuctHeatersDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ID() As Integer
                Get
                    Return CType(Me(Me.tableDuctHeaters.IDColumn),Integer)
                End Get
                Set
                    Me(Me.tableDuctHeaters.IDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Volts() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableDuctHeaters.VoltsColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Volts' in table 'DuctHeaters' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDuctHeaters.VoltsColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property KwMin() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableDuctHeaters.KwMinColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'KwMin' in table 'DuctHeaters' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDuctHeaters.KwMinColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property KwMax() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableDuctHeaters.KwMaxColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'KwMax' in table 'DuctHeaters' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDuctHeaters.KwMaxColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Stage() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableDuctHeaters.StageColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Stage' in table 'DuctHeaters' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDuctHeaters.StageColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property BaseCost() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableDuctHeaters.BaseCostColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'BaseCost' in table 'DuctHeaters' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDuctHeaters.BaseCostColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ExtraStageCost() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableDuctHeaters.ExtraStageCostColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ExtraStageCost' in table 'DuctHeaters' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDuctHeaters.ExtraStageCostColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property DisconnectSwitchCost() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableDuctHeaters.DisconnectSwitchCostColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'DisconnectSwitchCost' in table 'DuctHeaters' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDuctHeaters.DisconnectSwitchCostColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FusingCostMin() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableDuctHeaters.FusingCostMinColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FusingCostMin' in table 'DuctHeaters' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDuctHeaters.FusingCostMinColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ScrCost() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableDuctHeaters.ScrCostColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ScrCost' in table 'DuctHeaters' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDuctHeaters.ScrCostColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property LaborHours() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableDuctHeaters.LaborHoursColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LaborHours' in table 'DuctHeaters' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDuctHeaters.LaborHoursColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsVoltsNull() As Boolean
                Return Me.IsNull(Me.tableDuctHeaters.VoltsColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetVoltsNull()
                Me(Me.tableDuctHeaters.VoltsColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsKwMinNull() As Boolean
                Return Me.IsNull(Me.tableDuctHeaters.KwMinColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetKwMinNull()
                Me(Me.tableDuctHeaters.KwMinColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsKwMaxNull() As Boolean
                Return Me.IsNull(Me.tableDuctHeaters.KwMaxColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetKwMaxNull()
                Me(Me.tableDuctHeaters.KwMaxColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsStageNull() As Boolean
                Return Me.IsNull(Me.tableDuctHeaters.StageColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetStageNull()
                Me(Me.tableDuctHeaters.StageColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsBaseCostNull() As Boolean
                Return Me.IsNull(Me.tableDuctHeaters.BaseCostColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetBaseCostNull()
                Me(Me.tableDuctHeaters.BaseCostColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsExtraStageCostNull() As Boolean
                Return Me.IsNull(Me.tableDuctHeaters.ExtraStageCostColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetExtraStageCostNull()
                Me(Me.tableDuctHeaters.ExtraStageCostColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsDisconnectSwitchCostNull() As Boolean
                Return Me.IsNull(Me.tableDuctHeaters.DisconnectSwitchCostColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetDisconnectSwitchCostNull()
                Me(Me.tableDuctHeaters.DisconnectSwitchCostColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFusingCostMinNull() As Boolean
                Return Me.IsNull(Me.tableDuctHeaters.FusingCostMinColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFusingCostMinNull()
                Me(Me.tableDuctHeaters.FusingCostMinColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsScrCostNull() As Boolean
                Return Me.IsNull(Me.tableDuctHeaters.ScrCostColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetScrCostNull()
                Me(Me.tableDuctHeaters.ScrCostColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsLaborHoursNull() As Boolean
                Return Me.IsNull(Me.tableDuctHeaters.LaborHoursColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetLaborHoursNull()
                Me(Me.tableDuctHeaters.LaborHoursColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class CoilPricesRow
            Inherits Global.System.Data.DataRow
            
            Private tableCoilPrices As CoilPricesDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableCoilPrices = CType(Me.Table,CoilPricesDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ID() As Integer
                Get
                    Return CType(Me(Me.tableCoilPrices.IDColumn),Integer)
                End Get
                Set
                    Me(Me.tableCoilPrices.IDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Model() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCoilPrices.ModelColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Model' in table 'CoilPrices' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoilPrices.ModelColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property NumRows() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableCoilPrices.NumRowsColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'NumRows' in table 'CoilPrices' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoilPrices.NumRowsColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Cost() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoilPrices.CostColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Cost' in table 'CoilPrices' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoilPrices.CostColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FAHours() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoilPrices.FAHoursColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FAHours' in table 'CoilPrices' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoilPrices.FAHoursColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property OtherHours() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoilPrices.OtherHoursColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'OtherHours' in table 'CoilPrices' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoilPrices.OtherHoursColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsModelNull() As Boolean
                Return Me.IsNull(Me.tableCoilPrices.ModelColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetModelNull()
                Me(Me.tableCoilPrices.ModelColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsNumRowsNull() As Boolean
                Return Me.IsNull(Me.tableCoilPrices.NumRowsColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetNumRowsNull()
                Me(Me.tableCoilPrices.NumRowsColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCostNull() As Boolean
                Return Me.IsNull(Me.tableCoilPrices.CostColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCostNull()
                Me(Me.tableCoilPrices.CostColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFAHoursNull() As Boolean
                Return Me.IsNull(Me.tableCoilPrices.FAHoursColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFAHoursNull()
                Me(Me.tableCoilPrices.FAHoursColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsOtherHoursNull() As Boolean
                Return Me.IsNull(Me.tableCoilPrices.OtherHoursColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetOtherHoursNull()
                Me(Me.tableCoilPrices.OtherHoursColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class ForwardCurvedFansRow
            Inherits Global.System.Data.DataRow
            
            Private tableForwardCurvedFans As ForwardCurvedFansDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableForwardCurvedFans = CType(Me.Table,ForwardCurvedFansDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ID() As Integer
                Get
                    Return CType(Me(Me.tableForwardCurvedFans.IDColumn),Integer)
                End Get
                Set
                    Me(Me.tableForwardCurvedFans.IDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Model() As String
                Get
                    Try 
                        Return CType(Me(Me.tableForwardCurvedFans.ModelColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Model' in table 'ForwardCurvedFans' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForwardCurvedFans.ModelColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Size() As String
                Get
                    Try 
                        Return CType(Me(Me.tableForwardCurvedFans.SizeColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Size' in table 'ForwardCurvedFans' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForwardCurvedFans.SizeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ShaftDiameter() As String
                Get
                    Try 
                        Return CType(Me(Me.tableForwardCurvedFans.ShaftDiameterColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ShaftDiameter' in table 'ForwardCurvedFans' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForwardCurvedFans.ShaftDiameterColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property MaxRPM() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableForwardCurvedFans.MaxRPMColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'MaxRPM' in table 'ForwardCurvedFans' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForwardCurvedFans.MaxRPMColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property HP() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableForwardCurvedFans.HPColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'HP' in table 'ForwardCurvedFans' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForwardCurvedFans.HPColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property BlowerPullyPitchDiameterMin() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableForwardCurvedFans.BlowerPullyPitchDiameterMinColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'BlowerPullyPitchDiameterMin' in table 'ForwardCurvedFans' i"& _ 
                                "s DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForwardCurvedFans.BlowerPullyPitchDiameterMinColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property MotorPlatform1() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableForwardCurvedFans.MotorPlatform1Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'MotorPlatform1' in table 'ForwardCurvedFans' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForwardCurvedFans.MotorPlatform1Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property MotorPlatform2() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableForwardCurvedFans.MotorPlatform2Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'MotorPlatform2' in table 'ForwardCurvedFans' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForwardCurvedFans.MotorPlatform2Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property DelhiPartNum() As String
                Get
                    Try 
                        Return CType(Me(Me.tableForwardCurvedFans.DelhiPartNumColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'DelhiPartNum' in table 'ForwardCurvedFans' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForwardCurvedFans.DelhiPartNumColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Cost() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableForwardCurvedFans.CostColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Cost' in table 'ForwardCurvedFans' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForwardCurvedFans.CostColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Weight() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableForwardCurvedFans.WeightColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Weight' in table 'ForwardCurvedFans' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForwardCurvedFans.WeightColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property LaborHours() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableForwardCurvedFans.LaborHoursColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LaborHours' in table 'ForwardCurvedFans' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForwardCurvedFans.LaborHoursColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsModelNull() As Boolean
                Return Me.IsNull(Me.tableForwardCurvedFans.ModelColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetModelNull()
                Me(Me.tableForwardCurvedFans.ModelColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsSizeNull() As Boolean
                Return Me.IsNull(Me.tableForwardCurvedFans.SizeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetSizeNull()
                Me(Me.tableForwardCurvedFans.SizeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsShaftDiameterNull() As Boolean
                Return Me.IsNull(Me.tableForwardCurvedFans.ShaftDiameterColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetShaftDiameterNull()
                Me(Me.tableForwardCurvedFans.ShaftDiameterColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsMaxRPMNull() As Boolean
                Return Me.IsNull(Me.tableForwardCurvedFans.MaxRPMColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetMaxRPMNull()
                Me(Me.tableForwardCurvedFans.MaxRPMColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsHPNull() As Boolean
                Return Me.IsNull(Me.tableForwardCurvedFans.HPColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetHPNull()
                Me(Me.tableForwardCurvedFans.HPColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsBlowerPullyPitchDiameterMinNull() As Boolean
                Return Me.IsNull(Me.tableForwardCurvedFans.BlowerPullyPitchDiameterMinColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetBlowerPullyPitchDiameterMinNull()
                Me(Me.tableForwardCurvedFans.BlowerPullyPitchDiameterMinColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsMotorPlatform1Null() As Boolean
                Return Me.IsNull(Me.tableForwardCurvedFans.MotorPlatform1Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetMotorPlatform1Null()
                Me(Me.tableForwardCurvedFans.MotorPlatform1Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsMotorPlatform2Null() As Boolean
                Return Me.IsNull(Me.tableForwardCurvedFans.MotorPlatform2Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetMotorPlatform2Null()
                Me(Me.tableForwardCurvedFans.MotorPlatform2Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsDelhiPartNumNull() As Boolean
                Return Me.IsNull(Me.tableForwardCurvedFans.DelhiPartNumColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetDelhiPartNumNull()
                Me(Me.tableForwardCurvedFans.DelhiPartNumColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCostNull() As Boolean
                Return Me.IsNull(Me.tableForwardCurvedFans.CostColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCostNull()
                Me(Me.tableForwardCurvedFans.CostColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsWeightNull() As Boolean
                Return Me.IsNull(Me.tableForwardCurvedFans.WeightColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetWeightNull()
                Me(Me.tableForwardCurvedFans.WeightColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsLaborHoursNull() As Boolean
                Return Me.IsNull(Me.tableForwardCurvedFans.LaborHoursColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetLaborHoursNull()
                Me(Me.tableForwardCurvedFans.LaborHoursColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class FiltersRow
            Inherits Global.System.Data.DataRow
            
            Private tableFilters As FiltersDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableFilters = CType(Me.Table,FiltersDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ID() As Integer
                Get
                    Return CType(Me(Me.tableFilters.IDColumn),Integer)
                End Get
                Set
                    Me(Me.tableFilters.IDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FilterPartNum() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableFilters.FilterPartNumColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FilterPartNum' in table 'Filters' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFilters.FilterPartNumColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Specification() As String
                Get
                    Try 
                        Return CType(Me(Me.tableFilters.SpecificationColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Specification' in table 'Filters' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFilters.SpecificationColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ListPrice() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableFilters.ListPriceColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ListPrice' in table 'Filters' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFilters.ListPriceColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Weight() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableFilters.WeightColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Weight' in table 'Filters' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFilters.WeightColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property LaborHours() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableFilters.LaborHoursColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LaborHours' in table 'Filters' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFilters.LaborHoursColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFilterPartNumNull() As Boolean
                Return Me.IsNull(Me.tableFilters.FilterPartNumColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFilterPartNumNull()
                Me(Me.tableFilters.FilterPartNumColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsSpecificationNull() As Boolean
                Return Me.IsNull(Me.tableFilters.SpecificationColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetSpecificationNull()
                Me(Me.tableFilters.SpecificationColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsListPriceNull() As Boolean
                Return Me.IsNull(Me.tableFilters.ListPriceColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetListPriceNull()
                Me(Me.tableFilters.ListPriceColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsWeightNull() As Boolean
                Return Me.IsNull(Me.tableFilters.WeightColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetWeightNull()
                Me(Me.tableFilters.WeightColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsLaborHoursNull() As Boolean
                Return Me.IsNull(Me.tableFilters.LaborHoursColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetLaborHoursNull()
                Me(Me.tableFilters.LaborHoursColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class DampersRow
            Inherits Global.System.Data.DataRow
            
            Private tableDampers As DampersDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableDampers = CType(Me.Table,DampersDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ID() As Integer
                Get
                    Return CType(Me(Me.tableDampers.IDColumn),Integer)
                End Get
                Set
                    Me(Me.tableDampers.IDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Model() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDampers.ModelColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Model' in table 'Dampers' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDampers.ModelColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Type() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDampers.TypeColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'Dampers' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDampers.TypeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Metal() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDampers.MetalColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Metal' in table 'Dampers' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDampers.MetalColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property OAHeight() As Double
                Get
                    If Me.IsOAHeightNull Then
                        Return 0R
                    Else
                        Return CType(Me(Me.tableDampers.OAHeightColumn),Double)
                    End If
                End Get
                Set
                    Me(Me.tableDampers.OAHeightColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property OAWidth() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableDampers.OAWidthColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'OAWidth' in table 'Dampers' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDampers.OAWidthColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property RAHeight() As Double
                Get
                    If Me.IsRAHeightNull Then
                        Return 0R
                    Else
                        Return CType(Me(Me.tableDampers.RAHeightColumn),Double)
                    End If
                End Get
                Set
                    Me(Me.tableDampers.RAHeightColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property RAWidth() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableDampers.RAWidthColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'RAWidth' in table 'Dampers' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDampers.RAWidthColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Cost() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableDampers.CostColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Cost' in table 'Dampers' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDampers.CostColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property LaborHours() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableDampers.LaborHoursColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LaborHours' in table 'Dampers' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDampers.LaborHoursColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsModelNull() As Boolean
                Return Me.IsNull(Me.tableDampers.ModelColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetModelNull()
                Me(Me.tableDampers.ModelColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsTypeNull() As Boolean
                Return Me.IsNull(Me.tableDampers.TypeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetTypeNull()
                Me(Me.tableDampers.TypeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsMetalNull() As Boolean
                Return Me.IsNull(Me.tableDampers.MetalColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetMetalNull()
                Me(Me.tableDampers.MetalColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsOAHeightNull() As Boolean
                Return Me.IsNull(Me.tableDampers.OAHeightColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetOAHeightNull()
                Me(Me.tableDampers.OAHeightColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsOAWidthNull() As Boolean
                Return Me.IsNull(Me.tableDampers.OAWidthColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetOAWidthNull()
                Me(Me.tableDampers.OAWidthColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsRAHeightNull() As Boolean
                Return Me.IsNull(Me.tableDampers.RAHeightColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetRAHeightNull()
                Me(Me.tableDampers.RAHeightColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsRAWidthNull() As Boolean
                Return Me.IsNull(Me.tableDampers.RAWidthColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetRAWidthNull()
                Me(Me.tableDampers.RAWidthColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCostNull() As Boolean
                Return Me.IsNull(Me.tableDampers.CostColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCostNull()
                Me(Me.tableDampers.CostColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsLaborHoursNull() As Boolean
                Return Me.IsNull(Me.tableDampers.LaborHoursColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetLaborHoursNull()
                Me(Me.tableDampers.LaborHoursColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class CoilsRow
            Inherits Global.System.Data.DataRow
            
            Private tableCoils As CoilsDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableCoils = CType(Me.Table,CoilsDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Model() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.ModelColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Model' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.ModelColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property AirflowMax() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.AirflowMaxColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'AirflowMax' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.AirflowMaxColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property AirflowMin() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.AirflowMinColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'AirflowMin' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.AirflowMinColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property NominalCapacityMin() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.NominalCapacityMinColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'NominalCapacityMin' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.NominalCapacityMinColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property NominalCapacityMax() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.NominalCapacityMaxColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'NominalCapacityMax' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.NominalCapacityMaxColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CabWidth() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.CabWidthColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CabWidth' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.CabWidthColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CabHeight() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.CabHeightColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CabHeight' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.CabHeightColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property MBOADamperArea() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.MBOADamperAreaColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'MBOADamperArea' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.MBOADamperAreaColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property MBOAHoodArea() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.MBOAHoodAreaColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'MBOAHoodArea' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.MBOAHoodAreaColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property MbRaDmpArea() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.MbRaDmpAreaColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'MbRaDmpArea' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.MbRaDmpAreaColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FlatFilterArea() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.FlatFilterAreaColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FlatFilterArea' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.FlatFilterAreaColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FilterHeight() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.FilterHeightColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FilterHeight' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.FilterHeightColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FilterLength() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.FilterLengthColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FilterLength' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.FilterLengthColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property NumFilters() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.NumFiltersColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'NumFilters' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.NumFiltersColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ActualCoilArea() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.ActualCoilAreaColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ActualCoilArea' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.ActualCoilAreaColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property NumCoils() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.NumCoilsColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'NumCoils' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.NumCoilsColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FinHeight() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.FinHeightColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FinHeight' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.FinHeightColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FinLength() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.FinLengthColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FinLength' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.FinLengthColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CoilArea() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.CoilAreaColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CoilArea' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.CoilAreaColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property DwdiFcFanSize() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.DwdiFcFanSizeColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'DwdiFcFanSize' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.DwdiFcFanSizeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property DwdiDcMotorHpMax() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.DwdiDcMotorHpMaxColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'DwdiDcMotorHpMax' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.DwdiDcMotorHpMaxColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property SwsiPlenumFanSize() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.SwsiPlenumFanSizeColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SwsiPlenumFanSize' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.SwsiPlenumFanSizeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property SwsiPlenumFanHpMax() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.SwsiPlenumFanHpMaxColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SwsiPlenumFanHpMax' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.SwsiPlenumFanHpMaxColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property AirBlenderArea() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.AirBlenderAreaColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'AirBlenderArea' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.AirBlenderAreaColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property SoundAttenuatorArea() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.SoundAttenuatorAreaColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SoundAttenuatorArea' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.SoundAttenuatorAreaColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property DischargeOpeningArea() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableCoils.DischargeOpeningAreaColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'DischargeOpeningArea' in table 'Coils' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCoils.DischargeOpeningAreaColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsModelNull() As Boolean
                Return Me.IsNull(Me.tableCoils.ModelColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetModelNull()
                Me(Me.tableCoils.ModelColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsAirflowMaxNull() As Boolean
                Return Me.IsNull(Me.tableCoils.AirflowMaxColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetAirflowMaxNull()
                Me(Me.tableCoils.AirflowMaxColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsAirflowMinNull() As Boolean
                Return Me.IsNull(Me.tableCoils.AirflowMinColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetAirflowMinNull()
                Me(Me.tableCoils.AirflowMinColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsNominalCapacityMinNull() As Boolean
                Return Me.IsNull(Me.tableCoils.NominalCapacityMinColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetNominalCapacityMinNull()
                Me(Me.tableCoils.NominalCapacityMinColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsNominalCapacityMaxNull() As Boolean
                Return Me.IsNull(Me.tableCoils.NominalCapacityMaxColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetNominalCapacityMaxNull()
                Me(Me.tableCoils.NominalCapacityMaxColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCabWidthNull() As Boolean
                Return Me.IsNull(Me.tableCoils.CabWidthColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCabWidthNull()
                Me(Me.tableCoils.CabWidthColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCabHeightNull() As Boolean
                Return Me.IsNull(Me.tableCoils.CabHeightColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCabHeightNull()
                Me(Me.tableCoils.CabHeightColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsMBOADamperAreaNull() As Boolean
                Return Me.IsNull(Me.tableCoils.MBOADamperAreaColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetMBOADamperAreaNull()
                Me(Me.tableCoils.MBOADamperAreaColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsMBOAHoodAreaNull() As Boolean
                Return Me.IsNull(Me.tableCoils.MBOAHoodAreaColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetMBOAHoodAreaNull()
                Me(Me.tableCoils.MBOAHoodAreaColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsMbRaDmpAreaNull() As Boolean
                Return Me.IsNull(Me.tableCoils.MbRaDmpAreaColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetMbRaDmpAreaNull()
                Me(Me.tableCoils.MbRaDmpAreaColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFlatFilterAreaNull() As Boolean
                Return Me.IsNull(Me.tableCoils.FlatFilterAreaColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFlatFilterAreaNull()
                Me(Me.tableCoils.FlatFilterAreaColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFilterHeightNull() As Boolean
                Return Me.IsNull(Me.tableCoils.FilterHeightColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFilterHeightNull()
                Me(Me.tableCoils.FilterHeightColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFilterLengthNull() As Boolean
                Return Me.IsNull(Me.tableCoils.FilterLengthColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFilterLengthNull()
                Me(Me.tableCoils.FilterLengthColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsNumFiltersNull() As Boolean
                Return Me.IsNull(Me.tableCoils.NumFiltersColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetNumFiltersNull()
                Me(Me.tableCoils.NumFiltersColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsActualCoilAreaNull() As Boolean
                Return Me.IsNull(Me.tableCoils.ActualCoilAreaColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetActualCoilAreaNull()
                Me(Me.tableCoils.ActualCoilAreaColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsNumCoilsNull() As Boolean
                Return Me.IsNull(Me.tableCoils.NumCoilsColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetNumCoilsNull()
                Me(Me.tableCoils.NumCoilsColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFinHeightNull() As Boolean
                Return Me.IsNull(Me.tableCoils.FinHeightColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFinHeightNull()
                Me(Me.tableCoils.FinHeightColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFinLengthNull() As Boolean
                Return Me.IsNull(Me.tableCoils.FinLengthColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFinLengthNull()
                Me(Me.tableCoils.FinLengthColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCoilAreaNull() As Boolean
                Return Me.IsNull(Me.tableCoils.CoilAreaColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCoilAreaNull()
                Me(Me.tableCoils.CoilAreaColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsDwdiFcFanSizeNull() As Boolean
                Return Me.IsNull(Me.tableCoils.DwdiFcFanSizeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetDwdiFcFanSizeNull()
                Me(Me.tableCoils.DwdiFcFanSizeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsDwdiDcMotorHpMaxNull() As Boolean
                Return Me.IsNull(Me.tableCoils.DwdiDcMotorHpMaxColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetDwdiDcMotorHpMaxNull()
                Me(Me.tableCoils.DwdiDcMotorHpMaxColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsSwsiPlenumFanSizeNull() As Boolean
                Return Me.IsNull(Me.tableCoils.SwsiPlenumFanSizeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetSwsiPlenumFanSizeNull()
                Me(Me.tableCoils.SwsiPlenumFanSizeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsSwsiPlenumFanHpMaxNull() As Boolean
                Return Me.IsNull(Me.tableCoils.SwsiPlenumFanHpMaxColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetSwsiPlenumFanHpMaxNull()
                Me(Me.tableCoils.SwsiPlenumFanHpMaxColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsAirBlenderAreaNull() As Boolean
                Return Me.IsNull(Me.tableCoils.AirBlenderAreaColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetAirBlenderAreaNull()
                Me(Me.tableCoils.AirBlenderAreaColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsSoundAttenuatorAreaNull() As Boolean
                Return Me.IsNull(Me.tableCoils.SoundAttenuatorAreaColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetSoundAttenuatorAreaNull()
                Me(Me.tableCoils.SoundAttenuatorAreaColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsDischargeOpeningAreaNull() As Boolean
                Return Me.IsNull(Me.tableCoils.DischargeOpeningAreaColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetDischargeOpeningAreaNull()
                Me(Me.tableCoils.DischargeOpeningAreaColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class SectionDimensionsRow
            Inherits Global.System.Data.DataRow
            
            Private tableSectionDimensions As SectionDimensionsDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableSectionDimensions = CType(Me.Table,SectionDimensionsDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ID() As Integer
                Get
                    Return CType(Me(Me.tableSectionDimensions.IDColumn),Integer)
                End Get
                Set
                    Me(Me.tableSectionDimensions.IDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Model() As String
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.ModelColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Model' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.ModelColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property H() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.HColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'H' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.HColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property W() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.WColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'W' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.WColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property MB1() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.MB1Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'MB1' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.MB1Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property RH() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.RHColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'RH' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.RHColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property RW() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.RWColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'RW' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.RWColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property BLD1() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.BLD1Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'BLD1' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.BLD1Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FF1() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.FF1Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FF1' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.FF1Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FF2() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.FF2Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FF2' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.FF2Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FF3() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.FF3Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FF3' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.FF3Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property PF1() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.PF1Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'PF1' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.PF1Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property HF1() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.HF1Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'HF1' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.HF1Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property HF2() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.HF2Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'HF2' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.HF2Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property C1() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.C1Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'C1' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.C1Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property C2() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.C2Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'C2' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.C2Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property C3() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.C3Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'C3' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.C3Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property C4() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.C4Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'C4' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.C4Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ATT() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.ATTColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ATT' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.ATTColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property SS() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.SSColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SS' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.SSColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property D1() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.D1Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'D1' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.D1Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property D2() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.D2Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'D2' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.D2Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property DH() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.DHColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'DH' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.DHColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property DW() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.DWColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'DW' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.DWColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property US1() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.US1Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'US1' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.US1Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property C5() As Double
                Get
                    Try 
                        Return CType(Me(Me.tableSectionDimensions.C5Column),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'C5' in table 'SectionDimensions' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSectionDimensions.C5Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsModelNull() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.ModelColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetModelNull()
                Me(Me.tableSectionDimensions.ModelColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsHNull() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.HColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetHNull()
                Me(Me.tableSectionDimensions.HColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsWNull() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.WColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetWNull()
                Me(Me.tableSectionDimensions.WColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsMB1Null() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.MB1Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetMB1Null()
                Me(Me.tableSectionDimensions.MB1Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsRHNull() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.RHColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetRHNull()
                Me(Me.tableSectionDimensions.RHColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsRWNull() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.RWColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetRWNull()
                Me(Me.tableSectionDimensions.RWColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsBLD1Null() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.BLD1Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetBLD1Null()
                Me(Me.tableSectionDimensions.BLD1Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFF1Null() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.FF1Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFF1Null()
                Me(Me.tableSectionDimensions.FF1Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFF2Null() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.FF2Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFF2Null()
                Me(Me.tableSectionDimensions.FF2Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFF3Null() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.FF3Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFF3Null()
                Me(Me.tableSectionDimensions.FF3Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsPF1Null() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.PF1Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetPF1Null()
                Me(Me.tableSectionDimensions.PF1Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsHF1Null() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.HF1Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetHF1Null()
                Me(Me.tableSectionDimensions.HF1Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsHF2Null() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.HF2Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetHF2Null()
                Me(Me.tableSectionDimensions.HF2Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsC1Null() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.C1Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetC1Null()
                Me(Me.tableSectionDimensions.C1Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsC2Null() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.C2Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetC2Null()
                Me(Me.tableSectionDimensions.C2Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsC3Null() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.C3Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetC3Null()
                Me(Me.tableSectionDimensions.C3Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsC4Null() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.C4Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetC4Null()
                Me(Me.tableSectionDimensions.C4Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsATTNull() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.ATTColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetATTNull()
                Me(Me.tableSectionDimensions.ATTColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsSSNull() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.SSColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetSSNull()
                Me(Me.tableSectionDimensions.SSColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsD1Null() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.D1Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetD1Null()
                Me(Me.tableSectionDimensions.D1Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsD2Null() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.D2Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetD2Null()
                Me(Me.tableSectionDimensions.D2Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsDHNull() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.DHColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetDHNull()
                Me(Me.tableSectionDimensions.DHColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsDWNull() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.DWColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetDWNull()
                Me(Me.tableSectionDimensions.DWColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsUS1Null() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.US1Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetUS1Null()
                Me(Me.tableSectionDimensions.US1Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsC5Null() As Boolean
                Return Me.IsNull(Me.tableSectionDimensions.C5Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetC5Null()
                Me(Me.tableSectionDimensions.C5Column) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class HoursRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As HoursRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As HoursRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As HoursRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class MotorsRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As MotorsRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As MotorsRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As MotorsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class BidiFansRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As BidiFansRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As BidiFansRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As BidiFansRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class DuctHeatersRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As DuctHeatersRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As DuctHeatersRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As DuctHeatersRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class CoilPricesRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As CoilPricesRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As CoilPricesRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As CoilPricesRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class ForwardCurvedFansRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As ForwardCurvedFansRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As ForwardCurvedFansRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As ForwardCurvedFansRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class FiltersRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As FiltersRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As FiltersRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As FiltersRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class DampersRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As DampersRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As DampersRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As DampersRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class CoilsRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As CoilsRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As CoilsRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As CoilsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class SectionDimensionsRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As SectionDimensionsRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As SectionDimensionsRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As SectionDimensionsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace

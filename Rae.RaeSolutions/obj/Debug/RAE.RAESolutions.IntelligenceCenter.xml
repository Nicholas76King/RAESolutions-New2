<?xml version="1.0"?>
<doc>
<assembly>
<name>
Rae.RaeSolutions
</name>
</assembly>
<members>
<member name="T:RAE.RAESolutions.Business.Access">
 <summary>
 Access level
 </summary>
 <remarks>
 Can be used to prevent other users from viewing your creations.
 </remarks>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData">
<summary>
Represents a strongly typed in-memory cache of data.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.HoursDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.MotorsDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.BidiFansDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.DuctHeatersDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.CoilPricesDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.ForwardCurvedFansDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.FiltersDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.DampersDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.CoilsDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.SectionDimensionsDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.HoursRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.MotorsRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.BidiFansRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.DuctHeatersRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.CoilPricesRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.ForwardCurvedFansRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.FiltersRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.DampersRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.CoilsRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.SectionDimensionsRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.HoursRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.MotorsRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.BidiFansRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.DuctHeatersRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.CoilPricesRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.ForwardCurvedFansRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.FiltersRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.DampersRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.CoilsRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.AirHandlerReferenceData.SectionDimensionsRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.PriceSheets.BroadSeries.Broaden(System.String)">
 <summary>Broadens series (ex. 20A0CS > 20A0)</summary>
 <param name="series">Equipment series to broaden</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.PriceSheets.CoverPdf.getCoverFilePath(System.String)">
 <summary>Prefixes cover file name with series parameter.</summary>
 <param name="series">Series prefix.</param>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.PriceSheets.Locations">
 <summary>Provides path locations relative to this assembly.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.PriceSheets.Locations.Assembly">
 <summary>File information about this assembly.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.PriceSheets.Locations.Application">
 <summary>File information about the calling application.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.PriceSheets.Locations.Create">
 <summary>Creates an instance of locations relative to this assembly.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.PriceSheets.Locations.SearchForFile(System.String)">
 <summary>
 Searches for file with the file name specified in the parameter.
 Returns null if file not found.
 </summary>
 <param name="fileName">
 Name of file to search for
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.PriceSheets.Locations.SearchForFile(System.String,System.String)">
 <summary>
 Searches for file with the file name specified; also searches specified sub directory. Returns null if file not found.
 </summary>
 <param name="fileName">
 Name of file to search for
 </param>
 <param name="locationToSearch">
 Sub directory (eg Datasources\Databases) or complete directory path (eg c:\) to search.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.PriceSheets.Locations.SearchForFile(System.String,System.Collections.Generic.IList{System.String})">
 <summary>
 Searches for file with the file name specified; also searches specified sub directories. Returns null if file not found.
 </summary>
 <param name="fileName">
 Name of file to search for
 </param>
 <param name="locationsToSearch">
 Sub directories (eg Datasources\Databases) or complete directory paths (eg c:\) to search.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.PriceSheets.Locations.#ctor">
 <summary>
 Hides constructor; this is a singleon class.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.PriceSheets.Locations.modifyDrivePath(System.String)">
 <summary>
 Modifies a drive path entered like C: to C:\ because Path.Combine does not handle this
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.PriceSheets.PageArranger">
 <summary>Arranges pages so that associated covers and price sheets are together 
 and covers are not duplicated.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.PriceSheets.PageArranger.Series_PageType_Assocs">
 <summary>Gets list of associations between series and page types.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.PriceSheets.PageArranger.Arrange">
 <summary>Arranges price sheet pages.
 Prevents the same series cover page from being printed multiple times for similar series (ex. 20A0CS, 20A0CD, 20A0CM).
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.PriceSheets.Pdf.View">
 <summary>Opens pdf in default viewer.</summary>
 <exception cref="T:System.ComponentModel.Win32Exception">
 Throws when there is no pdf viewer installed on the computer</exception>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.PriceSheets.Series_Options_Assoc">
 <summary>Associates a series with its options.</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.PriceSheets.Series_PageType_Assoc">
 <summary>Associates series and page type.</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.ACChillerProcessItem">
 <summary>
 ACChiller process.
 </summary>
 <history start="2006/08/06" by="JOSHH">
 Created
 </history>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.ModelDesc">
 <summary>
 Model Description
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.NewCoefficients">
 <summary>
 NewCoefficients
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.Fluid">
 <summary>
 Fluid
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.GlycolPercentage">
 <summary>
 GlycolPercentage
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.CoolingMedia">
 <summary>
 CoolingMedia
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.SpecificHeat">
 <summary>
 SpecificHeat
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.SpecificGravity">
 <summary>
 SpecificGravity
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.SubCooling">
 <summary>
 SubCooling
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.Refrigerant">
 <summary>
 Refrigrant
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.TempRange">
 <summary>
 TempRange
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.AmbientTemp">
 <summary>
 AmbientTemp
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.LeavingFluidTemp">
 <summary>
 LeavingFluidTemp
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.System">
 <summary>
 System
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.Hertz">
 <summary>
 Hertz
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.Volts">
 <summary>
 Volts
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.Approach">
 <summary>
 Approach
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.SafetyOverride">
 <summary>
 SafetyOverride
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.Circuit1">
 <summary>
 Circuit1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.Circuit2">
 <summary>
 Circuit2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.NumCompressors1">
 <summary>
 NumCompressors1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.NumCompressors2">
 <summary>
 NumCompressors2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.Compressors1">
 <summary>
 Compressors1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.Compressors2">
 <summary>
 Compressors2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.NumCoils1">
 <summary>
 NumCoils1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.NumCoils2">
 <summary>
 NumCoils2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.Condenser1">
 <summary>
 Condenser1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.Condenser2">
 <summary>
 Condenser2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.FinsPerInch1">
 <summary>
 FinsPerInch1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.FinsPerInch2">
 <summary>
 FinsPerInch2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.SubCooling1">
 <summary>
 SubCooling1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.SubCooling2">
 <summary>
 SubCooling2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.SubCoolingPercent1">
 <summary>
 SubCoolingPercent1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.SubCoolingPercent2">
 <summary>
 SubCoolingPercent2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.CondenserTD1">
 <summary>
 CondenserTD1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.CondenserTD2">
 <summary>
 CondenserTD2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.FinHeight1">
 <summary>
 FinHeight1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.FinHeight2">
 <summary>
 FinHeight2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.FinLength1">
 <summary>
 FinLength1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.FinLength2">
 <summary>
 FinLength2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.Fan">
 <summary>
 Fan
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.NumFans1">
 <summary>
 NumFans1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.NumFans2">
 <summary>
 NumFans2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.CfmOverride">
 <summary>
 CfmOverride
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.DischargeLineLoss">
 <summary>
 DischargeLineLoss
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.SuctionLineLoss">
 <summary>
 SuctionLineLoss
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.Altitude">
 <summary>
 Altitude
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.PumpWatts">
 <summary>
 PumpWatts
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.FanWatts">
 <summary>
 FanWatts
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.CondenserCapacity1">
 <summary>
 CondenserCapacity1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.CondenserCapacity2">
 <summary>
 CondenserCapacity2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.EvaporatorModel">
 <summary>
 EvaporatorModel
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.EvaporatorModelDesc">
 <summary>
 EvaporatorModelDesc
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.NumEvap">
 <summary>
 NumEvap
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.FoulingFactor">
 <summary>
 FoulingFactor
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.CapacityType">
 <summary>
 CapacityType
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.EvaporatorCapacity">
 <summary>
 EvaporatorCapacity
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.CatalogRating">
 <summary>
 CatalogRating
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.ApproachRange">
 <summary>
 ApproachRange
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.Evap8Degr1">
 <summary>
 Evap8Degr1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.Evap8Degr2">
 <summary>
 Evap8Degr2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.Evap10Degr1">
 <summary>
 Evap10Degr1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.Evap10Degr2">
 <summary>
 Evap10Degr2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.TEMin">
 <summary>
 TEMin
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.TEMax">
 <summary>
 TEMax
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.TEIncrement">
 <summary>
 TEIncrement
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.ATMin">
 <summary>
 ATMin
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.ATMax">
 <summary>
 ATMax
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.ATIncrement">
 <summary>
 ATIncrement
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.#ctor(RAE.RAESolutions.Business.Entities.item_id)">
 <summary>
 Constructs a evap chiller process that already exists in the data source based on the ID.
 Automatically loads the process from the data source.
 </summary>
 <param name="id">
 ID of the evap chiller process to load.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.#ctor(RAE.RAESolutions.Business.Entities.item_id,System.Int32)">
 <summary>
 Constructs a evap chiller process that already exists in the data source based on the ID.
 Automatically loads the process from the data source.
 </summary>
 <param name="id">
 ID of the evap chiller process to load.
 </param>
 <param name="RevNumber">
 Revision number of the evap chiller process to load.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.#ctor(System.String,System.String,System.String,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>
 Constructs a new evap chiller process with the specified name.
 Generates a new ID.
 </summary>
 <param name="name">
 Name of the process.
 </param>
 <param name="createdBy">
 Username of the person who created the process.
 </param>
 <param name="password">
 Password of the person who created the process.
 </param>
 <param name="parent">
 Parent project manager that process should be included in.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.#ctor(System.String,RAE.RAESolutions.Business.Entities.item_id)">
 <summary>
 Constructs a new evap chiller process with the specified name.
 Used when making a clone.
 </summary>
 <param name="name">
 Name of process.
 </param>
 <param name="id">
 ID of process.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.Load">
 <summary>
 Loads evap chiller process based on ID. 
 ID must be set before calling this method.
 (Optionally revision can be set to pull specific revision.)
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ACChillerProcessItem.initialize">
 <summary>
 Initializes objects. Prevents NullReference.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.BoxLoad.#ctor">
 <summary>
 DO NOT USE.
 </summary>
 <remarks>
 Parameterless constructor used for reflection during Clone and Equals.
 </remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.BoxLoad.#ctor(RAE.RAESolutions.Business.Entities.item_id,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>
 Initializes a new box load.
 </summary>
 <param name="itemId">
 Item ID
 </param>
 <param name="projectManager">
 Project manager
 </param>   
</member>
<member name="E:RAE.RAESolutions.Business.Entities.BoxLoad.SavedAsRevision">
 <summary>
 Occurs after saved as revision
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.BoxLoad.onSavedAsRevision(System.EventArgs)">
 <summary>
 Raises SavedAsRevision event.
 </summary>
 <param name="e">
 Event arguments to pass in event.
 </param>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.BoxLoad.UserCapacity">
 <summary>Capacity the user entered</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.BoxLoad.ExternalWb">
 <summary>External wet bulb</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.BoxLoad.ToTable">
 <summary>
 Converts box load object to a table.
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.BoxLoadList">
 <summary>
 List of box load items that has add/remove events and can find an item by item ID.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.chiller_equipment.#ctor(System.String,RAE.RAESolutions.Business.Division,System.String,System.String,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>Constructs equipment with new ID.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.chiller_equipment.#ctor(System.String,RAE.RAESolutions.Business.Division,RAE.RAESolutions.Business.Entities.item_id,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>Constructs equipment with existing ID.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.chiller_equipment.#ctor(System.Object,System.String)">
 <summary>Constructs equipment from process. Converts process to equipment.</summary>
 <param name="balance">Chiller balance to convert</param>
 <param name="equipment_name">Equipment name</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.chiller_equipment.Load">
 <summary>Loads this equipment from the data source based on the ID.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.chiller_equipment.Save">
 <summary>Saves equipment to data source.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.chiller_equipment.Equals(RAE.RAESolutions.Business.Entities.chiller_equipment)">
 <summary>Compares equality of chillers.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.chiller_equipment.Clone">
 <summary>Clones chiller.</summary>
 <remarks>Use shadows so this will get called and not the unimplemented Clone method in the EquipmentItem base class.</remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.chiller_equipment.Copy(RAE.RAESolutions.Business.Entities.chiller_equipment)">
 <summary>Copies another chiller.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.chiller_equipment.initialize">
 <summary>This overriding method is called by its parent class.</summary>
</member>
<member name="F:RAE.RAESolutions.Business.Entities.Cofans.cofan.specification.esp">
 <summary>external static pressure</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Cofans.cofan_repository.get_fan_curves(System.String)">
 <summary>indices 0-4 are for cfm and indices 5-9 are for hp</summary>
</member>
<member name="F:RAE.RAESolutions.Business.Entities.Cofans.at_fpi.p">
 <summary>coil pressure coefficient</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.CoilPricingWrapper">
 <summary>
 Calculates coil price.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CoilPricingWrapper.Price">
 <summary>
 Coil cost.
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.Condenser">
 <summary>Calculates condenser data for different fins per inch.</summary>
 <remarks>
 If inputs are changed then the outputs need to be re-calculated
 Optional Inputs
 * Refrigerant - is only used to determine refrigerant multiplier for capacity; if not set capacity is not adjusted.
 * Catalog Rating - is only used to adjust capacity based on catalog rating multiplier; if not set is assumed to be false.
 * Altitude - affects standard air flow which affects capacity; if not set is assumed to be zero.
 * Additional External Static Pressure - affects actual air flow and capacity; if not set is assumed to be zero.
 * Sub Cooling Percentage - reduces the capacity by its percentage; if not set is assumed to be zero.
 * Air Flow Override - if air flow is overriden then this override affects air flow and capacity; if not set then fan file is used to calculate air flow.
 </remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Condenser.#ctor(System.Double,System.Double,System.Double,System.Double,System.String,System.Double,System.String,System.String)">
 <summary>Use when you want the air flow and horsepower calculated based on fan curves.</summary>
 <param name="ambient">Ambient temperature in degrees Farenheit</param>
 <param name="difference">Temperature difference between condensing and ambient temperatures</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Condenser.#ctor(System.Double,System.Double,System.Double,System.Double,System.String,System.Double,System.Double,System.String)">
 <summary>Use when overriding air flow.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Condenser.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.Double,System.String,System.String)">
 <summary>Use when overriding altitude.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Condenser.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.Double,System.Double,System.String)">
 <summary>Use when overriding altitude and airflow.</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.Condenser.OutputsList">
 <summary>List of outputs at different fins per inch.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Condenser.OutputsList.At(System.Int32)">
 <summary>Gets outputs at a specified fins per inch</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.Condenser.Inputs">
 <summary>Condenser inputs needed to calculate outputs</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Inputs.TemperatureDifference">
 <summary>Temperature difference between condensing and ambient temperatures in degrees Fahrenheit.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Inputs.CoilWidth">
 <summary>Coil width in inches</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Inputs.CoilLength">
 <summary>Coil length in inches</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Inputs.NumFans">
 <summary>Number of fans in condenser</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Inputs.FanFile">
 <summary>Fan file name</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Inputs.Altitude">
 <summary>Altitude in feet. If not set equals zero.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Inputs.AdditionalExternalStaticPressure">
 <summary>External static pressure [inches of water]. If not set equals zero.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Inputs.AirFlowIsOverriden">
 <summary>
 True if air flow is overriden; else false. 
 If air flow is overriden then the air flow override property should be set.
 Equals false by default.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Inputs.AirFlowOverride">
 <summary>The air flow value to use for overriding in CFM</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Inputs.SubCoolingPercentage">
 <summary>Sub cooling percentage reduces the capacity by its percentage (ex. 15% would be 15 not 0.15)</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Inputs.CapacityIsUsingCatalogRating">
 <summary>True if calculations should use catalog rating; else false.</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.Condenser.Outputs">
 <summary>Condenser outputs from the calculations</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Outputs.Capacity">
 <summary>Capacity in BTUH</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Outputs.FaceVelocity">
 <summary>Face velocity in FPM</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Outputs.StaticPressure">
 <summary>Static pressure in inches of water</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Outputs.AirFlowActual">
 <summary>Actual air flow in CFM</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Outputs.AirFlowStandard">
 <summary>Standard air flow in CFM</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Outputs.CoilCapacity">
 <summary>Coil capacity; capacity over coil face in BTUH per square foot</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Input">
 <summary>Condenser inputs required to calculate condenser results</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Condenser.Output">
 <summary>Calculated outputs based on inputs</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Condenser.Calculate">
 <summary>Calculates outputs based on inputs and interpolates intermediate values.</summary>
 <exception cref="T:System.ApplicationException">
 Thrown when coil file name does not exist in database.
 </exception>
</member>
<member name="F:RAE.RAESolutions.Business.Entities.Condenser.ASSUMED_ROOM_TEMPERATURE">
 <summary>
 Room temperature in Fahrenheit
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Condenser.calculateTemperatureCorrection(System.Double)">
 <summary>
 Calculates the temperature correction
 </summary>
 <param name="ambientTemperature">
 Ambient temperature in Fahrenheit
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Condenser.calculateCapacity(System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Double})">
 <summary>Calculates capacity in BTUH</summary>
 <param name="airFlow">Air flow in CFM</param>
 <param name="faceArea">Face area in square feet</param>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.CondenserCache">
 <summary>
 Caches values from data source. Use Create method to create an instance (singleton).
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem">
 <summary>Condensing unit process.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CondensingUnitSeries">
 <summary>Condensing unit series</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.Capacity">
 <summary>Capacity</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.RuntimeAdjust">
 <summary>
 RuntimeAdjust
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CondensingUnitsRequired">
 <summary>
 CondensingUnitsRequired
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.Runtime">
 <summary>
 Runtime
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.AmbientTemperature">
 <summary>
 AmbientTemperature
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.SuctionTemperature">
 <summary>
 SuctionTemperature
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.Refrigerant">
 <summary>
 Refrigrant
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.Compressor">
 <summary>
 Compressor
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CompressorPerUnit">
 <summary>
 CompressorPerUnit
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CircuitsPerUnit">
 <summary>
 CircuitsPerUnit
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.Altitude">
 <summary>
 Altitude
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.RunType">
 <summary>
 RunType
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.NoCondensingUnits">
 <summary>
 NoCondensingUnits
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CondensingUnitModel">
 <summary>
 CondensingUnitModel
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CustomCondensingUnitModel">
 <summary>
 CustomCondensingUnitModel
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.RatingAmbient">
 <summary>
 RatingAmbient
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.RatingAmbientInterval">
 <summary>
 RatingAmbientInterval
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.RatingAmbientStep">
 <summary>
 RatingAmbientStep
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.RatingSuction">
 <summary>
 RatingSuction
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.RatingSuctionInterval">
 <summary>
 RatingSuctionInterval
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.RatingSuctionStep">
 <summary>
 RatingSuctionStep
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.RatingRefrigerant">
 <summary>
 RatingRefrigerant
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.RatingAltitude">
 <summary>
 RatingAltitude
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.RatingSubCooling">
 <summary>
 RatingSubCooling
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.RatingCatalog">
 <summary>
 RatingCatalog
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.RatingHertz">
 <summary>
 RatingHertz
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.RatingSafety">
 <summary>
 RatingSafety
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.Compressor1">
 <summary>
 Compressor1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CompressorQuantity1">
 <summary>
 CompressorQuantity1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.Compressor2">
 <summary>
 Compressor2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CompressorQuantity2">
 <summary>
 CompressorQuantity2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.Compressor3">
 <summary>
 Compressor3
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CompressorQuantity3">
 <summary>
 CompressorQuantity3
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.Compressor4">
 <summary>
 Compressor4
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CompressorQuantity4">
 <summary>
 CompressorQuantity4
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FinHeight1">
 <summary>
 FinHeight1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CoilFinWidth1">
 <summary>
 CoilFinWidth1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FinHeight2">
 <summary>
 FinHeight2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CoilFinWidth2">
 <summary>
 CoilFinWidth2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FinHeight3">
 <summary>
 FinHeight3
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CoilFinWidth3">
 <summary>
 CoilFinWidth3
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FinHeight4">
 <summary>
 FinHeight4
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CoilFinWidth4">
 <summary>
 CoilFinWidth4
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CoilRows1">
 <summary>
 CoilRows1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CoilRows2">
 <summary>
 CoilRows2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CoilRows3">
 <summary>
 CoilRows3
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CoilRows4">
 <summary>
 CoilRows4
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CoilSubCoolingPercentage1">
 <summary>
 CoilSubCoolingPercentage1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CoilSubCoolingPercentage2">
 <summary>
 CoilSubCoolingPercentage2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CoilSubCoolingPercentage3">
 <summary>
 CoilSubCoolingPercentage3
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.CoilSubCoolingPercentage4">
 <summary>
 CoilSubCoolingPercentage4
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FinsPerInch1">
 <summary>
 FinsPerInch1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FinsPerInch2">
 <summary>
 FinsPerInch2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FinsPerInch3">
 <summary>
 FinsPerInch3
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FinsPerInch4">
 <summary>
 FinsPerInch4
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FanDia1">
 <summary>
 FanDia1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FanDia2">
 <summary>
 FanDia2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FanDia3">
 <summary>
 FanDia3
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FanDia4">
 <summary>
 FanDia4
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FanQuantity1">
 <summary>
 FanQuantity1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FanQuantity2">
 <summary>
 FanQuantity2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FanQuantity3">
 <summary>
 FanQuantity3
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FanQuantity4">
 <summary>
 FanQuantity4
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.TubeDiameter1">
 <summary>
 TubeDiameter1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.TubeSurface1">
 <summary>
 TubeSurface1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FinType1">
 <summary>
 FinType1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.TubeDiameter2">
 <summary>
 TubeDiameter2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.TubeSurface2">
 <summary>
 TubeSurface2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FinType2">
 <summary>
 FinType2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.TubeDiameter3">
 <summary>
 TubeDiameter3
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.TubeSurface3">
 <summary>
 TubeSurface3
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FinType3">
 <summary>
 FinType3
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.TubeDiameter4">
 <summary>
 TubeDiameter4
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.TubeSurface4">
 <summary>
 TubeSurface4
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FinType4">
 <summary>
 FinType4
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FanRPM1">
 <summary>
 FanRPM1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FanRPM2">
 <summary>
 FanRPM2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FanRPM3">
 <summary>
 FanRPM3
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.FanRPM4">
 <summary>
 FanRPM1
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.#ctor">
 <summary>Parameterless constructor for serialization purposes only... DO NOT USE</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.#ctor(RAE.RAESolutions.Business.Entities.item_id)">
 <summary>
 Constructs a condensing unit process that already exists in the data source based on the ID.
 Automatically loads the process from the data source.
 </summary>
 <param name="id">ID of the condensing unit process to load.</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.#ctor(System.String,System.String,System.String,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>
 Constructs a new condensing unit process with the specified name.
 Generates a new ID.
 </summary>
 <param name="name">Name of the process.</param>
 <param name="createdBy">Username of the person who created the process.</param>
 <param name="password">Password of the person who created the process.</param>
 <param name="parent">Parent project manager that process should be included in.</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.Load">
 <summary>
 Loads condensing unit process based on ID. 
 ID must be set before calling this method.
 (Optionally revision can be set to pull specific revision.)
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem.initialize">
 <summary>Initializes objects. Prevents NullReference.</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.EquipmentFactory">
 <summary>Equipment factory builds equipment items.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentFactory.#ctor">
 <summary>Hides constructor.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentFactory.CreateEquipment(System.String,System.String,RAE.RAESolutions.Business.EquipmentType,RAE.RAESolutions.Business.Division,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>Creates equipment with an existing ID and existing project manager.</summary>
 <remarks>
 Equipment is not added to project manager; 
 it is assumed that the equipment is already in the existing project.
 </remarks>
 <param name="name">Equipment name.</param>
 <param name="id">Equipment ID.</param>
 <param name="type">Equipment type.</param>
 <param name="division">Division of RAE Corporation.</param>
 <returns>Constructed equipment.</returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentFactory.CreateEquipment(System.String,System.String,System.String,RAE.RAESolutions.Business.EquipmentType,RAE.RAESolutions.Business.Division)">
 <summary>Creates new equipment with a new project manager. Adds equipment to project.</summary>
 <param name="name">Equipment name.</param>
 <param name="username">Equipment ID.</param>
 <param name="password">User's password.</param>
 <param name="type">Equipment type.</param>
 <param name="division">Division of RAE Corporation.</param>
 <returns>Constructed equipment.</returns>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.GetAvailableOptionsCommand">
 <summary>Handles retrieving available equipment options and identifying any options that are no longer available</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EvaporativeCondenserChillerBalance.#ctor(RAE.RAESolutions.Business.Entities.item_id)">
 <summary>
 Constructs a evap chiller process that already exists in the data source based on the ID.
 Automatically loads the process from the data source.
 </summary>
 <param name="id">ID of the evap chiller process to load.</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EvaporativeCondenserChillerBalance.#ctor(RAE.RAESolutions.Business.Entities.item_id,System.Int32)">
 <summary>
 Constructs a evap chiller process that already exists in the data source based on the ID.
 Automatically loads the process from the data source.
 </summary>
 <param name="id">ID of the evap chiller process to load.</param>
 <param name="RevNumber">Revision number of the evap chiller process to load.</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EvaporativeCondenserChillerBalance.#ctor(System.String,System.String,System.String,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>
 Constructs a new evap chiller process with the specified name.
 Generates a new ID.
 </summary>
 <param name="name">Name of the process.</param>
 <param name="createdBy">Username of the person who created the process.</param>
 <param name="password">Password of the person who created the process.</param>
 <param name="parent">Parent project manager that process should be included in.</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EvaporativeCondenserChillerBalance.#ctor(System.String,RAE.RAESolutions.Business.Entities.item_id)">
 <summary>
 Constructs a new evap chiller process with the specified name.
 Used when making a clone.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EvaporativeCondenserChillerBalance.Load">
 <summary>
 Loads evap chiller process based on ID.
 ID must be set before calling this method.
 (Optionally revision can be set to pull specific revision.)
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.CondenserEquipmentItem">
 <summary>Condenser equipment.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondenserEquipmentItem.#ctor(System.String,RAE.RAESolutions.Business.Division,System.String,System.String,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>Constructs equipment with new ID.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondenserEquipmentItem.#ctor(System.String,RAE.RAESolutions.Business.Division,RAE.RAESolutions.Business.Entities.item_id,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>Constructs equipment with existing ID.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondenserEquipmentItem.#ctor(RAE.RAESolutions.Business.Entities.CondenserProcessItem,System.String)">
 <summary>Creates condenser equipment from condenser process.</summary>
 <param name="condenserProcess">Condenser process to create equipment from.</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondenserEquipmentItem.Load">
 <summary>Loads this equipment from data source based on ID.
 ID must be set before calling this method.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondenserEquipmentItem.Save">
 <summary>Saves equipment to data source.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondenserEquipmentItem.Equals(RAE.RAESolutions.Business.Entities.CondenserEquipmentItem)">
 <summary>True if equipment is equal; else false.</summary>
 <param name="other">Other equipment to compare.</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondenserEquipmentItem.Clone">
 <summary>Returns a clone of this equipment.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondenserEquipmentItem.Copy(RAE.RAESolutions.Business.Entities.CondenserEquipmentItem)">
 <summary>Copies another equipment item's data into this equipment.</summary>
 <param name="other">Equipment to copy.</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondenserEquipmentItem.initialize">
 <summary>This overriding method is called by its parent class.</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.CondenserProcessItem">
 <summary>
 Condenser process.
 </summary>
 <history start="2006/08/01">
 Created
 </history>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserProcessItem.Refrigerant">
 <summary>
 Refrigrant
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserProcessItem.CoilWidth">
 <summary>
 CoilWidth
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserProcessItem.CoilLength">
 <summary>
 CoilLength
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserProcessItem.Altitude">
 <summary>
 Altitude
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserProcessItem.SubCooling">
 <summary>
 SubCooling
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserProcessItem.SubCoolingPercentage">
 <summary>
 SubCoolingPercentage
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserProcessItem.AmbientTemp">
 <summary>
 AmbientTemp
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserProcessItem.TD">
 <summary>
 TD
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserProcessItem.Fan">
 <summary>
 Fan
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserProcessItem.NumFans">
 <summary>
 NumFans
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserProcessItem.CFM">
 <summary>
 CFM
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserProcessItem.CoilDesc">
 <summary>
 CoilDesc
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserProcessItem.ExtStaticPressure">
 <summary>
 ExtStaticPressure
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserProcessItem.CatalogRating">
 <summary>
 CatalogRating
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserProcessItem.ModelDescription">
 <summary>
 ModelDescription
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondenserProcessItem.#ctor(RAE.RAESolutions.Business.Entities.item_id)">
 <summary>
 Constructs a condenser process that already exists in the data source based on the ID.
 Automatically loads the process from the data source.
 </summary>
 <param name="id">
 ID of the condenser process to load.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondenserProcessItem.#ctor(RAE.RAESolutions.Business.Entities.item_id,System.Int32)">
 <summary>
 Constructs a condenser process that already exists in the data source based on the ID.
 Automatically loads the process from the data source.
 </summary>
 <param name="id">
 ID of the condenser process to load.
 </param>
 <param name="RevNumber">
 Revision number of the condenser process to load.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondenserProcessItem.#ctor(System.String,System.String,System.String,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>
 Constructs a new condenser process with the specified name.
 Generates a new ID.
 </summary>
 <param name="name">
 Name of the process.
 </param>
 <param name="createdBy">
 Username of the person who created the process.
 </param>
 <param name="password">
 Password of the person who created the process.
 </param>
 <param name="parent">
 Parent project manager that process should be included in.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondenserProcessItem.#ctor(System.String,RAE.RAESolutions.Business.Entities.item_id)">
 <summary>
 Constructs a new condenser process with the specified name.
 Used when making a clone.
 </summary>
 <param name="name">
 Name of process.
 </param>
 <param name="id">
 ID of process.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondenserProcessItem.Load">
 <summary>
 Loads condenser process based on ID. 
 ID must be set before calling this method.
 (Optionally revision can be set to pull specific revision.)
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondenserProcessItem.initialize">
 <summary>
 Initializes objects. Prevents NullReference.
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.CondensingUnitEquipmentItem">
 <summary>Condensing unit equipment item.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondensingUnitEquipmentItem.#ctor(System.String,RAE.RAESolutions.Business.Division,System.String,System.String,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>Constructs condensing unit equipment item with a new ID.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondensingUnitEquipmentItem.#ctor(System.String,RAE.RAESolutions.Business.Division,RAE.RAESolutions.Business.Entities.item_id,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>Constructs condensing unit for an existing ID that hasn't been saved to a data source.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondensingUnitEquipmentItem.#ctor(RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem,System.String)">
 <summary>Creates condensing unit from selection/rating.</summary>
 <param name="process">Condensing unit process to create condensing unit equipment from</param>
 <param name="equipmentName">Name of the new equipment</param>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondensingUnitEquipmentItem.specs">
 <summary>Specifications specific to a condensing unit</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondensingUnitEquipmentItem.Load">
 <summary>Loads condensing unit from data source.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondensingUnitEquipmentItem.Save">
 <summary>Saves condensing unit to data source.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondensingUnitEquipmentItem.Equals(RAE.RAESolutions.Business.Entities.CondensingUnitEquipmentItem)">
 <summary>Compares equality of condensing units.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondensingUnitEquipmentItem.Clone">
 <summary>Clones this condensing unit.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondensingUnitEquipmentItem.Copy(RAE.RAESolutions.Business.Entities.CondensingUnitEquipmentItem)">
 <summary>Copies another condensing unit.</summary>
 <param name="other">Condensing unit to copy.</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CondensingUnitEquipmentItem.initialize">
 <summary>Initializes objects that this class depends on</summary>
 <remarks>This overriding method is called by its parent class.</remarks>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.EquipmentItem">
 <summary>Contains information about equipment</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.EquipmentItem.id">
 <summary>Unique ID.</summary>
 <remarks>Setter adds synchronizing functionality to base Id property</remarks>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.EquipmentItem.model">
 <summary>entire model including series</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.EquipmentItem.obsolete_options">
 <summary>Obsolete options are no longer available or have replacement option codes</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.EquipmentItem.exists_in_data_source">
 <summary>Gets whether this equipment exists in the data source.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.EquipmentItem.RatingEquipment">
 <summary>Until a somewhat major re-factor, use temporarily to explicitly tie a piece of rating equipment to pricing equipment.  WHen EquipmentItem is saved, will check if this exists and save serialized version to db.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentItem.#ctor(System.String,RAE.RAESolutions.Business.Division,RAE.RAESolutions.Business.EquipmentType,System.String,System.String,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>Constructs equipment item. Adds constructed equipment to project. Generates a new ID.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentItem.#ctor(System.String,RAE.RAESolutions.Business.Division,RAE.RAESolutions.Business.EquipmentType,RAE.RAESolutions.Business.Entities.item_id,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>Constructs equipment item. Sets existing ID.</summary>
 <remarks>This is used by the Clone method.</remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentItem.Load(System.String)">
 <summary>Loads equipment based on ID.</summary>
 <param name="id">ID of equipment to load.</param>
 <returns>Loaded equipment.</returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentItem.ToString">
 <summary>Series (30A0CD) and model (30) ex 30A0CD30</summary>   
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentItem.Load">
 <summary>Not implemented. Inheritors must override.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentItem.Save">
 <summary>Not implemented. Inheritors must override.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentItem.Clone">
 <summary>Not implemented. Inheriting classes should shadow.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentItem.initialize">
 <summary>Initializes objects in equipment</summary>
 <remarks>Helps prevent nulls from unconstructed objects</remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentItem.setOptionsRevision(System.Single)">
 <summary>Sets the revision of every option in option list.</summary>
 <param name="revision">Revision to set options to.</param>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.EquipmentItemList">
 <summary>
 Equipment item list.
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.EquipmentOption">
 <summary>Equipment option</summary>
 <remarks>Inherit from data access object to prevent having to copy business logic (value interpretations).</remarks>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.EquipmentOption.Id">
 <summary>Identifier that is unique to a selected option in project. 
 ID for Options table.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.EquipmentOption.Selected">
 <summary>True if option is selected to be an option with for equipment.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.EquipmentOption.IsSelectedReadOnly">
 <summary>True if state of selected is not editable.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.EquipmentOption.Equipment">
 <summary>Equipment item</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.EquipmentOption.Revision">
 <summary>Revision number</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentOption.Clone">
 <summary>Clones equipment option.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentOption.Equals(RAE.RAESolutions.Business.Entities.EquipmentOption)">
 <summary>Compares options' equality.</summary>
 <param name="optionToCompare">Option to compare this option with.</param>
 <returns>True if options are equal; else false</returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentOption.Import(Rae.DataAccess.EquipmentOptions.Option)">
 <summary>Loads and interprets equipment option</summary>
 <param name="dbOption">Option to load</param>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.EquipmentOptionList">
 <summary>
 List of equipment options.
 </summary>
 <history by="Casey Joyce" finish="2006/05/04" hours="0.5">
 Created
 </history>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.EquipmentOptionList.Equipment">
 <summary>
 Equipment
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentOptionList.#ctor(RAE.RAESolutions.Business.Entities.EquipmentItem)">
 <summary>
 Constructs option list for equipment.
 </summary>
 <param name="equipment">
 Equipment that options are selected for.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentOptionList.Add(RAE.RAESolutions.Business.Entities.EquipmentOption)">
 <summary>
 Adds option to list and sets its Equipment property.
 </summary>
 <param name="op">
 Option to add.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentOptionList.Equals(RAE.RAESolutions.Business.Entities.EquipmentOptionList)">
 <summary>
 Determines whether option lists are equal.
 </summary>
 <param name="other">
 Other option list to compare.
 </param>
 <returns>
 True if lists are equal, else false.
 </returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentOptionList.Clone">
 <summary>
 Clones equipment option list.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.EquipmentOptionList.Contains(System.String)">
 <summary>
 Returns true if option list contains an option with the specified option code
 </summary>
 <param name="optionCode">Option code to find in list</param>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.FluidCoolerEquipmentItem">
 <summary>Fluid cooler equipment item.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.FluidCoolerEquipmentItem.#ctor(System.String,RAE.RAESolutions.Business.Division,System.String,System.String,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>Constructs equipment with a new ID.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.FluidCoolerEquipmentItem.#ctor(System.String,RAE.RAESolutions.Business.Division,RAE.RAESolutions.Business.Entities.item_id,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>Constructs equipment with existing ID.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.FluidCoolerEquipmentItem.Load">
 <summary>Loads equipment from data source based on ID.
 ID property must be set before calling this method.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.FluidCoolerEquipmentItem.Save">
 <summary>Saves equipment to data source.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.FluidCoolerEquipmentItem.Equals(RAE.RAESolutions.Business.Entities.FluidCoolerEquipmentItem)">
 <summary>Compares equality of fluid coolers.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.FluidCoolerEquipmentItem.Clone">
 <summary>Clones fluid cooler.</summary>
 <remarks>Use shadows so this will get called and not the unimplemented Clone method in the EquipmentItem base class.
 </remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.FluidCoolerEquipmentItem.Copy(RAE.RAESolutions.Business.Entities.FluidCoolerEquipmentItem)">
 <summary>Copies another fluid cooler.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.FluidCoolerEquipmentItem.initialize">
 <summary>Initializes objects.</summary>
 <remarks>This overriding method is called by its parent class.</remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.FluidCoolerProcessItem.Load">
 <summary>
 Loads condenser process based on ID. 
 ID must be set before calling this method.
 (Optionally revision can be set to pull specific revision.)
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.FluidCoolerProcessItem.initialize">
 <summary>
 Initializes objects. Prevents NullReference.
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.ChillerModel">
 <summary>Formats chiller model.</summary>
 <remarks>Adds info to model used for mainframe searching and by shop.</remarks>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.RuntimeWarning">
 <summary>Checks if runtime is too short (could damage compressor)</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.ItemList`1">
 <summary>
 List of items.
 </summary>
 <history by="Casey Joyce" start="2006/07/14">
 Created
 </history>
</member>
<member name="E:RAE.RAESolutions.Business.Entities.ItemList`1.ItemNameChanged">
 <summary>
 Occurs after an item's name is changed.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ItemList`1.OnItemNameChanged(`0,System.EventArgs)">
 <summary>
 Raises <see cref="E:RAE.RAESolutions.Business.Entities.ItemList`1.ItemNameChanged" /> event.
 </summary>
 <param name="e">
 Event arguments to pass in event.
 Use System.EventArgs.Empty if no data is being passed.
 </param>
 <remarks>
 Use this method to raise event rather than raising event directly.
 Protected - Prevents other classes from raising event
 Overridable - Allows derived classes to override implementation.
 </remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ItemList`1.#ctor">
 <summary>
 Constructs equipment item list.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ItemList`1.Items(RAE.RAESolutions.Business.Entities.item_id)">
 <summary>
 Provides access to equipment items by ID. Returns null if ID doesn't exist.
 </summary>
 <param name="id">
 ID of equipment to get.
 </param>
 <returns>
 Equipment item with ID or null if there is no item with the ID.
 </returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ItemList`1.Items(System.String)">
 <summary>
 Provides access to items by ID. Returns null if ID doesn't exist.
 </summary>
 <param name="id">
 ID of equipment to get.
 </param>
 <returns>
 Equipment item with ID or null if there is no item with the ID.
 </returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ItemList`1.Add(`0)">
 <summary>
 Adds equipment item to list.
 </summary>
 <param name="item">
 Item to add to list.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ItemList`1.ItemName_Changed(RAE.RAESolutions.Business.Entities.ItemBase,System.EventArgs)">
 <summary>
 Propogates name changed event.
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.NaturalGasHeater">
 <summary>
 Natural gas heater section for air handler.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.NaturalGasHeater.#ctor(System.String)">
 <summary>
 Constructs natural gas heater section for air handler.
 </summary>
 <param name="airHandlerModel">
 Air handler model is expected to be in the format: TPAH-##.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.NaturalGasHeater.checkIfBoardIsRequired(System.Double,RAE.RAESolutions.Business.Entities.NaturalGasHeater.HeaterType)">
 <summary>
 Determines if MCB-1 board is required. Returns true if required; else false.
 </summary>
 <param name="power">
 Power in MBH
 </param>
 <param name="type">
 Heater type
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.PumpEquipment.Equals(RAE.RAESolutions.Business.Entities.PumpEquipment)">
 <summary>Shadows keyword is required for reflection access</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.PumpEquipment.Clone">
 <summary>Shadows keyword is required for reflection access</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.ProcessItem">
 <summary>
 Persists process data for ratings, selections and balances.
 This is the class that specific processes should inherit from.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProcessItem.ObjectLinkXML">
 <summary>Holds XML string of associated object(s)</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProcessItem.ObjectLinkType">
 <summary>Holds types of associated object(s)</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProcessItem.Load">
 <summary>Inheritors should override Load().</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProcessItem.Save">
 <summary>Updates if revision already exists or creates if revision does not exist.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProcessItem.SaveAs(RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>Saves process item as new process item.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProcessItem.Remove">
 <summary>Removes process item from persistence storage.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProcessItem.Copy(RAE.RAESolutions.Business.Entities.ProcessItem)">
 <summary>Copies another process item's values into this process item.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProcessItem.Clone(System.Boolean)">
 <summary>Creates and returns a clone of this process item.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProcessItem.Equals(RAE.RAESolutions.Business.Entities.ProcessItem)">
 <summary>Checks if two process are equal.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProcessItem.initialize">
 <summary>Initializes the objects of this class and parent classes to prevent null exceptions.</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.ProcessItemList">
 <summary>
 List of process items.
 </summary>
 <remarks>
 Has name changed event.
 </remarks>
</member>
<member name="E:RAE.RAESolutions.Business.Entities.ProcessItemList.ItemNameChanged">
 <summary>
 Occurs after an item's name is changed.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProcessItemList.OnItemNameChanged(RAE.RAESolutions.Business.Entities.ProcessItem,System.EventArgs)">
 <summary>
 Raises <see cref="E:RAE.RAESolutions.Business.Entities.ProcessItemList.ItemNameChanged" /> event.
 </summary>
 <param name="e">
 Event arguments to pass in event.
 Use System.EventArgs.Empty if no data is being passed.
 </param>
 <remarks>
 Use this method to raise event rather than raising event directly.
 Protected - Prevents other classes from raising event
 Overridable - Allows derived classes to override implementation.
 </remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProcessItemList.#ctor">
 <summary>
 Constructor
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProcessItemList.Items(RAE.RAESolutions.Business.Entities.item_id)">
 <summary>
 Provides access to process items by ID. Returns null if ID doesn't exist.
 </summary>
 <param name="id">
 ID of process to get.
 </param>
 <returns>
 Process item with ID or null if there is no item with the ID.
 </returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProcessItemList.Items(System.String)">
 <summary>
 Provides access to process items by ID. Returns null if ID doesn't exist.
 </summary>
 <param name="id">
 ID of process to get.
 </param>
 <returns>
 Process item with ID or null if there is no item with the ID.
 </returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProcessItemList.Add(RAE.RAESolutions.Business.Entities.ProcessItem)">
 <summary>
 Adds process item to list.
 </summary>
 <param name="item">
 Item to add to list.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProcessItemList.ItemName_Changed(RAE.RAESolutions.Business.Entities.ItemBase,System.EventArgs)">
 <summary>
 Propogates name changed event.
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.ProductCoolerEquipmentItem">
 <summary>Product cooler equipment item.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProductCoolerEquipmentItem.#ctor(System.String,RAE.RAESolutions.Business.Division,System.String,System.String,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>Constructs product cooler equipment item with a new ID.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProductCoolerEquipmentItem.#ctor(System.String,RAE.RAESolutions.Business.Division,RAE.RAESolutions.Business.Entities.item_id,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>Constructs condensing unit equipment item for an existing ID that hasn't been saved to a data source.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProductCoolerEquipmentItem.Specs">
 <summary>Specifications for product coolers.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProductCoolerEquipmentItem.Save">
 <summary>Saves product cooler to data source.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProductCoolerEquipmentItem.Load">
 <summary>Loads product cooler from data source.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProductCoolerEquipmentItem.Equals(RAE.RAESolutions.Business.Entities.ProductCoolerEquipmentItem)">
 <summary>Compares product coolers.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProductCoolerEquipmentItem.Copy(RAE.RAESolutions.Business.Entities.ProductCoolerEquipmentItem)">
 <summary>Copies another product cooler's values into this product cooler.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProductCoolerEquipmentItem.initialize">
 <summary>Initializes objects.</summary>
 <remarks>This overriding method is called by its base class.</remarks>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.RelatedCommonOption">
 <summary>
 Provides data access for dependent common options
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.RelatedCommonOption.Option">
 <summary>Option to determine parent and dependent options for</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.RelatedCommonOption.DependentOptions">
 <summary>List of options whose prices are dependent upon the Option property</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.RelatedCommonOption.ParentOptions">
 <summary>List of options that are parent options of the Option property</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.RelatedCommonOption.IsDependent">
 <summary>True if Option property is dependent (its price is dependent upon another option)</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.RelatedCommonOption.IsParent">
 <summary>True if Option property is parent (other option prices are dependent upon it)</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.RelatedCommonOption.RefreshDependentOptions">
 <summary>If true then dependent options are retrieved from datasource; otherwise, they're retrieved from cache
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.RelatedCommonOption.RefreshParentOptions">
 <summary>If true then parent options are retrieved from datasource; otherwise, they're retrieved from cache
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.RelatedCommonOption.#ctor(RAE.RAESolutions.Business.Entities.EquipmentOption)">
 <summary>Constructor, sets Option property</summary>
 <param name="op">Option to determine parent and dependent options for</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.RelatedCommonOption.InitializeProperties">
 <summary>Initializes property values</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.RelatedCommonOption.GetDependentOptions">
 <summary>Retrieves dependent options and sets RefreshDependentOptions and IsParent properties</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.RelatedCommonOption.GetParentOptions">
 <summary>Retrieves parent options and sets RefreshParentOptions and IsDependent properties</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.RevisionBase.GetLastRevisionNumber(System.String)">
 <summary>gets the last revision made to the project or item specified</summary>
 <param name="id">id can be projectid or any equipment item or process item id</param>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.SpecialOption">
 <summary>
 Special option that user enters. 
 Should be verifiable with an option that has been authorized by a RAE employee.
 </summary>
 <history by="Casey Joyce" finish="2006/06/02" hours="1">
 Created
 </history>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.SpecialOption.Id">
 <summary>
 Unique auto number ID generated by database.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.SpecialOption.Code">
 <summary>
 Special option's unique code.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.SpecialOption.Price">
 <summary>
 Price of special option.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.SpecialOption.Description">
 <summary>
 Description of special option.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.SpecialOption.AuthorizedBy">
 <summary>
 Person who authorized the special option.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.SpecialOption.AuthorizedFor">
 <summary>
 Identity special option was authorized for.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.SpecialOption.Quantity">
 <summary>
 Quantity
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.SpecialOption.EquipmentId">
 <summary>
 Equipment ID
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.SpecialOption.Revision">
 <summary>
 Revision number
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.SpecialOption.#ctor(System.String,System.String,System.Double,System.Int32,System.String,System.String,System.DateTime,RAE.RAESolutions.Business.Entities.item_id,System.Single)">
 <summary>
 Constructs special option with all properties set.
 </summary>
 <param name="authorizedBy">Authorized by</param>
 <param name="code">Special option code</param>
 <param name="authorizedFor">Authorized for</param>
 <param name="description">Description of special option.</param>
 <param name="equipmentId">Equipment ID.</param>
 <param name="expirationDate">Date price for special option expires.</param>
 <param name="price">Price of special option.</param>
 <param name="quantity">Quantity.</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.SpecialOption.#ctor(System.String,System.Double,RAE.RAESolutions.Business.Entities.item_id,System.Single)">
 <summary>
 Constructs special option with sufficient info to save.
 </summary>
 <param name="code">
 Special option code.</param>
 <param name="price">
 Special option price</param>
 <param name="equipmentId">
 Equipment ID.</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.SpecialOption.#ctor(System.Int32,System.Single)">
 <summary>
 Constructs special option with sufficient info to load from data source.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.SpecialOption.#ctor">
 <summary>
 Constructs a special option.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.SpecialOption.Clone">
 <summary>
 Clones another special option.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.SpecialOption.Equals(RAE.RAESolutions.Business.Entities.SpecialOption)">
 <summary>
 Compares equality of two special options.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.SpecialOption.Copy(RAE.RAESolutions.Business.Entities.SpecialOption)">
 <summary>
 Copies another special option.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.SpecialOption.Load">
 <summary>
 Loads a special option by code. Auto number ID property must be set before loading.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.SpecialOption.Save">
 <summary>
 Saves special option to data source.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.SpecialOption.ToString">
 <summary>
 Special option code (ex. SP01).
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.SpecialOption.ValidateSave">
 <summary>
 Validates current state before saving.
 </summary>
 <returns>
 True if is valid; else false.
 </returns>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.SpecialOptionList.Revision">
 <summary>
 Gets revision and sets all the special option revisions.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.SpecialOptionList.Clone">
 <summary>
 Clones SpecialOptionList; creates a copy of this object.
 </summary>
 <returns>
 Clone of this object.
 </returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.SpecialOptionList.Equals(RAE.RAESolutions.Business.Entities.SpecialOptionList)">
 <summary>
 Determines whether lists are equal. Order of items in list matters.
 </summary>
 <param name="other">
 Other list to compare.
 </param>
 <returns>
 True if equal; else false.
 </returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.SpecialOptionList.RemoveById(System.Int32)">
 <summary>
 Removes special options by code.
 </summary>
 <param name="id">
 ID of special option to remove.
 </param>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.SplitCondenserInfo">
 <summary>
 Provides information about a split condenser for a specified chiller.
 </summary>
 <remarks>
 Used with 33A0 series.
 A condenser's price can vary depending on the chiller it is selected with.
 </remarks>
 <history by="Casey Joyce" finish="2006/05/26">
 Created
 </history>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.SplitCondenserInfo.ChillerModel">
 <summary>
 Chiller model
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.SplitCondenserInfo.CondenserModel">
 <summary>
 Condenser model associated with specified chiller.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.SplitCondenserInfo.CondenserPrice">
 <summary>
 Price of split condenser when with specified chiller.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.SplitCondenserInfo.#ctor(System.String)">
 <summary>
 Constructs split condenser info.
 </summary>
 <param name="chillerModel"></param>
 <exception cref="T:System.ArgumentException">
 Thrown when chiller model parameter is null or empty.
 </exception>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.unit_cooler">
 <summary>Unit cooler equipment item.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.unit_cooler.#ctor(System.String,RAE.RAESolutions.Business.Division,System.String,System.String,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>Constructs unit cooler equipment item with a new ID.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.unit_cooler.#ctor(System.String,RAE.RAESolutions.Business.Division,RAE.RAESolutions.Business.Entities.item_id,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>Constructs condensing unit equipment item for an existing ID that hasn't been saved to a data source.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.unit_cooler.Save">
 <summary>Saves unit cooler to data source.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.unit_cooler.Load">
 <summary>Loads unit cooler from data source.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.unit_cooler.Equals(RAE.RAESolutions.Business.Entities.unit_cooler)">
 <summary>Compares unit coolers; returns true if unit coolers have the same values.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.unit_cooler.Copy(RAE.RAESolutions.Business.Entities.unit_cooler)">
 <summary>Copies another unit cooler's values into this unit cooler.</summary>
 <param name="other">Other unit cooler to copy values from.</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.cu_uc_balance_screen_model.#ctor(RAE.RAESolutions.Business.Entities.item_id)">
 <summary>
 Constructs a balance process that already exists in the data source based on the ID.
 Automatically loads the process from the data source.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.cu_uc_balance_screen_model.#ctor(RAE.RAESolutions.Business.Entities.item_id,System.Int32)">
 <summary>
 Constructs a balance process that already exists in the data source based on the ID.
 Automatically loads the process from the data source.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.cu_uc_balance_screen_model.#ctor(System.String,System.String,System.String,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>
 Constructs a new balance process with the specified name.
 Generates a new ID.
 </summary>
 <param name="parent">Parent project manager that process should be included in.</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.cu_uc_balance_screen_model.#ctor(System.String,RAE.RAESolutions.Business.Entities.item_id)">
 <summary>
 Constructs a new balance process with the specified name.
 Used when making a clone.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.cu_uc_balance_screen_model.#ctor(RAE.RAESolutions.Business.Entities.unit_cooler)">
 <summary>Constructs a balance process based on the unit cooler pricing parameter</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.cu_uc_balance_screen_model.compressor_quantity_per_unit">
 <summary>0 = 'ALL', which means don't filter by number of compressors per unit.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.cu_uc_balance_screen_model.refrigerant_circuits_per_unit">
 <summary>0 = 'ALL' which means don't filter condensing unit results based on number of circuits per unit (return all).</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.cu_uc_balance_screen_model.balance">
 <summary>balance of condensing unit(s) and unit cooler(s) in btuh</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.cu_uc_balance_screen_model.Load">
 <summary>
 Loads UnitCooler process based on ID. 
 ID must be set before calling this method.
 (Optionally revision can be set to pull specific revision.)
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.UserDataProtector">
 <summary>
 Protects user data. Prevents user data from being overwritten during updates.
 </summary>
 <history by="Casey Joyce" finish="2006/06/09">
 Created, design pattern (master folder) per Danny Groom.
 </history>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.UserDataProtector.EnsureFileExists(System.String,RAE.Solutions.user_group)">
 <summary>
 Ensures file exists. 
 If file does not exists, an empty file with the correct structure is copied from the master folder.
 </summary>
 <param name="expectedFilePath">
 Path of the file to ensure exists. Path where the file is or will be copied (from master folder).
 </param>
 <remarks>
 A master file must be in the master folder and have the same name as the expected file for this method to work.
 </remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.UserDataProtector.EnsureFolderExists(System.String)">
 <summary>
 Ensures folder exists.
 </summary>
 <param name="expectedFolderPath">
 Path of the expected folder.
 </param>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.WCChillerProcessItem">
 <summary>
 WC Chiller process.
 </summary>
 <history start="2006/08/08" by="JOSHH">
 Created
 </history>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.ModelDesc">
 <summary>
 Model Description
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.NewCoefficients">
 <summary>
 NewCoefficients
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.Fluid">
 <summary>
 Fluid
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.GlycolPercentage">
 <summary>
 GlycolPercentage
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.CoolingMedia">
 <summary>
 CoolingMedia
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.SpecificHeat">
 <summary>
 SpecificHeat
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.SpecificGravity">
 <summary>
 SpecificGravity
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.SubCooling">
 <summary>
 SubCooling
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.Refrigerant">
 <summary>
 Refrigrant
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.TempRange">
 <summary>
 TempRange
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.AmbientTemp">
 <summary>
 AmbientTemp
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.LeavingFluidTemp">
 <summary>
 LeavingFluidTemp
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.System">
 <summary>
 System
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.Hertz">
 <summary>
 Hertz
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.Volts">
 <summary>
 Volts
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.Approach">
 <summary>
 Approach
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.SafetyOverride">
 <summary>
 SafetyOverride
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.Circuit1">
 <summary>
 Circuit1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.Circuit2">
 <summary>
 Circuit2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.NumCompressors1">
 <summary>
 NumCompressors1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.NumCompressors2">
 <summary>
 NumCompressors2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.Compressors1">
 <summary>
 Compressors1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.Compressors2">
 <summary>
 Compressors2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.NumCoils1">
 <summary>
 NumCoils1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.NumCoils2">
 <summary>
 NumCoils2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.Condenser1">
 <summary>
 Condenser1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.Condenser2">
 <summary>
 Condenser2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.DischargeLineLoss">
 <summary>
 DischargeLineLoss
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.SuctionLineLoss">
 <summary>
 SuctionLineLoss
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.Altitude">
 <summary>
 Altitude
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.PumpWatts">
 <summary>
 PumpWatts
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.FanWatts">
 <summary>
 FanWatts
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.CondenserCapacity1">
 <summary>
 CondenserCapacity1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.CondenserCapacity2">
 <summary>
 CondenserCapacity2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.EvaporatorModel">
 <summary>
 EvaporatorModel
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.EvaporatorModelDesc">
 <summary>
 EvaporatorModelDesc
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.NumEvap">
 <summary>
 NumEvap
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.FoulingFactor">
 <summary>
 FoulingFactor
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.CapacityType">
 <summary>
 CapacityType
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.EvaporatorCapacity">
 <summary>
 EvaporatorCapacity
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.CatalogRating">
 <summary>
 CatalogRating
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.ApproachRange">
 <summary>
 ApproachRange
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.Evap8Degr1">
 <summary>
 Evap8Degr1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.Evap8Degr2">
 <summary>
 Evap8Degr2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.Evap10Degr1">
 <summary>
 Evap10Degr1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.Evap10Degr2">
 <summary>
 Evap10Degr2
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.#ctor(RAE.RAESolutions.Business.Entities.item_id)">
 <summary>
 Constructs a water chiller process that already exists in the data source based on the ID.
 Automatically loads the process from the data source.
 </summary>
 <param name="id">
 ID of the water chiller process to load.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.#ctor(RAE.RAESolutions.Business.Entities.item_id,System.Int32)">
 <summary>
 Constructs a water chiller process that already exists in the data source based on the ID.
 Automatically loads the process from the data source.
 </summary>
 <param name="id">
 ID of the water chiller process to load.
 </param>
 <param name="RevNumber">
 Revision number of the water chiller process to load.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.#ctor(System.String,System.String,System.String,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>
 Constructs a new water chiller process with the specified name.
 Generates a new ID.
 </summary>
 <param name="name">
 Name of the process.
 </param>
 <param name="createdBy">
 Username of the person who created the process.
 </param>
 <param name="password">
 Password of the person who created the process.
 </param>
 <param name="parent">
 Parent project manager that process should be included in.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.#ctor(System.String,RAE.RAESolutions.Business.Entities.item_id)">
 <summary>
 Constructs a new water chiller process with the specified name.
 Used when making a clone.
 </summary>
 <param name="name">
 Name of process.
 </param>
 <param name="id">
 ID of process.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.Load">
 <summary>
 Loads water chiller process based on ID. 
 ID must be set before calling this method.
 (Optionally revision can be set to pull specific revision.)
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.WCChillerProcessItem.initialize">
 <summary>
 Initializes objects. Prevents NullReference.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.chiller_specifications.Capacity">
 <summary>Total capacity from all circuits</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.CommentList">
 <summary>
 List of comments
 </summary>
 <remarks>
 Adds cloning and equality functionality
 </remarks>
 <history by="Casey Joyce" finish="2006/05/05">
 Created. Methods: Clone(), Equals(other).
 </history>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CommentList.Clone">
 <summary>
 Clones comments
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CommentList.Equals(RAE.RAESolutions.Business.Entities.CommentList)">
 <summary>
 Determines whether comment lists are equal.
 </summary>
 <param name="other">The other comment list to compare.</param>
 <returns>
 True if each comment in both lists are equal; false if all comments are not equal
 </returns>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserSpecifications.AmbientTemp">
 <summary>
 AmbientTemp
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserSpecifications.Refrigerant">
 <summary>
 Refrigerant
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserSpecifications.TotalHeatRejection1">
 <summary>
 Total Heat Rejection in circuit 1
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserSpecifications.TotalHeatRejection2">
 <summary>
 Total heat rejection in circuit 2
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserSpecifications.TotalHeatRejection3">
 <summary>
 Total heat rejection in circuit 3
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserSpecifications.TotalHeatRejection4">
 <summary>
 Total heat rejection in circuit 4
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserSpecifications.TempDifference">
 <summary>
 TempDifference
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserSpecifications.Fpi">
 <summary>
 Fpi
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CondenserSpecifications.SubCooling">
 <summary>
 SubCooling
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.ContactList">
 <summary>
 List of contacts
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ContactList.Representative">
 <summary>
 Returns first representative found in contact list.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ContactList.Architect">
 <summary>
 First architect in contact list
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ContactList.Engineer">
 <summary>
 First engineer in contact list
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ContactList.Contractor">
 <summary>
 First contractor in contact list
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ContactList.Clone">
 <summary>
 Clones contact list
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ContactList.Equals(RAE.RAESolutions.Business.Entities.ContactList)">
 <summary>
 Compares contact list
 </summary>
 <param name="other">
 Other contact list to compare
 </param>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.ContactNumList">
 <summary>
 Contact number list
 </summary>
 <history by="Casey Joyce" finish="2006/05/07" hours="1">
 Created
 </history>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ContactNumList.Equals(RAE.RAESolutions.Business.Entities.ContactNumList)">
 <summary>
 Checks equality of contact number lists
 </summary>
 <param name="other">
 Other contact number list to compare
 </param>
 <returns>
 True if contact number lists are equal; else false.
 </returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ContactNumList.Clone">
 <summary>
 Clones contact number list
 </summary>
 <returns>
 Clone of contact number list
 </returns>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.ProductCoolerSpecifications">
 <summary>
 Product cooler specifications.
 </summary>
 <history by="Casey" finish="2006/05/14">
 Created
 </history>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProductCoolerSpecifications.Capacity">
 <summary>
 Capacity
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProductCoolerSpecifications.EvaporatorTemp">
 <summary>
 EvaporatorTemp
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProductCoolerSpecifications.BoxTemp">
 <summary>
 BoxTemp
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProductCoolerSpecifications.TempDifference">
 <summary>
 TD
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProductCoolerSpecifications.CondensingTemp">
 <summary>
 CondensingTemp
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProductCoolerSpecifications.LiquidTemp">
 <summary>
 LiquidTemp
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProductCoolerSpecifications.Refrigerant">
 <summary>
 Refrigerant
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProductCoolerSpecifications.#ctor">
 <summary>
 Constructs
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProductCoolerSpecifications.Copy(RAE.RAESolutions.Business.Entities.ProductCoolerSpecifications)">
 <summary>
 Copies another product cooler.
 </summary>
 <param name="other"></param>
 <remarks></remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProductCoolerSpecifications.Clone">
 <summary>
 Clones this product cooler.
 </summary>
 <returns>
 Clone of product cooler.
 </returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProductCoolerSpecifications.Equals(RAE.RAESolutions.Business.Entities.ProductCoolerSpecifications)">
 <summary>
 Compares product coolers.
 </summary>
 <param name="other"></param>
 <returns></returns>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.FluidCoolerSpecifications">
 <summary>
 Specifications for fluid cooler.
 </summary>
 <history by="Casey" finish="2006/05/14">
 Created
 </history>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.FluidCoolerSpecifications.Capacity">
 <summary>
 Capacity
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.FluidCoolerSpecifications.AmbientTemp">
 <summary>
 AmbientTemp
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.FluidCoolerSpecifications.EnteringFluidTemp">
 <summary>
 EnteringFluidTemp
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.FluidCoolerSpecifications.LeavingFluidTemp">
 <summary>
 LeavingFluidTemp
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.FluidCoolerSpecifications.Fluid">
 <summary>
 Fluid
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.FluidCoolerSpecifications.GlycolPercent">
 <summary>
 GlycolPercent
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.FluidCoolerSpecifications.Flow">
 <summary>
 Flow
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.FluidCoolerSpecifications.#ctor">
 <summary>
 Constructs
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.FluidCoolerSpecifications.Clone">
 <summary>
 Clones fluid cooler specifications.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.FluidCoolerSpecifications.Equals(RAE.RAESolutions.Business.Entities.FluidCoolerSpecifications)">
 <summary>
 Compares fluid coolers.
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.project_manager">
 <summary>Project manager provides access to items in project.</summary>
</member>
<member name="E:RAE.RAESolutions.Business.Entities.project_manager.EquipmentAdded">
 <summary>Event raised when equipment is added to project.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.project_manager.m_equipmentItems_ItemAdded(rae.collections.EventfulList{RAE.RAESolutions.Business.Entities.EquipmentItem},rae.collections.ListItemAddedEventArgs)">
 <summary>
 Handles item add to equipment list. 
 Raises project's <see cref="E:RAE.RAESolutions.Business.Entities.project_manager.EquipmentAdded"/> event, so that other objects can subscribe to it.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.project_manager.Equipment">
 <summary>List of equipment items</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.project_manager.Processes">
 <summary>List of process items</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.project_manager.BoxLoads">
 <summary>List of box loads</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.project_manager.#ctor">
 <summary>Parameterless constructor for serialization purposes only... DO NOT USE</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.project_manager.#ctor(System.String,System.String)">
 <summary>Constructs project with temporary name that is not saved.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.project_manager.#ctor(RAE.RAESolutions.Business.Entities.item_id)">
 <summary>Constructs project with specified ID.</summary>
 <param name="projectId">Project ID</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.project_manager.#ctor(RAE.RAESolutions.Business.Entities.ProjectItem)">
 <summary>Constructs project manager for the specified project.</summary>
 <param name="project">Project to construct project manager for.</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.project_manager.#ctor(System.String,System.String,System.String)">
 <summary>
 Constructs new project manager and a project.
 </summary>
 <param name="name">
 Name of project
 </param>
 <param name="author">Author</param>
 <param name="password">Password</param>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProjectPricing.NetPrice">
 <summary>
 NetPrice
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProjectPricing.NetIncome">
 <summary>
 NetIncome
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProjectPricing.TotalFreight">
 <summary>
 TotalFreight
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProjectPricing.TotalStartUp">
 <summary>
 TotalStartUp
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProjectPricing.TotalWarranty">
 <summary>
 TotalWarranty
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProjectPricing.TotalInvoice">
 <summary>
 TotalInvoice
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProjectPricing.TotalCommission">
 <summary>
 TotalCommission
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProjectPricing.TaxStatus">
 <summary>
 TaxStatus
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProjectPricing.TaxEmemptNum">
 <summary>
 TaxEmemptNum
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.VoltageRating">
 <summary>
 Voltage rating, voltage/phase/hertz.
 </summary>
 <remarks>
 The public properties are constructed on their first Get. 
 In order to prevent NullReferenceExceptions, use public properties to get and set values not private members.
 
 List of likely values.
 ------------------
 Volts  Phase Hertz
 ------------------
 460    3     60
 230    1     50
 208
 </remarks>
 <history by="Casey Joyce" finish="2006/05/02" hours="3">
 Modified: nullable properties, new format [voltage], update other member accordingly, pass 14/14 tests
 </history>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.VoltageRating.Voltage">
 <summary>
 Voltage
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.VoltageRating.Phase">
 <summary>
 Phase
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.VoltageRating.Hertz">
 <summary>
 Hertz
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.VoltageRating.#ctor">
 <summary>
 Parameterless constructor
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.VoltageRating.#ctor(System.Int32,System.Int32,System.Int32)">
 <summary>
 Constructs voltage rating using the voltage, phase and hertz parameters.
 </summary>
 <param name="voltage">Voltage (ex. 460, 230, 208)</param>
 <param name="phase">Phase (ex. 1, 3)</param>
 <param name="hertz">Hertz (ex. 50, 60)</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.VoltageRating.#ctor(System.String)">
 <summary>
 Constructs voltage rating by parsing voltage rating text. Format: '[voltage]/[phase]/[hertz]'.
 </summary>
 <param name="voltageRating">
 Voltage rating text. Format: '[voltage]/[phase]/[hertz]'. Ex. 460/3/60.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.VoltageRating.ToString">
 <summary>
 Represents voltage rating as a string. Format: '[voltage]/[phase]/[hertz]' -or- '[voltage]'. Ex. '460/3/60' or '460'.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.VoltageRating.Parse(System.String)">
 <summary>
 Parses voltage, phase and hertz from voltage rating.
 </summary>
 <param name="voltageRating">
 Voltage rating. Format: '[voltage]/[phase]/[hertz]'. Ex. 460/3/60. -or- '[voltage]'. Ex. 460
 </param>
 <exception cref="T:System.FormatException">
 Thrown when voltage rating is not in parsable format.
 </exception>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.VoltageRating.Equals(RAE.RAESolutions.Business.Entities.VoltageRating)">
 <summary>
 Indicates whether this voltage rating equals another voltage rating
 </summary>
 <param name="other">The other voltage rating to compare with</param>
 <returns>
 True if voltage ratings are equal, false if they are not equal.
 </returns>
 <remarks>
 Voltage ratings are equal, if the voltage, hertz and phase properties are equal.
 </remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.VoltageRating.Clone">
 <summary>
 Clones voltage rating.
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.Address">
 <summary>
 Address
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Address.ToString">
 <summary>Formats address as it would be printed on an envelope.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Address.Clone">
 <summary>
 Clones address.
 </summary>
 <returns>
 Clone of address.
 </returns>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Company.Id">
 <summary>
 Id
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Company.CustomerNum">
 <summary>
 Customer number.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Company.RepNum">
 <summary>
 RepNum
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Company.Role">
 <summary>
 Description
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Company.Profile">
 <summary>
 Company profile as text description.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Company.OriginalState">
 <summary>
 Original state of company after last load or save.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Company.StateChanged">
 <summary>
 Determines whether state has changed since original state.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Company.GetContactsByCompanyId(System.Boolean)">
 <summary>
 Gets list of contacts with company ID.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Company.GetContactsByCustomerNum(System.Boolean)">
 <summary>
 Gets list of contacts with customer number.
 </summary>
 <param name="refresh">
 When true refreshes list of contacts; when false uses existing list.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Company.#ctor">
 <summary>
 Constructs
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Company.Load">
 <summary>
 Loads company from data source. Requires Id.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Company.Save">
 <summary>
 Saves company.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Company.Clone">
 <summary>Clones company</summary>
 <returns>Company clone as Object</returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Company.Copy(RAE.RAESolutions.Business.Entities.Company)">
 <summary>
 Copies another company
 </summary>
 <param name="other">
 Other company to copy
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Company.ToString">
 <summary>Company name</summary>
 <returns>Company name</returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Company.Equals(RAE.RAESolutions.Business.Entities.Company)">
 <summary>
 Indicates whether companies are equal.
 </summary>
 <param name="other">
 Other company to compare equality with.
 </param>
 <returns>
 True if companies are equal; else false.
 </returns>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.CompanyContact">
 <summary>Contact associated with a company.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CompanyContact.Company">
 <summary>Contact's company.</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.Contact">
 <summary>
 Contact info
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.Contact.Roles">
 <summary>
 List of the contact roles
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Contact.Id">
 <summary>
 Id
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Contact.CustomerNum">
 <summary>
 Customer number
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Contact.RepNum">
 <summary>
 Representative number
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Contact.Name">
 <summary>
 Contact's name can contain first, middle and last name and courtesy title.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Contact.Role">
 <summary>
 Contact's role indicates their responsibilities in the process (ex. Employee, Rep, etc.).
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Contact.Address">
 <summary>
 Mailing address associated with the contact.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Contact.Email">
 <summary>
 Email address
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Contact.PhoneNum">
 <summary>
 Phone number
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Contact.FaxNum">
 <summary>
 Fax number
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Contact.Company">
 <summary>
 Company
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Contact.Profile">
 <summary>
 Profile of contact. Text description of contact.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Contact.OriginalState">
 <summary>
 Original state of contact after last load or save.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Contact.StateChanged">
 <summary>
 Determines whether contact info has changed.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Contact.#ctor">
 <summary>
 Initializes new instance of contact
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Contact.Load">
 <summary>
 Loads contact from data source. Requires contact ID.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Contact.Save">
 <summary>
 Saves contact to data source.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Contact.Clone">
 <summary>
 Clones contact
 </summary>
 <returns>
 Clone of contact.
 </returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Contact.Copy(RAE.RAESolutions.Business.Entities.Contact)">
 <summary>
 Copies another contact.
 </summary>
 <param name="other">
 Other contact to copy.
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Contact.Equals(RAE.RAESolutions.Business.Entities.Contact)">
 <summary>
 Compares equality of contacts.
 </summary>
 <param name="other">
 Other contact to compare equality with.
 </param>
 <returns>
 True if contacts are equal; else false.
 </returns>
 <remarks></remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Contact.ToString">
 <summary>
 Contact's last name, comma and then first name.
 </summary>
 <returns>
 Contact's last name, comma and then first name.
 </returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Contact.getTextProfile">
 <summary>
 Gets contact's profile as text
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.DeficientContact.Clone">
 <summary>
 Clones contact.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.DeficientContact.Equals(RAE.RAESolutions.Business.Entities.DeficientContact)">
 <summary>
 Compares equality of contacts.
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.Email">
 <summary>
 Email address
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Email.Address">
 <summary>Full email address (i.e. username@domain.ext)</summary>
 <remarks>Example: casey@rae.com</remarks>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Email.Username">
 <summary>Email's username</summary>
 <remarks>Example: casey</remarks>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Email.Domain">
 <summary>Email's domain</summary>
 <remarks>Example: rae</remarks>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Email.Extension">
 <summary>Email's domain extension</summary>
 <remarks>Example: com</remarks>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Email.IsValid">
 <summary>Determines whether email address is valid.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Email.AddressExists">
 <summary>Determines whether email address exists (is set).</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Email.IndexOfAt">
 <summary>Index of first "@" character.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Email.IndexOfLastDot">
 <summary>Index of last "." character.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Email.#ctor">
 <summary>Constructs email.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Email.#ctor(System.String)">
 <summary>Constructs email with address</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Email.Clone">
 <summary>Deeply clones email; both instances have their own references
 </summary>
 <history>Created on 11/18/2005 by Casey Joyce
 </history>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Email.ToString">
 <summary>Returns email address</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Email.IsEmailValid(System.String)">
 <summary>Verifies email's syntax is valid</summary>
 <remarks>From CodeProject.com (link: http://www.codeproject.com/aspnet/Valid_Email_Addresses.asp)</remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Email.Equals(RAE.RAESolutions.Business.Entities.Email)">
 <summary>Determines whether the emails are equal.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Fan.#ctor(System.String,System.Double,System.Double,System.Double,System.Boolean,System.Int32,System.Boolean)">
 <summary>Constructs new fan and builds description (description will show hertz)</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Fan.ToString">
 <summary>Returns description of fan</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.Name">
 <summary>The class represents a name which may include title, first, middle and last names.
 </summary>
 <remarks>The represented name is available in different formats (i.e. full name, last then first name, etc.).
 </remarks>
 <history>[CASEYJ]	10/18/2005	Created
 </history>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Name.FirstName">
 <summary>
 First name
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Name.MiddleName">
 <summary>
 Middle name
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Name.LastName">
 <summary>
 Last name
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Name.Title">
 <summary>
 Person's courtesy title that distinguishes their sex and possibly marriage status.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Name.FullName">
 <summary>Gets string with title then first then middle then last name; each seperated by a space.
 Or sets title, first name, middle name and last name (expected format: Title First Middle Last)</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Name.FirstThenLastName">
 <summary>Gets string with first name then last name seperated by a space.</summary>
 <remarks>Middle name is not included, even if it exists.</remarks>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Name.LastThenFirstName">
 <summary>Gets string with last name then first name seperated by a comma and a space.</summary>
 <remarks>Middle name is not included, even if it exists.</remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Name.#ctor">
 <summary>
 Initializes a new instance of name.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Name.Clone">
 <summary>
 Deeply clones name; cloned name owns its own reference
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.Name.ToStringSignature">
 <summary>
 Delegate (method signature) for ToString() method.
 </summary>
</member>
<member name="F:RAE.RAESolutions.Business.Entities.Name.ToStringPointer">
 <summary>
 This delegate determines what is returned by the ToString() method.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Name.ToString">
 <summary>
 Gets string representation of name which by default is last then first name.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Name.Equals(System.Object)">
 <summary>Compares names</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Name.getFullName">
 <summary>Gets string with title then first then middle then last name;
 each seperated by a space.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Name.getFirstThenLastName">
 <summary>Gets string with first name then last name seperated by a space.</summary>
 <remarks>Middle name is not included, even if it exists.</remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Name.getLastThenFirstName">
 <summary>Gets string with last name then first name seperated by a comma and a space.
 </summary>
 <remarks>Middle name is not included, even if it exists.</remarks>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.CommonSpecifications">
 <summary>
 Contains specification fields that are common to all equipment
 </summary>
 <history by="Casey Joyce" finish="2006/05/02">
 Modify: Change Double types to NullableValue(Of Double) to retrieve nulls from db
 </history>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CommonSpecifications.Length">
 <summary>
 Length of equipment in inches
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CommonSpecifications.Width">
 <summary>
 Width of equipment in inches
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CommonSpecifications.Height">
 <summary>
 Height of equipment in inches
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CommonSpecifications.ShippingWeight">
 <summary>
 Total weight of equipment and everything that is shipped with it
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CommonSpecifications.OperatingWeight">
 <summary>
 Weight of equipment when it is operating
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CommonSpecifications.UnitVoltage">
 <summary>
 Unit voltage rating
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CommonSpecifications.ControlVoltage">
 <summary>
 Control voltage rating
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CommonSpecifications.Mca">
 <summary>
 MCA (Minimum Circuit Ampacity)
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CommonSpecifications.Rla">
 <summary>
 RLA (Run Load Amperes)
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CommonSpecifications.MOP">
 <summary>
 MOP (Max Fuze Size)
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CommonSpecifications.powerFeeds">
 <summary>
 circuitFeeds
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.CommonSpecifications.Altitude">
 <summary>
 Altitude in feet
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CommonSpecifications.Equals(RAE.RAESolutions.Business.Entities.CommonSpecifications)">
 <summary>
 Indicates whether common specifications are equal
 </summary>
 <param name="other">Other common specifications to compare equality with</param>
 <returns>
 True if specifications are equal; false if they are NOT equal
 </returns>
 <remarks>
 All properties must be equal for specifications to be equal.
 </remarks>
 <history by="Casey Joyce" finish="2006/05/02">
 Modifiy for nullable types
 </history>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.CommonSpecifications.Clone">
 <summary>
 Clones common specifications.
 </summary>
 <returns>
 Clone of common specifications.
 </returns>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.Painter">
 <summary>Supplies information about painting such as cost, weight and hours of labor
 </summary>
 <remarks>
 One gallon of paint covers 200ft^2. 
 Each gallon takes one hour to apply; this was specified by Jay Kindle.
 </remarks>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Painter.Area">
 <summary>Area to paint in square feet</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Painter.ScrapPercentage">
 <summary>Percentage of area to paint to increase area by in order to account for scrap</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Painter.IncludeScrap">
 <summary>Determines whether scrap percentage is factored into total cost</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Painter.HoursToPaint">
 <summary>Number of hours required to paint the area</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Painter.Weight">
 <summary>The weight of the paint required to paint the area</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Painter.TotalCost">
 <summary>The total cost to paint the area</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Painter.Gallons">
 <summary>Number of gallons required to paint area</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Painter.CostOfPaint">
 <summary>Cost of the paint required to paint the area</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Painter.CostOfLabor">
 <summary>Cost of the labor required to paint the area</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Painter.#ctor(System.Double)">
 <summary>Constructs painter object and calculates and sets properties.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Painter.CalculateCost">
 <summary>Calculates cost to paint area and sets properties
 </summary>
 <returns>Cost to paint area including materials and labor
 </returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Painter.CalculateCost(System.Double)">
 <summary>Calculates cost to paint area specified; also sets properties</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Painter.CalculateHoursToPaint(System.Double)">
 <summary>Calculates number of hours required to use number of gallons specified
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Painter.CalculateGallons(System.Double)">
 <summary>Calculates number of gallons required to paint area
 </summary>
 <param name="area">Area to paint in feet squared
 </param>
 <returns>Number of gallons required to paint area
 </returns>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.ContactNum">
 <history>Implement IDeepCloneable on 11/18/2005</history>
 <history by="Casey Joyce" finish="2006/05/07">
 Modify:
 Replace IDeepCloneable w/ ICloneable(Of ContactNum)
 Replace override Equals w/ IEquatable(Of ContactNum)
 </history>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ContactNum.Description">
 <summary>
 Description
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ContactNum.Clone">
 <summary>
 Clones contact number.
 </summary>
 <returns>Contact number</returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ContactNum.Equals(RAE.RAESolutions.Business.Entities.ContactNum)">
 <summary>Determines whether phone numbers are equal</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ContactNum.ToString">
 <summary>Formats phone number, example: (918) 555-5555 ext 1234).</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.MetaData">
 <summary>
 Metadata
 </summary>
 <remarks>
 Can be used as a property in a class to help describe itself and its history
 </remarks>
 <history start="2006/05/04" by="Casey Joyce">
 Created
 </history>
</member>
<member name="E:RAE.RAESolutions.Business.Entities.MetaData.Changed">
 <summary>
 Occurs after/before ...
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.MetaData.OnChanged(System.EventArgs)">
 <summary>
 Raises <see cref="E:RAE.RAESolutions.Business.Entities.MetaData.Changed" /> event.
 </summary>
 <param name="e">
 Event arguments to pass in event.
 Use System.EventArgs.Empty if no data is being passed.
 </param>
 <remarks>
 Use this method to raise event rather than raising event directly.
 Protected - Prevents other classes from raising event
 Overridable - Allows derived classes to override implementation.
 </remarks>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.MetaData.Name">
 <summary>
 Name of data that metadata is describing
 </summary>
 <history by="Casey Joyce" start="2006/04/06" finish="2006/04/06" hours="0">
 Added
 </history>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.MetaData.Description">
 <summary>
 Description of data
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.MetaData.Comments">
 <summary>
 List of comments concerning data
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.MetaData.Author">
 <summary>
 Author of data
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.MetaData.DateCreated">
 <summary>
 Date data was created
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.MetaData.#ctor">
 <summary>
 Constructor
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.MetaData.#ctor(System.String,System.String,System.String)">
 <summary>
 Constructor for new metadata
 </summary>
 <param name="name">
 Name of data
 </param>
 <param name="author">
 Author of data
 </param>
 <param name="description">
 Description of data
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.MetaData.#ctor(System.String,System.String,System.String,System.DateTime,RAE.RAESolutions.Business.Entities.CommentList)">
 <summary>
 Constructor that populates metadata
 </summary>
 <param name="description">Description</param>
 <param name="author">Name of creator</param>
 <param name="dateCreated">Date of creation</param>
 <param name="comments">Comments</param>
 <remarks>
 If comments or modifications parameters are null, they are constructed before setting properties to prevent nulls.
 </remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.MetaData.Equals(RAE.RAESolutions.Business.Entities.MetaData)">
 <summary>
 Determines whether metadata is equal
 </summary>
 <param name="other">The other metadata to compare equality</param>
 <returns>
 True if meta data is equal, false if metadata is NOT equal
 </returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.MetaData.Clone">
 <summary>
 Clones metadata; clone has its own memory reference.
 </summary>
 <returns>
 Clone of this metadata.
 </returns>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.Comment">
 <summary>
 Comment that has reference to its parent comment and to any replies
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Comment.Id">
 <summary>
 Unique identifier
 </summary>
 <remarks>
 Could have id assigned by database, if persisted.
 </remarks>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Comment.DateCreated">
 <summary>
 Date comment was created
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Comment.Text">
 <summary>
 Text of comment
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Comment.Author">
 <summary>
 Author of comment
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Comment.Subject">
 <summary>
 Subject or heading of comment
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Comment.Parent">
 <summary>
 List of comments containing this comment
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Comment.Importance">
 <summary>
 <see cref="P:RAE.RAESolutions.Business.Entities.Comment.Importance" /> level of comment, default is Regular
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Comment.Access">
 <summary>
 Access level of comment. Default is Public.
 </summary>
 <remarks>
 Private can be used to hide comments from other users.
 Public can be used to allow all users to view comment.
 </remarks>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.Comment.Replies">
 <summary>
 Other comments that are replies to this comment
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Comment.#ctor">
 <summary>
 Constructor
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Comment.#ctor(System.String,System.String)">
 <summary>
 Constructor that sets author and text
 </summary>
 <param name="author">Author of comment</param>
 <param name="text">Text of comment</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Comment.#ctor(System.String,System.String,System.String)">
 <summary>
 Constructor that sets author, subject and text
 </summary>
 <param name="author">Author of comment</param>
 <param name="subject">Subject of comment</param>
 <param name="text">Text of comment</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Comment.Clone">
 <summary>
 Clones comment; the returned clone has its own memory reference
 </summary>
 <returns>Clone of this comment</returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Comment.Equals(RAE.RAESolutions.Business.Entities.Comment)">
 <summary>
 Determines whether the comments properties are equal
 </summary>
 <param name="other">The other comment to compare</param>
 <returns>True if comments are equal; false if they are NOT equal</returns>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.Comment.ToString">
 <summary>
 Text of comment
 </summary>
 <returns>
 Text of comment
 </returns>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.MultiplierCode">
 <summary>
 Multiplier code contains a multiplier and commission along 
 with assignment details.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.MultiplierCode.#ctor(System.String)">
 <summary>
 Initializes a multiplier code from an assigned multiplier code.
 Interprets details from code.
 </summary>
 <param name="code">
 Assigned multiplier code
 </param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.MultiplierCode.#ctor(System.String,System.String,System.DateTime,System.Double,System.Double)">
 <summary>
 Initializes a new multiplier code to be assigned.   
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.MultiplierCode.AssignedBy">
 <summary>
 Username of person who assigned this multiplier code.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.MultiplierCode.AssignedTo">
 <summary>
 Username of person who was assigned this multiplier code.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.MultiplierCode.AssignedOn">
 <summary>
 Date multiplier code was assigned
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.MultiplierCode.Multiplier">
 <summary>
 Multiplier
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.MultiplierCode.Commission">
 <summary>
 Commission
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.MultiplierCode.Code">
 <summary>
 Multiplier code
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.MultiplierCode.IsExpired(System.DateTime)">
 <summary>
 Checks if multiplier code is expired.
 Multiplier must be applied on the same date it is assigned.   
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.MultiplierCode.ToString">
 <summary>
 Gets decrypted code
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.MultiplierCode.Equals(RAE.RAESolutions.Business.Entities.MultiplierCode)">
 <summary>
 Compares multiplier codes; true if they're equal
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.MultiplierCode.generateCode">
 <summary>
 Generates a code based on values passed into constructor.
 </summary>
</member>
<member name="E:RAE.RAESolutions.Business.Entities.ProjectItem.Loaded">
 <summary>
 Occurs after/before ...
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProjectItem.OnLoaded(System.EventArgs)">
 <summary>
 Raises <see cref="E:RAE.RAESolutions.Business.Entities.ProjectItem.Loaded" /> event.
 </summary>
 <param name="e">
 Event arguments to pass in event.
 Use System.EventArgs.Empty if no data is being passed.
 </param>
 <remarks>
 Use this method to raise event rather than raising event directly.
 Protected - Prevents other classes from raising event
 Overridable - Allows derived classes to override implementation.
 </remarks>
</member>
<member name="E:RAE.RAESolutions.Business.Entities.ProjectItem.Removed">
 <summary>
 Occurs after/before ...
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProjectItem.OnRemoved">
 <summary>
 Raises <see cref="E:RAE.RAESolutions.Business.Entities.ProjectItem.Removed" /> event.
 </summary>
 <remarks>
 Use this method to raise event rather than raising event directly.
 Protected - Prevents other classes from raising event
 Overridable - Allows derived classes to override implementation.
 </remarks>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProjectItem.Contacts">
 <summary>List of contacts in project</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProjectItem.ReleaseNum">
 <summary>HR or PR number</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ProjectItem.ReleaseStatus">
 <summary>Type of order release (HR or PR)</summary>
</member>
<member name="F:RAE.RAESolutions.Business.Entities.ProjectItem.m_CheckedOutBy">
 <summary>Project currently checked out by (String - Name)</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProjectItem.#ctor(System.String,System.String,System.String)">
 <summary>Constructs a new project with a new ID.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProjectItem.#ctor(RAE.RAESolutions.Business.Entities.item_id)">
 <summary>
 Constructs a project that sets an existing ID. The date is set to the original date.
 </summary>
 <param name="id">Project ID.</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProjectItem.#ctor(RAE.RAESolutions.Business.Entities.item_id,System.Boolean)">
 <summary>Constructs a project that loads existing data for the ID</summary>
 <param name="id">ID of project to load.</param>
 <param name="shouldLoad">True to load project data; false to not load data.</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProjectItem.Load">
 <summary>Loads project with ID.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProjectItem.Save">
 <summary>Saves project with ID.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ProjectItem.Remove">
 <summary>
 Removes project item and all associated equipment and processes.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.equipment_pricing.list_price">
 <summary>List price for one unit (includes options)</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.equipment_pricing.others">
 <summary>List of other prices (value) and their description (key)</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.ItemBase">
 <summary>Base class that items should inherit from</summary>
 <remarks>Its recommended that inheriters implement IEquatable(Of T) and ICloneable(Of T).</remarks>
</member>
<member name="E:RAE.RAESolutions.Business.Entities.ItemBase.NameChanged">
 <summary>Occurs after item's name is changed</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ItemBase.onNameChanged">
 <summary>Raises <see cref="E:RAE.RAESolutions.Business.Entities.ItemBase.NameChanged" /> event.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ItemBase.id">
 <summary>Unique identifier. When set the metadata author and date created set.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ItemBase.name">
 <summary>Item name. Raises NameChanged event when set. Also sets MetaData Name when set.</summary>
 <remarks>Raises NameChanged event when set. Also sets MetaData Name when set.</remarks>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ItemBase.metadata">
 <summary>Metadata (data describing data) for item</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.ItemBase.ProjectManager">
 <summary>Project manager of project item is in.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ItemBase.Load">
 <summary>Method to load item</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ItemBase.Save">
 <summary>Method to save item</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.ItemBase.initialize">
 <summary>Inheritors should call this method in their constructor.</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Entities.item_id">
 <summary>Id that uniquely identifies item.</summary>
 <remarks>
 <para>Format: [username]+[password]+[dateGenerated]</para>
 <para>Example: "MyUsername+MyPassword+20060407092732"</para>
 <para>
 Pass constructor username and password to generate a new ID.
 This is useful for generating a unique ID for new items.
 </para>
 <para>
 Pass constructor an existing ID to parse username, password and date generated.
 This is useful if loading an existing item.
 </para>
 <para>
 Use <see cref="!:ItemId.Id"/> to get the full ID. It will contain the user's password as plain text.
 In situations where exposing the user's password is inappropriate use <see cref="!:ItemId.SafeId"/>
 </para>
 </remarks>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.item_id.Id">
 <summary>Item ID. Format: [username]+[password]+[dateGenerated]</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.item_id.DateGenerated">
 <summary>Date ID was generated</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.item_id.SafeId">
 <summary>
 View of ID that does not expose password/customer number. 
 Format: [username]+[dateGenerated].
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Entities.item_id.dateGeneratedAsString">
 <summary>
 Date ID was generated formatted as a string. 
 Format: [year][month][day][hour][minutes][seconds] ("yyyyMMddhhmmss").
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.item_id.#ctor">
 <summary>Parameterless constructor for serialization purposes only... DO NOT USE</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.item_id.#ctor(System.String,System.String)">
 <summary>Generates new item ID</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.item_id.#ctor(System.String)">
 <summary>Copies an existing ID. Constructs item ID by parsing the existing ID.</summary>
 <param name="id">Item ID as string</param>
 <exception cref="T:System.ArgumentNullException">
 Thrown when id parameter is null.
 </exception>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.item_id.ToString">
 <summary>Item ID</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.item_id.Equals(RAE.RAESolutions.Business.Entities.item_id)">
 <summary>Indicates whether item IDs are equal</summary>
 <param name="other">The other item id to compare equality with</param>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.item_id.DatesAreEqual(System.DateTime,System.DateTime)">
 <summary>
 Compares dates using <see cref="T:Microsoft.VisualBasic.DateFormat"/>. 
 Ignores milliseconds. (There is no formatting support for milliseconds).
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Entities.item_id.parse(System.String)">
 <summary>Parses item ID</summary>
 <param name="id">Item ID with this format: [username]+[password]+[dateGenerated]</param>
 <exception cref="T:System.ArgumentException">
 Thrown when id parameter's format is invalid.
 </exception>
</member>
<member name="T:RAE.RAESolutions.Business.FinMaterial">
 <summary>
 Fin material
 </summary>
 <history>
 Created
 </history>
</member>
<member name="T:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants">
 <summary>
 Constants used by air handler. Will need to be updated periodically.
 </summary>
 <history by="Casey Joyce" start="2006/05/24" finish="2006/05/25" hours="6">
 Created, encapsulated air handler constants into this class.
 </history>
</member>
<member name="T:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.DatabaseMultipliers">
 <summary>
 Database multipliers used to secure pricing in databases.
 </summary>
 <remarks>
 Prices in database are multiplied these multipliers.
 So divide by these multipliers to get true price.
 </remarks>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.DatabaseMultipliers.FC_FAN">
 <summary>
 Forward curved fan multiplier.
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Weights">
 <summary>
 Costs and weights of air handler materials.
 </summary>
 <remarks>
 weights are in #/ft^2
 </remarks>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Weights.DOOR_WEIGHT">
 <summary>
 Weight of door hardware.
 </summary>
 <history by="Casey Joyce" finish="2006/08/04">
 Updated from 20 to 25
 </history>
</member>
<member name="T:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Costs">
 <summary>
 Costs included in air handler pricing.
 </summary>
 <remarks>
 costs are in cost/ft^2
 see Jay on these costs
 </remarks>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Costs.PANEL_INSULATION_COST">
 <summary>
 Panel insulation cost per square foot.
 </summary>
 <history by="Casey Joyce" finish="2006/08/04">
 Updated from 0.4 to 1.166
 </history>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Costs.FLOOR_INSULATION_COST">
 <summary>
 Floor insulation cost per square foot.
 </summary>
 <history by="Casey Joyce" finish="2006/08/04">
 Updated from 0.4 to 1.166
 </history>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Costs.PAINT_COST_PER_GALLON">
 <summary>
 Cost of paint per gallon.
 </summary>
 <history by="Casey Joyce" finish="2006/08/04">
 Updated from 30 to 35
 </history>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Costs.DOOR_COST">
 <summary>
 Cost of door.
 </summary>
 <history by="Casey Joyce" finish="2006/08/04">
 Updated from 50 to 75
 </history>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Costs.EXTERIOR_COST">
 <summary>
 Cost of exterior material, 16 gauge galvanized, per square foot.
 </summary>
 <history finish="2005/02/01">
 Updated from 0.79 to 1.18
 </history>
 <history by="Casey Joyce" finish="2006/08/04">
 Updated from 1.18 to 1.31
 </history>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Costs.INTERIOR_COST">
 <summary>
 Cost of interior material, 18 gauge galvanized, per square foot.
 </summary>
 <history finish="2005/02/01">
 Updated from 0.66 to 0.97
 </history>
 <history by="Casey Joyce" finish="2006/08/04">
 Updated from 0.97 to 1.066
 </history>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Costs.AIR_SEAL_COST">
 <summary>
 Cost of air seal, 16 gauge galvanized.
 </summary>
 <history finish="2005/02/01">
 Updated from 0.79 to 1.18
 </history>
 <history by="Casey Joyce" finish="2006/08/04">
 Updated from 1.18 to 1.71
 </history>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Costs.SHEET_METAL_FLOOR_COST">
 <summary>
 Cost of sheet metal floor, 14 gauge galvanized.
 </summary>
 <history finish="2005/02/01">
 Updated from 0.99 to 1.46
 </history>
 <history by="Casey Joyce" finish="2006/08/04">
 Updated from 1.46 to 1.61
 </history>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Costs.SHEET_METAL_BASE_COST">
 <summary>
 Cost of sheet metal base, 10 gauge galvanized.
 </summary>
 <history finish="2005/02/01">
 Updated from 1.76 to 2.74
 </history>
 <history by="Casey Joyce" finish="2006/08/04">
 Updated from 2.74 to 2.96
 </history>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Costs.STEEL_BASE_COST">
 <summary>
 Cost of steel base, C6 x 8.2 channel, per square foot.
 </summary>
 <history finish="2005/02/01">
 Updated from 1.49 to 2.99
 </history>
 <history by="Casey Joyce" finish="2006/08/04">
 Updated from 2.99 to 3.102
 </history>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Costs.STEEL_BASE_FLOOR_COST">
 <summary>
 Cost of floor with steel base, 16 gauge galvanized.
 </summary>
 <history finish="2005/02/01">
 Updated from 0.79 to 1.18.
 </history>
 <history by="Casey Joyce" finish="2006/08/04">
 Updated from 1.18 to 1.31
 </history>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Costs.STEEL_BASE_SUB_FLOOR_COST">
 <summary>
 Cost of sub floor with steel base, 20 gauge galvanized
 </summary>
 <history finish="2005/02/01">
 Updated from 0.5 to 0.75
 </history>
 <history by="Casey Joyce" finish="2006/08/04">
 Updated from 0.75 to 0.84
 </history>
</member>
<member name="P:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Costs.BlenderCost(System.String)">
 <summary>
 Cost of blender used in air handler.
 </summary>
 <remarks>
 The blender cost returned is only for one blender even if model contains multiple blenders.
 </remarks>
 <param name="model">
 Air handler model.
 </param>
</member>
<member name="T:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Multipliers">
 <summary>
 Multipliers to calculate costs.
 </summary>
 <history start="2006/05/24" hours="2">
 Created
 </history>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Multipliers.SCRAP">
 <summary>
 Percentage to add to account for scrap material.
 </summary>
 <history>
 2/1/05 - was 0.1
 </history>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Multipliers.BLENDER_MULTIPLIER">
 <summary>
 Blender markup used to calculate blender cost. 
 BlenderCost = BlenderBaseCost * BLENDER_MULTIPLIER
 </summary>
 <remarks>
 from Jay Kindle
 </remarks>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Multipliers.FILTER_MULTIPLIER">
 <summary>
 Filter multiplier used to calculate filter cost.
 FilterCost = FilterListPrice * FILTER_MULTIPLIER
 </summary>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Multipliers.VENT_PRODUCTS_CO_MULTIPLIER">
 <summary>
 Vent Products Company multiplier used when calculating damper cost.
 DamperCost = DamperCost * VENT_PRODUCTS_CO_MULTIPLIER.
 </summary>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Multipliers.STEEL_BASE_MISC_MULTIPLIER">
 <summary>
 Miscellaneous material multiplier for steel base.
 MaterialCost = MaterialCost * (1 + MiscMaterialMultiplier)
 </summary>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Multipliers.HOUSED_FAN_MULTIPLIER">
 <summary>
 Housed fan multiplier.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Multipliers.DamperMultiplier(System.Int32,System.Int32)">
 <summary>
 Damper multiplier used to calculate damper cost.
 DamperCost = DamperCost * DamperMultiplier
 </summary>
 <param name="outsideAirHeight">
 Height of outside air opening.
 </param>
 <param name="roomAirHeight">
 Height of room air opening.
 </param>
</member>
<member name="P:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.Multipliers.TubeMultiplier(System.Double)">
 <summary>
 Tube multiplier based on tube thickness used to calculate cost of tube.
 </summary>
 <param name="thickness">
 Tube thickness in inches.
 </param>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.HOURLY_WAGE">
 <summary>
 Hourly wage in dollars.
 </summary>
 <history finish="2005/02/01">
 Updated
 </history>
 <history by="Casey Joyce" finish="2006/08/04">
 Updated from 24.15 to 24.40
 </history>
</member>
<member name="F:RAE.RAESolutions.Business.Intelligence.AirHandlerConstants.COIL_HOURLY_WAGE">
 <summary>
 Hourly wage for coil labor in dollars.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.Chillers.ChillerIntel.SelectRefrigerantMultiplier(System.String)">
 <summary>Selects multiplier for refrigerant parameter</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.Chillers.ChillerIntel.AdjustCondenserCapacityForRefrigerant(System.Double,System.String)">
 <summary>Adjusts condenser capacity based on the refrigerant</summary>
 <param name="refrigerantAbbreviation">Abbreviation of refrigerant (ex. 22, 22H)</param>
</member>
<member name="T:RAE.RAESolutions.Business.Intelligence.Chillers.FreezingPoint">
 <summary>Calculates freezing temperature for a given glycol percentage and glycol type</summary>
 <remarks>All temperatures are supplied in Fahrenheit.</remarks>
 <history>[CASEYJ]	9/8/2005	Created</history>
</member>
<member name="P:RAE.RAESolutions.Business.Intelligence.Chillers.FreezingPoint.GlycolPercentageLowerBound">
 <summary>The smallest valid glycol percentage allowed</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Intelligence.Chillers.FreezingPoint.GlycolPercentageUpperBound">
 <summary>The largest valid glycol percentage allowed</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Intelligence.Chillers.FreezingPoint.FreezingPointForWater">
 <summary>Temperature in Fahrenheit at which water freezes</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Intelligence.Chillers.FreezingPoint.RecommendedMinSuctionTemperatureForWater">
 <summary>Recommended minimum suction temperature for water</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Intelligence.Chillers.FreezingPoint.Glycol">
 <summary>Glycol used in freezing point calculations</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Intelligence.Chillers.FreezingPoint.GlycolPercentage">
 <summary>Glycol percentage used in freezing point calculations</summary>
 <remarks>Example: 10 = 10% not .1 = 10%</remarks>
</member>
<member name="P:RAE.RAESolutions.Business.Intelligence.Chillers.FreezingPoint.FreezingPoint">
 <summary>The temperature in Fahrenheit at which the fluid freezes.</summary>
</member>
<member name="P:RAE.RAESolutions.Business.Intelligence.Chillers.FreezingPoint.RecommendedMinSuctionTemperature">
 <summary>The recommended minimum suction temperature (in Fahrenheit) for the fluid</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.Chillers.FreezingPoint.#ctor(RAE.Solutions.Chillers.Glycol,System.Double)">
 <summary>Constructs a freezing point object. Calculates freezing point and sets properties.</summary>
 <param name="glycol">The glycol type ex. Ethylene or Propylene</param>
 <param name="glycolPercentage">The percentage of glycol</param>
 <remarks>There is no need to call the CalculateFreezingPoint method after constructing object; 
 the method is called during construction.</remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.Chillers.FreezingPoint.IsGlycolPercentageOutsideRange(System.Double)">
 <summary>Checks if glycol percentage parameter is valid range</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.Chillers.FreezingPoint.calculate">
 <summary>Calculates freezing point in Fahrenheit</summary>
 <remarks>Retrieves freezing point from database and then interpolates.</remarks>
</member>
<member name="T:RAE.RAESolutions.Business.Intelligence.CompressorService">
 <summary>
 Compressor information services.
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Intelligence.CompressorService.Strings">
 <summary>
 Contains strings used in compressor class.
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Intelligence.CompressorService.TemperatureLimitsTransferientialData">
 <summary>
 Temperature limits that the compressor should operate within.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.CompressorService.IsCompressorSafe(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Single,System.Int32)">
 <summary>Checks compressor safety
 </summary>
 <param name="suctionTemperature">Suction temperature
 </param>
 <param name="condensingTemperature">Condensing temperature
 </param>
 <param name="evaporatingTemperature">Evaporating temperature
 </param>
 <param name="leavingTemperature">Leaving fluid temperature
 </param>
 <param name="refrigerant">Refrigerant
 </param>
 <param name="compressorModel">Compressor model
 </param>
 <param name="recommendedMinSuctionTemperature">Recommended minimum suction temperature; evaporator temperature must be 
 greater or equal to this temperature.
 </param>
 <returns>Boolean indicating compressor safety
 </returns>
 <remarks>Reads yes/no notes from database to determine compressor safety.
 Checks condensing and suction temperature are within range.
 </remarks>
 <history>[CASEYJ]	6/14/2005	Created
 </history>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.CompressorService.SetCondensingTemperatureLimits(System.Single@,System.Single@,System.Single,System.String[],System.String[])">
 <summary>Changes condensing temperature limits, if there are compressor
 safety notes
 </summary>
 <param name="suctionTemp">Suction temperature</param>
 <param name="yesNotes">Compressor safety notes</param>
 <param name="noNotes">Compressor safety notes</param>
 <param name="maxCondensingTemperature">The current max
 condensing temperature</param>
 <param name="minCondensingTemperature">The current min
 condensing temperature</param>
 <remarks>If there are no compressor safety notes, current temperature 
 limit parameters are returned.
 </remarks>
 <history>[CASEYJ]	6/15/2005	Created
 </history>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.CompressorService.GetTemperatureLimits(System.String)">
 <summary>
 Gets compressor temperature limits for the compressor associated with the compressor file name.
 </summary>
 <param name="compressorFileName">
 Compressor file name
 </param>
 <exception cref="T:System.ApplicationException">
 Thrown when compressor file name is null or empty, data access error occurs or compressor data does not exist.
 </exception>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.CompressorService.CheckCompressorTemperatureLimits(System.String,System.Double,System.Double)">
 <summary>
 Checks that suction and condensing temperatures are within compressor limits for the compressor file name.
 </summary>
 <param name="compressorFileName">
 Compressor file name to get temperature limits for
 </param>
 <param name="suctionTemperature">
 Compressor suction temperature in degrees Fahrenheit
 </param>
 <param name="condensingTemperature">
 Compressor condensing temperature in degrees Fahrenheit
 </param>
</member>
<member name="T:RAE.RAESolutions.Business.Intelligence.CompressorTemperatureLimits">
 <summary>
 Determines compressor temperature limits based on compressor file name
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Intelligence.CompressorTemperatureLimits.MaxSuctionTemperature">
 <summary>
 Maximum suction temperature in degrees Fahrenheit
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Intelligence.CompressorTemperatureLimits.MinSuctionTemperature">
 <summary>
 Minimum suction temperature in degrees Fahrenheit
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Intelligence.CompressorTemperatureLimits.MaxCondensingTemperature">
 <summary>
 Maximum condensing temperature in degrees Fahrenheit
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.Intelligence.CompressorTemperatureLimits.MinCondensingTemperature">
 <summary>
 Minimum condensing temperature in degrees Fahrenheit
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.CompressorTemperatureLimits.#ctor(System.String)">
 <summary>
 Compressor temperature limits for compressor file name
 </summary>
 <param name="compressorFileName">
 Compressor file name to get temperature limits for
 </param>
</member>
<member name="P:RAE.RAESolutions.Business.Intelligence.FanIntel.HighAltitude">
 <summary>For any altitude greater than this high altitude, a high altitude fan is recommended</summary>
 <value>The highest altitude that a high altitude fan is not recommended</value>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.FanIntel.IsHighAltitudeFan(System.String)">
 <summary>Checks if fan is a high altitude fan</summary>
 <param name="fanFileName">Fan file name of fan to check</param>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.FanIntel.SelectFanFileName(System.Single,System.Single,System.Single,System.Int32)">
 <summary>Selects fan file name for the parameters</summary>
 <param name="motorHorsepower">Horsepower of the motor</param>
 <param name="fanRPM">Fan RPMs</param>
 <param name="altitude">Altitude in feet</param>
 <param name="hertz">Hertz (Either 50 Hz or 60 Hz)</param>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.FanIntel.SelectFanWatts(System.String,System.Int32,System.Int32)">
 <summary>Accounts for voltage parameter when selecting fan</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Intelligence.PriceCalculator">
 <summary>Contains methods to calculate prices</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.PriceCalculator.CalculateTotalListPrice(System.Double,System.Double,System.Int32)">
 <summary>Calculates the total list price. Price includes all units (if multiple units) and options
 </summary>
 <remarks>Total options price per unit must be multiplied by number of units to get the total options price
 equation: (base list price + options price) x number of units
 </remarks>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.PriceCalculator.CalculateTotalBaseListPrice(System.Double,System.Int32)">
 <summary>Calculates total base list price. Price includes units but not options.</summary>
 <param name="baseListPrice">Base list price for a single unit.</param>
 <param name="numUnits">Number of units</param>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.PriceCalculator.CalculateParPrice(System.Double,System.Double)">
 <summary>Calculates PAR price. equ. total list price * PAR multiplier</summary>
 <param name="totalListPrice">Total list price. Includes all units (if multiple units) and options</param>
 <param name="parMultiplier">PAR multiplier</param>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.PriceCalculator.CalculateCommissionPrice(System.Double,System.Double)">
 <summary>Calculates commission. Equ. commission rate * PAR price</summary>
 <param name="commissionRate">Rate of commission</param>
 <param name="parPrice">PAR price</param>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.PriceCalculator.CalculateNfspPrice(System.Double,System.Double)">
 <summary>Calculates NFSP. Equ. Other + PAR</summary>
 <param name="parPrice">PAR price</param>
 <param name="otherTotalPrice">Price of warranty, freight, start up, and other costs</param>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.PriceCalculator.CalculateTotalOtherPrice(System.Double,System.Double,System.Double,System.Double)">
 <summary>
 Calculates total price of other costs such as warranty, freight, and startup
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Intelligence.UnitCooler.GetCompressorFileName(System.String)">
 <summary>Gets compressor file name for condensing unit.</summary>
 <exception cref="T:System.ApplicationException">
 Thrown when data access error occurs or condensing unit does not exist
 </exception>
</member>
<member name="T:RAE.RAESolutions.Business.CourtesyTitle">
 <summary>Person's title that distinguishes their sex and possibly marriage status.</summary>
</member>
<member name="T:RAE.RAESolutions.Business.Agents.AirHandlerDataAgent">
 <summary>
 Provides data access to air handler database.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Agents.AirHandlerDataAgent.RetrieveHours(System.String)">
 <summary>Retrieves and adjusts man hours required for air handler model.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Agents.AirHandlerDataAgent.RetrieveMotor(System.String,System.String,System.String,System.Int32)">
 <summary>Retrieves motor table
 </summary>
 <exception cref="T:System.IndexOutOfRangeException">Thrown when a motor match is not found
 </exception>
</member>
<member name="M:RAE.RAESolutions.Business.Agents.AirHandlerDataAgent.RetrieveMotors(System.String,System.String,System.String)">
 <summary>Retrieves motors
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Agents.AirHandlerDataAgent.RetrieveBidiFan(System.Double)">
 <summary>Retrieves housed BIDI fan based on size parameter</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Agents.AirHandlerDataAgent.RetrieveForwardCurvedFan(System.String)">
 <summary>Retrieves housed forward curved fan based on parameter size
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.Agents.AirHandlerDataAgent.RetrievePlenumFanPrice(System.String,System.Double,System.Double@,System.Int32@)">
 <summary>Retrieves plenum fan price; includes labor costs.</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Agents.AirHandlerDataAgent.RetrieveDuctHeaters(System.Int32,System.Double)">
 <summary>Retrieves duct heaters</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Agents.AirHandlerDataAgent.RetrieveCoilPrices(System.String,System.Int32)">
 <summary>Retrieves coil prices</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Agents.AirHandlerDataAgent.RetrieveFilters">
 <summary>Retrieves filters table</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Agents.AirHandlerDataAgent.RetrieveDamper(System.String,System.String,System.String)">
 <summary>Retrieves damper info</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Agents.AirHandlerDataAgent.RetrieveDimensions(System.String)">
 <summary>Retrieves all section dimensions</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Agents.AirHandlerDataAgent.RetrieveAirHandlers(System.Double)">
 <summary>Retrieves air handlers</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Agents.ChillerAgent.RetrieveChillerEvaporator(System.String)">
 <summary>Retrieves the chiller evaporator info for the evaporator model parameter</summary>
 <exception cref="T:System.ApplicationException">Thrown when database error occurs</exception>
</member>
<member name="M:RAE.RAESolutions.Business.Agents.Compressor.#ctor">
 <summary>Hides default constructor</summary>
</member>
<member name="M:RAE.RAESolutions.Business.Agents.Compressor.RetrieveCompressorDescriptions(System.String)">
 <summary>Retrieves compressor descriptions in addition to to other compressor info
 based on refrigerant parameter
 </summary>
 <param name="refrigerant">Compressor's refrigerant, omit R prefix (ex. 22H not R22H)</param>
 <returns>Table of compressors matching refrigerant parameter</returns>
</member>
<member name="T:RAE.RAESolutions.Business.Division">
 <summary>Division of RAE Corporation</summary>
</member>
<member name="F:RAE.RAESolutions.Business.Division.NotSet">
 <summary>No selection</summary>
</member>
<member name="F:RAE.RAESolutions.Business.Division.TSI">
 <summary>Technical Systems</summary>
</member>
<member name="F:RAE.RAESolutions.Business.Division.CRI">
 <summary>Century Refrigeration</summary>
</member>
<member name="T:RAE.RAESolutions.Business.IPersistable">
 <summary>
 Defines methods to persist and retrieve implementer's data
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.IPersistable.Save">
 <summary>When implemented, persists object data so that it can be opened later.
 </summary>
</member>
<member name="M:RAE.RAESolutions.Business.IPersistable.Load">
 <summary>When implemented, loads object data into the instance executing this method.
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.ReleaseStatus">
 <summary>
 Release status.
 </summary>
</member>
<member name="F:RAE.RAESolutions.Business.ReleaseStatus.NotSet">
 <summary>
 No selection is made
 </summary>
</member>
<member name="F:RAE.RAESolutions.Business.ReleaseStatus.HR">
 <summary>
 Hold for Release
 </summary>
</member>
<member name="F:RAE.RAESolutions.Business.ReleaseStatus.PR">
 <summary>
 Production Release
 </summary>
</member>
<member name="F:RAE.RAESolutions.Business.ReleaseStatus.Project">
 <summary>
 Project, before it becomes an HR.
 </summary>
 <remarks>
 Per Danny Groom
 </remarks>
</member>
<member name="T:RAE.RAESolutions.Business.IMetaData">
 <summary>
 Interface for metadata allowing implementer to describe itself and track its history.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.IMetaData.Name">
 <summary>
 Name data implementer is describing
 </summary>
 <history by="Casey Joyce" start="2006/04/06" finish="2006/04/06" hours="0">
 Added
 </history>
</member>
<member name="P:RAE.RAESolutions.Business.IMetaData.Description">
 <summary>
 Description of implementer
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.IMetaData.Comments">
 <summary>
 Comments concerning the implementer
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.IMetaData.Author">
 <summary>
 Who or what created implementer (ex. username or application name)
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.IMetaData.DateCreated">
 <summary>
 Date implementer was created
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.Importance">
 <summary>
 Represents importance level
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.EquipmentType">
 <summary>Equipment types</summary>
</member>
<member name="T:RAE.RAESolutions.Business.IChangeAware`1">
 <summary>
 Implements are aware of changes to their state.
 </summary>
 <history></history>
</member>
<member name="P:RAE.RAESolutions.Business.IChangeAware`1.OriginalState">
 <summary>
 The original state after last load or save.
 </summary>
</member>
<member name="P:RAE.RAESolutions.Business.IChangeAware`1.StateChanged">
 <summary>
 True if state changed from original.
 </summary>
</member>
<member name="T:RAE.RAESolutions.Business.ValidationStatus">
 <summary>
 Indicates validation status.
 </summary>
 <history by="Casey Joyce" finish="2006/07/17">
 Created
 </history>
</member>
<member name="F:RAE.RAESolutions.Business.ValidationStatus.Invalid">
 <summary>
 Invalid
 </summary>
</member>
<member name="F:RAE.RAESolutions.Business.ValidationStatus.Valid">
 <summary>
 Valid
 </summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.Tables.ChillerTable">
 <summary>Chiller equipment item table.</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.Tables.CondensingUnitTable">
 <summary>Table and column names of condensing units database table</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.Tables.FluidCoolerTable">
 <summary>
 Fluid cooler equipment item table.
 </summary>
 <history by="Casey" finish="2006/05/09">
 Created
 </history>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.Tables.EquipmentTable">
 <summary>
 Table and column names in equipment database table
 </summary>
</member>
<member name="F:RAE.RAESolutions.DataAccess.Projects.Tables.OptionsObjectTable.ID">
 <summary>List of column names (not necessarily in actual database) created from database</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.Tables.EquipmentOptionsTable">
 <summary>
 List of column and table name from database table Options
 </summary>
</member>
<member name="F:RAE.RAESolutions.DataAccess.Projects.Tables.EquipmentOptionsTable.Id">
 <summary>
 Id that is unique to a selected equipment option in a RAESolutions project.
 Id is for EquipmentOptions table in Projects database.
 </summary>
</member>
<member name="F:RAE.RAESolutions.DataAccess.Projects.Tables.EquipmentOptionsTable.PricingId">
 <summary>
 Id that is unique to an option and model number relationship and is used to determine price.
 Id is for EquipmentOptions table in EquipmentOptions database.
 </summary>
</member>
<member name="F:RAE.RAESolutions.DataAccess.Projects.Tables.EquipmentOptionsTable.EquipmentId">
 <summary>
 Relates option to a specific equipment.
 </summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.Tables.OtherEquipmentCostsTable">
 <summary>
 Other equipment costs table name and column names.
 </summary>
 <history by="Casey Joyce" finish="2006/04/26">
 Created
 </history>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.Tables.ProductCoolerTable">
 <summary>
 Product cooler table.
 </summary>
 <history by="Casey" finish="2006/05/15">
 Created
 </history>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.Tables.ProjectsTable">
 <summary>
 Table and column names in projects database table
 </summary>
 <history by="Casey Joyce" finish="2006/05/05">
 Created
 </history>
</member>
<member name="F:RAE.RAESolutions.DataAccess.Projects.Tables.ProjectsTable.PoNum">
 <summary>
 Purchase order number
 </summary>
</member>
<member name="F:RAE.RAESolutions.DataAccess.Projects.Tables.ProjectsTable.PoDate">
 <summary>
 Purchase order date
 </summary>
</member>
<member name="F:RAE.RAESolutions.DataAccess.Projects.Tables.ProjectsTable.ContactDataStructure">
 <summary>
 Indicates the kind of information stored for a contact; indicates if contact structure needs to be updated.
 </summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.Tables.UnitCoolerTable">
 <summary>
 Unit cooler pricing table.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ChillerEquipmentDa.Create(RAE.RAESolutions.Business.Entities.chiller_equipment)">
 <summary>Creates chiller equipment.</summary>
 <param name="chiller">chiller to create.</param>
 <returns>Num of rows affected.</returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ChillerEquipmentDa.Retrieve(System.String,System.Single)">
 <summary>Retrieves chiller equipment with equipment ID and revision.</summary>
 <param name="id">Equipment ID</param>
 <param name="revision">Revision number</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ChillerEquipmentDa.Update(RAE.RAESolutions.Business.Entities.chiller_equipment)">
 <summary>Updates condensing unit equipment.</summary>
 <param name="chiller">Condensing unit equipment to update.</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ChillerEquipmentDa.createChiller(System.Data.IDbConnection,System.Data.IDbTransaction,RAE.RAESolutions.Business.Entities.chiller_equipment)">
 <summary>Creates only chiller specific data (only in ChillerEquipmentItem table). Returns number of rows affected.</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ChillerEquipmentDa.retrieveChiller(System.String,System.Single)">
 <summary>Retrieves chiller info in EquipmentItems and CondensingUnitEquipmentItems tables.</summary>
 <param name="id">Equipment ID.</param>
 <returns>
 chiller equipment item info from EquipmentItems and CondensingUnitEquipmentItems tables, 
 but not OtherEquipmentPricing or Options.
 </returns>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.ChillerEquipmentDa.SqlFactory">
 <summary>SQL factory for chiller equipment item.</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CommonEquipmentDa.Exists(RAE.RAESolutions.Business.Entities.item_id,System.String)">
 <summary>
 True if equipment exists in database.
 </summary>
 <param name="id">
 Equipment ID.
 </param>
 <returns>
 True if equipment exists; else false.
 </returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CommonEquipmentDa.Exists(RAE.RAESolutions.Business.Entities.EquipmentItem,System.String)">
 <summary>
 True if equipment exists in database.
 </summary>
 <returns>
 True if equipment exists; else false.
 </returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CompaniesDa.Create(RAE.RAESolutions.Business.Entities.Company@)">
 <summary>
 Creates a company. Assigns company ID.
 </summary>
 <param name="company">
 Company to create.
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CompaniesDa.Retrieve(System.Int32)">
 <summary>
 Retrieves company with ID.
 </summary>
 <param name="id">
 Company ID.
 </param>
 <returns>
 Company with ID.
 </returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CompaniesDa.Update(RAE.RAESolutions.Business.Entities.Company)">
 <summary>
 Updates company.
 </summary>
 <param name="company">
 Company to update.
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CompaniesDa.Exists(System.Int32)">
 <summary>
 Determines whether company exists in data source.
 </summary>
 <param name="id">
 Company ID to look for.
 </param>
 <returns>
 True if company exists in data source; else false.
 </returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CompaniesDa.RetrieveByDescription(System.String)">
 <summary>
 Retrieves all companies with the same description (ex. Reps).
 </summary>
 <param name="description">
 Description of company (ex. Rep).</param>
 <returns>
 List of companies with the description.
 </returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CompaniesDa.Read(System.Data.IDataReader)">
 <summary>
 Reads company info
 </summary>
 <returns>
 Company
 </returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CompaniesDa.SqlFactory.GetCreateCompanySql(RAE.RAESolutions.Business.Entities.Company)">
 <summary>
 Gets SQL to create
 </summary>
 <returns>
 SQL string
 </returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CompaniesDa.SqlFactory.GetUpdateCompanySql(RAE.RAESolutions.Business.Entities.Company)">
 <summary>
 Builds SQL to update an entity
 </summary>
 <returns>
 SQL insert string
 </returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CompaniesDa.SqlFactory.GetLastCompanySql">
 <summary>
 Gets SQL that retrieves last company id inserted.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CompaniesDa.SqlFactory.GetCompanyColumns(RAE.RAESolutions.Business.Entities.Company)">
 <summary>
 Company columns.
 </summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.CondenserEquipmentItemDa">
 <summary>Condenser equipment data access.</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CondenserEquipmentItemDa.Create(RAE.RAESolutions.Business.Entities.CondenserEquipmentItem)">
 <summary>Creates condenser equipment.</summary>
 <param name="condenser">Condenser to create.</param>
 <returns>Num of rows affected.</returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CondenserEquipmentItemDa.Retrieve(System.String,System.Single)">
 <summary>
 Retrieves condenser equipment with specified equipment ID and revision.
 </summary>
 <param name="id">
 Equipment ID.
 </param>
 <param name="revision">
 Revision number.
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CondenserEquipmentItemDa.Update(RAE.RAESolutions.Business.Entities.CondenserEquipmentItem)">
 <summary>
 Updates condenser equipment.
 </summary>
 <param name="condenser">
 Condenser equipment to update.
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CondenserEquipmentItemDa.createCondenser(System.Data.IDbConnection,System.Data.IDbTransaction,RAE.RAESolutions.Business.Entities.CondenserEquipmentItem)">
 <summary>
 Creates only condenser specific data (only in  CondenserEquipmentItem table). Returns number of rows affected.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CondenserEquipmentItemDa.retrieveCondenser(System.String,System.Single)">
 <summary>
 Retrieves condenser info in EquipmentItems and CondenserEquipmentItems tables.
 Retrieves latest revision.
 </summary>
 <param name="id">
 Equipment ID.
 </param>
 <returns>
 Condenser equipment item info from EquipmentItems and CondenserEquipmentItems tables, 
 but not OtherEquipmentPricing or Options.
 </returns>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.CondensingUnitEquipmentItemDA">
 <summary>Provides data access to CondensingUnitEquipment table in Projects database.</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CondensingUnitEquipmentItemDA.Create(RAE.RAESolutions.Business.Entities.CondensingUnitEquipmentItem)">
 <summary>Creates condensing</summary>
 <param name="condensingUnit">Condensing unit to create.</param>
 <returns>Num of rows affected.</returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CondensingUnitEquipmentItemDA.Retrieve(System.String,System.Single)">
 <summary>Retrieves condensing unit with equipment ID and revision.</summary>
 <param name="equipmentId">Condensing unit ID.</param>
 <param name="revision">Revision number</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CondensingUnitEquipmentItemDA.Update(RAE.RAESolutions.Business.Entities.CondensingUnitEquipmentItem)">
 <summary>Updates condensing unit equipment.</summary>
 <param name="condensingUnit">Condensing unit equipment to update.</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CondensingUnitEquipmentItemDA.createCondUnit(System.Data.IDbConnection,System.Data.IDbTransaction,RAE.RAESolutions.Business.Entities.CondensingUnitEquipmentItem)">
 <summary>Creates only data in CondensingUnitEquipmentItem table.
 Returns number of rows affected.</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CondensingUnitEquipmentItemDA.retrieveCondUnit(System.String,System.Single)">
 <summary>Retrieves condensing unit info in EquipmentItems and CondensingUnitEquipmentItems tables.
 </summary>
 <param name="id">Equipment ID.</param>
 <param name="revision">Revision number</param>
 <returns>
 Condensing unit equipment item info from EquipmentItems and CondensingUnitEquipmentItems tables, 
 but not OtherEquipmentPricing or Options.
 </returns>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.CondensingUnitEquipmentItemDA.SqlFactory">
 <summary>SQL factory for condensing unit equipment item.</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.CondensingUnitProcessDA.SqlFactory">
 <summary>
 
 SQL Factory
 </summary>
 <remarks></remarks>
 <history></history>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CondensingUnitProcessDA.SqlFactory.GetInsertCondensingUnitSql(RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem)">
 <summary>
 Gets SQL to insert chiller equipment item.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CondensingUnitProcessDA.SqlFactory.GetUpdateCondensingUnitSql(RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem)">
 <summary>
 Gets SQL to update chiller equipment item.
 </summary>
 <param name="condensingUnit">
 Condensing unit equipment to update.
 </param>
 <returns>
 SQL command to update condensing unit equipment.
 </returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.CondensingUnitProcessDA.SqlFactory.CondensingUnitColumns(RAE.RAESolutions.Business.Entities.CondensingUnitProcessItem)">
 <summary>
 Chiller equipment item columns
 </summary>
 <param name="chiller">
 Chiller equipment item
 </param>
 <returns>
 List of columns in table
 </returns>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.ContactsDataAccess">
 <summary>
 Contains data access to contacts info.
 </summary>
 <history by="Casey Joyce">
 Created
 </history>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ContactsDataAccess.Save(RAE.RAESolutions.Business.Entities.ContactList@)">
 <summary>
 Creates/updates contacts.
 </summary>
 <param name="contacts">
 Contacts to save
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ContactsDataAccess.Create(RAE.RAESolutions.Business.Entities.Contact@)">
 <summary>
 Creates a contact. Doesn't create company, just company ID. Assigns contact ID.
 </summary>
 <param name="contact">
 Contact to create
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ContactsDataAccess.Retrieve(System.Int32)">
 <summary>
 Retrieves contact with ID.
 </summary>
 <param name="id">
 Contact ID of contact to retrieve.
 </param>
 <returns>
 Contact with contact ID.
 </returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ContactsDataAccess.RetrieveByCompanyId(System.Int32)">
 <summary>
 Retrieves contacts in company.
 </summary>
 <param name="id"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ContactsDataAccess.RetrieveByProjectId(System.String)">
 <summary>
 Retrieves contacts in a project
 </summary>
 <param name="projectId">
 ID of project to get contacts for
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ContactsDataAccess.RetrieveByCustomerNum(System.Int32)">
 <summary>
 Retrieves contacts by customer number.
 </summary>
 <param name="customerNum">
 Customer number to search for.
 </param>
 <returns>
 List of contacts with customer number.
 </returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ContactsDataAccess.Update(RAE.RAESolutions.Business.Entities.Contact)">
 <summary>
 Updates contact.
 </summary>
 <param name="contact">
 Contact to update.
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ContactsDataAccess.DeleteContact(System.Int32)">
 <summary>
 Deletes contact permantly (from contact list and projects)
 </summary>
 <param name="id">
 Contact ID
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ContactsDataAccess.Exists(System.Int32)">
 <summary>
 Determines whether contact exists in data source.
 </summary>
 <param name="id">
 Contact ID to look for.
 </param>
 <returns>True if contact exists in data source; else false.
 </returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ContactsDataAccess.SqlFactory.GetContactInsertSql(RAE.RAESolutions.Business.Entities.Contact)">
 <summary>
 Gets SQL to insert conact.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ContactsDataAccess.SqlFactory.GetContactUpdateSql(RAE.RAESolutions.Business.Entities.Contact)">
 <summary>
 Builds SQL to update a contact
 </summary>
 <returns>
 SQL update string
 </returns>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.EquipmentDa">
 <summary>Provides data access to Equipment table.</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentDa.Create(System.Data.IDbConnection,System.Data.IDbTransaction,RAE.RAESolutions.Business.Entities.EquipmentItem)">
 <summary>Creates new general info for equipment (not any specific info such as for a condensing unit).</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentDa.Update(System.Data.IDbConnection,System.Data.IDbTransaction,RAE.RAESolutions.Business.Entities.EquipmentItem)">
 <summary>Updates columns in Equipment table.</summary>
 <param name="equipment">Equipment item to update.</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentDa.Retrieve(RAE.RAESolutions.Business.Entities.item_id,System.Single)">
 <summary>Retrieves all info for equipment, including info specific to equipment type.</summary>
 <param name="id">ID of equipment to retrieve.</param>
 <param name="revision">Revision number</param>
 <returns>Equipment item.</returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentDa.Retrieve(System.String)">
 <summary>Retrieves all info for equipment, including info specific to equipment type.
 Retrieves latest revision.</summary>
 <param name="id">ID of equipment to retrieve.</param>
 <returns>Equipment item.</returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentDa.Delete(System.String,RAE.RAESolutions.Business.EquipmentType)">
 <summary>Deletes equipment with the specified ID; deletes all revisions.</summary>
 <param name="id">ID of the equipment to delete.</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentDa.Delete(System.String,RAE.RAESolutions.Business.EquipmentType,System.Data.IDbConnection,System.Data.IDbTransaction)">
 <summary>Deletes equipment with the specified ID; deletes all revisions.
 Uses existing connection and transaction.</summary>
 <param name="id">ID of the equipment to delete.</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentDa.DeleteAllEquipment(System.String,System.Data.IDbConnection,System.Data.IDbTransaction)">
 <summary>Deletes all equipment in a project</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentDa.RetrieveByProject(System.String)">
 <summary>Retrieves equipment in project.</summary>
 <param name="projectId">ID of project containing equipment.</param>
 <returns>Equipment items</returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentDa.Rename(System.String,System.String)">
 <summary>Renames equipment.</summary>
 <param name="id">ID of equipment to rename.</param>
 <param name="name">New name of equipment.</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentDa.UpdateIsIncluded(System.String,System.Boolean)">
 <summary>Sets inclusion status.</summary>
 <param name="id">ID of equipment to rename.</param>
 <param name="isIncluded">True to include equipment in project; else false to exclude.</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentDa.RetrieveLatestRevision(System.String)">
 <summary>Retrieves latest revision number of equipment with the specified ID.</summary>
 <param name="id">Equipment ID to retrieve latest revision for</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentDa.RetrieveAllRevisions(System.String)">
 <summary>Retrieves all revisions for the specified equipment ID</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentDa.IsLatestRevision(System.String,System.Single)">
 <summary>True if is equipment is the latest revision; else false.</summary>
 <param name="id">Equipment ID</param>
 <param name="revision">Revision number to check if is latest revision</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentDa.Exists(System.String,System.Single)">
 <summary>Returns whether equipment at specified revision exists.</summary>
 <param name="id">Equipment ID</param>
 <param name="revision">Revision number</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentDa.RetrieveOnlyInfoInEquipmentTable(RAE.RAESolutions.Business.Entities.item_id,System.Single)">
 <summary>
 Retrieves only information in equipment table.
 Does not contain information that is specific to an equipment type.
 </summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.EquipmentDa.SqlFactory">
 <summary>SQL factory for equipment items.</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.EquipmentOptionsDa">
 <summary>Provides data access to equipment options.</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentOptionsDa.Create(RAE.RAESolutions.Business.Entities.EquipmentOptionList,System.Data.IDbConnection,System.Data.IDbTransaction)">
 <summary>Creates options in equipment's option list. Runs in transaction.</summary>
 <param name="options">Equipment containing options. Options Equipment.Id property must be set.</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentOptionsDa.delete(System.String,System.Single,System.Data.IDbConnection,System.Data.IDbTransaction)">
 <summary>Deletes options from _one revision_ of equipment.</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentOptionsDa.delete(System.String,System.Data.IDbConnection,System.Data.IDbTransaction)">
 <summary>Deletes options from _all revisions_ of equipment</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentOptionsDa.Exists(System.Int32,System.Single,System.Data.IDbConnection,System.Data.IDbTransaction)">
 <summary>Determines whether option exists.</summary>
 <param name="optionId">Option ID.</param>
 <param name="connection">Connection</param>
 <param name="transaction">Transaction</param>
 <returns>True if option exists; else false.</returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentOptionsDa.get_id_and_quantity_from_users_project_for(RAE.RAESolutions.Business.Entities.EquipmentItem)">
 <summary>Retrieves list of options with PricingIds and Quantity, 
 but the rest of the info still needs to be retrieved.</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EquipmentOptionsDa.complete_options_with_current_pricing(RAE.RAESolutions.Business.Entities.EquipmentOptionList,RAE.RAESolutions.Business.Entities.EquipmentItem)">
 <summary>Retrieves option info from EquipmentOptions database, while preserving saved quantity and ID properites.</summary>
 <param name="incomplete_options">Options with PricingIds to get the remaining info for.</param>
 <param name="unit">Equipment item the options apply to.</param>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.EquipmentOptionsDa.SqlFactory">
 <summary>SQL factory for equipment options.</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EvaporativeCondenerChillerBalanceDa.SqlFactory.GetUpdateChillerSql(RAE.RAESolutions.Business.Entities.EvaporativeCondenserChillerBalance)">
 <summary>Gets SQL to update chiller equipment item.</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.EvaporativeCondenerChillerBalanceDa.SqlFactory.ChillerColumns(RAE.RAESolutions.Business.Entities.EvaporativeCondenserChillerBalance)">
 <summary>Chiller equipment item columns</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.FluidCoolerEquipmentItemDa">
 <summary>Provides data access for fluid cooler equipment.</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.FluidCoolerEquipmentItemDa.Create(RAE.RAESolutions.Business.Entities.FluidCoolerEquipmentItem)">
 <summary>
 Creates fluid cooler equipment.
 </summary>
 <param name="fluidCooler">
 fluid cooler to create.
 </param>
 <returns>Number of rows affected.
 </returns>
 <history by="Casey Joyce" finish="2006/04/26">
 Created
 </history>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.FluidCoolerEquipmentItemDa.Retrieve(System.String,System.Single)">
 <summary>
 Retrieves fluid cooler equipment.
 </summary>
 <param name="id">
 fluid cooler ID.
 </param>
 <param name="revision">
 Revision number
 </param>
 <returns>
 fluid cooler equipment.
 </returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.FluidCoolerEquipmentItemDa.Update(RAE.RAESolutions.Business.Entities.FluidCoolerEquipmentItem)">
 <summary>Updates fluid cooler equipment.</summary>
 <param name="fluidCooler">Fluid cooler equipment to update.</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.FluidCoolerEquipmentItemDa.createFluidCooler(System.Data.IDbConnection,System.Data.IDbTransaction,RAE.RAESolutions.Business.Entities.FluidCoolerEquipmentItem)">
 <summary>Creates only fluid cooler specific data (only in fluid coolerEquipmentItem table). Returns number of rows affected.</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.FluidCoolerEquipmentItemDa.RetrieveFluidCooler(System.String,System.Single)">
 <summary>Retrieves fluid cooler info in EquipmentItems and CondensingUnitEquipmentItems tables.</summary>
 <param name="id">Equipment ID.</param>
 <param name="revision">Revision number</param>
 <returns>
 fluid cooler equipment item info from EquipmentItems and CondensingUnitEquipmentItems tables, 
 but not OtherEquipmentPricing or Options.
 </returns>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.FluidCoolerEquipmentItemDa.SqlFactory">
 <summary>SQL factory for fluidCooler equipment item.</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.OtherEquipmentCostsDA">
 <summary>
 Provides data access to OtherEquipmentCosts table.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.OtherEquipmentCostsDA.Create(RAE.RAESolutions.Business.Entities.EquipmentItem)">
 <summary>
 Creates all of equipment's other costs.
 </summary>
 <param name="equipment">
 Equipment containing other costs to create.
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.OtherEquipmentCostsDA.Create(System.Data.IDbConnection,System.Data.IDbTransaction,RAE.RAESolutions.Business.Entities.EquipmentItem)">
 <summary>
 Creates all of equipment's other costs.
 </summary>
 <param name="equipment">
 Equipment containing other costs to create.
 </param>
 <param name="connection">
 Open connection to database.
 </param>
 <param name="transaction">
 Transaction that has already been started.
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.OtherEquipmentCostsDA.Retrieve(System.String,System.Single)">
 <summary>
 Retrieves dictionary of other equipment costs.
 </summary>
 <param name="equipmentId">
 Id of equipment.
 </param>
 <returns>
 Dictionary of other euqipment costs.
 </returns>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.OtherEquipmentCostsDA.SqlFactory">
 <summary>
 Get SQL factory for other equipment costs.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.OtherEquipmentCostsDA.SqlFactory.GetInsertOtherEquipmentCostsSql(System.String,System.String,System.Double,System.Single)">
 <summary>
 Get SQL command to insert other equipment costs.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.OtherEquipmentCostsDA.SqlFactory.OtherEquipmentCostsColumns(System.String,System.String,System.Double,System.Single)">
 <summary>
 Other equipment costs columns
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProcessItemDA.LastestRevision(System.String)">
 <summary>
 Get's the latest revision of process based on ID
 </summary>
 <param name="processid"></param>
 <returns>Single - Latest Revision</returns>
 <remarks></remarks>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProcessItemDA.IncrementItemRevision(System.String)">
 <summary>
 Get's the latest revision of process based on ID
 and increments the item revision level as required.
 </summary>
 <param name="processid"></param>
 <returns>Single - Item Revision Number</returns>
 <remarks></remarks>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProcessItemDA.GetAllRevisions(System.String)">
 <summary>
 Get's all revisions as List(of Integer)
 </summary>
 <param name="processid"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProcessItemDA.GetTableName(System.String)">
 <summary>
 Returns table name based on process ID
 </summary>
 <param name="processID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProcessItemDA.GetProjectID(System.String)">
 <summary>
 Returns project ID based on process ID
 </summary>
 <param name="processID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProcessItemDA.Save(RAE.RAESolutions.Business.Entities.ProcessItem)">
 <summary>
 Creates or updates process item.
 </summary>
 <param name="process">
 Process item to create or update.
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProcessItemDA.SaveAs(RAE.RAESolutions.Business.Entities.ProcessItem,RAE.RAESolutions.Business.Entities.project_manager)">
 <summary>
 Saves process item as new process item.
 </summary>
 <param name="process">
 Process item to save as new.
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProcessItemDA.DeleteProcess(System.String,System.String)">
 <summary>Delete a process based on process id string and table name</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProcessItemDA.DeleteProcess(System.String,System.String,System.Data.IDbConnection,System.Data.IDbTransaction)">
 <summary>
 deletes process based on id, processtable and existing connection, transaction
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProcessItemDA.DeleteALLProcesses(System.String,System.Data.IDbConnection,System.Data.IDbTransaction)">
 <summary>
 deletes all processes in a project
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProcessItemDA.Rename(System.String,System.String)">
 <summary>Renames process.</summary>
 <param name="id">ID of process to rename.</param>
 <param name="name">New name of process.</param>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.ProductCoolerEquipmentItemDa">
 <summary>Provides data access for product coolers</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProductCoolerEquipmentItemDa.Create(RAE.RAESolutions.Business.Entities.ProductCoolerEquipmentItem)">
 <summary>Creates product cooler equipment.</summary>
 <param name="productCooler">product cooler to create.</param>
 <returns>Num of rows affected.</returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProductCoolerEquipmentItemDa.Retrieve(System.String,System.Single)">
 <summary>Retrieves product cooler equipment with equipment ID and revision.</summary>
 <param name="id">product cooler ID.</param>
 <returns>product cooler equipment.</returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProductCoolerEquipmentItemDa.Update(RAE.RAESolutions.Business.Entities.ProductCoolerEquipmentItem)">
 <summary>Updates product cooler equipment.</summary>
 <param name="productCooler">product cooler equipment to update.</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProductCoolerEquipmentItemDa.createProductCooler(System.Data.IDbConnection,System.Data.IDbTransaction,RAE.RAESolutions.Business.Entities.ProductCoolerEquipmentItem)">
 <summary>
 Creates only product cooler specific data (only in ProductCoolerEquipmentItem table). Returns number of rows affected.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProductCoolerEquipmentItemDa.retrieveProductCooler(System.String,System.Single)">
 <summary>Retrieves product cooler info in EquipmentItems and ProductCoolerEquipmentItems tables.</summary>
 <param name="equipId">Equipment ID.</param>
 <returns>
 product cooler equipment item info from EquipmentItems and ProductCoolerEquipmentItems tables, 
 but not OtherEquipmentPricing or Options.
 </returns>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.ProjectContactsDataAccess">
 <summary>
 Provides data access to project and contact relationships
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProjectContactsDataAccess.Delete(System.String,System.Int32)">
 <summary>
 Deletes the contact from the project
 </summary>
 <param name="projectId">
 Project ID
 </param>
 <param name="contactId">
 Contact ID
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProjectContactsDataAccess.Delete(System.String)">
 <summary>
 Deletes all the contacts from the project
 </summary>
 <param name="projectId">
 ID of project to delete contacts from
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProjectContactsDataAccess.Exists(System.String,System.Int32)">
 <summary>
 Indicates whether a contact is in a project
 </summary>
 <param name="projectId">
 Project ID
 </param>
 <param name="contactId">
 Contact ID
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProjectContactsDataAccess.Create(System.String,System.Int32)">
 <summary>
 Adds a contact to a project
 </summary>
 <param name="projectId">
 ID of project to add contact to
 </param>
 <param name="contactId">
 ID of contact to add to project
 </param>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.ProjectsDataAccess">
 <summary>
 Provides data access for projects database table
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProjectsDataAccess.Create(RAE.RAESolutions.Business.Entities.ProjectItem)">
 <summary>
 Creates a new project
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProjectsDataAccess.Delete(System.String,System.Boolean)">
 <summary>
 Deletes Project with the specified ID; deletes all associated
 equipment, processes, relationships and revisions.
 </summary>
 <param name="projectId">
 ID of the equipment to delete.
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProjectsDataAccess.Update(RAE.RAESolutions.Business.Entities.ProjectItem)">
 <summary>
 Updates project.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProjectsDataAccess.Retrieve(System.String,System.Single)">
 <summary>
 Retrieves project with the project ID.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProjectsDataAccess.RetrieveLatestRevision(System.String)">
 <summary>
 Retrieves latest project revision with the project ID.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProjectsDataAccess.Exists(System.String,System.Single)">
 <summary>
 Determines whether project with ID exists in data source.
 </summary>
 <param name="id">
 Project ID to find.
 </param>
 <returns>
 True if project exists in data source; else false.
 </returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProjectsDataAccess.RetrieveAll(System.Boolean,System.String)">
 <summary>Retrieves a list of submittals
 </summary>
 <exception cref="T:System.Data.OleDb.OleDbException">Thrown when data exception occurs
 </exception>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProjectsDataAccess.RetrieveAllCheckin">
 <summary>Retrieves list of checked out submittals
 </summary>
 <exception cref="T:System.Data.OleDb.OleDbException">Thrown when data exception occurs
 </exception>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProjectsDataAccess.RetrieveCheckInQry(System.String)">
 <summary>Retrieves a list of checked out submittals based on name pattern
 </summary>
 <exception cref="T:System.Data.OleDb.OleDbException">Thrown when data exception occurs
 </exception>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProjectsDataAccess.RetrieveQry(System.String,System.Boolean)">
 <summary>Retrieves a list of submittals based on name pattern
 </summary>
 <exception cref="T:System.Data.OleDb.OleDbException">Thrown when data exception occurs
 </exception>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProjectsDataAccess.Rename(System.String,System.String)">
 <summary>
 Renames project.
 </summary>
 <param name="id">
 ID of project to rename.
 </param>
 <param name="name">
 New project name.
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProjectsDataAccess.SqlFactory.GetUpdateProjectSqlCommand(RAE.RAESolutions.Business.Entities.ProjectItem)">
 <summary>Sql command to update submittal</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProjectsDataAccess.SqlFactory.GetInsertProjectSqlCommand(RAE.RAESolutions.Business.Entities.ProjectItem)">
 <summary>
 Sql command to insert submittal
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.ProjectsDataAccess.SqlFactory.ProjectColumns(RAE.RAESolutions.Business.Entities.ProjectItem)">
 <summary>Gets sql column list with all columns in submittal table except submittalId</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa">
 <summary>
 Provides data access for special options.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.Retrieve(System.Int32)">
 <summary>
 Retrieves special option by auto-number ID generated by database.
 </summary>
 <param name="id">
 Special option ID, auto-number generated by database
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.RetrieveByEquipmentIdAndRevision(System.String,System.Single)">
 <summary>
 Retrieves list of special options in equipment.
 </summary>
 <param name="id">
 Equipment ID.
 </param>
 <param name="revision">
 Revision number
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.Update(RAE.RAESolutions.Business.Entities.SpecialOption)">
 <summary>
 Updates special option.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.Update(RAE.RAESolutions.Business.Entities.SpecialOption,System.Data.IDbConnection,System.Data.IDbTransaction)">
 <summary>
 Updates special option using existing connection and transaction.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.Save(RAE.RAESolutions.Business.Entities.SpecialOptionList,System.Data.IDbConnection,System.Data.IDbTransaction,System.String,System.String)">
 <summary>
 Saves special options.
 </summary>
 <param name="options">
 Special options to save.</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.Create(RAE.RAESolutions.Business.Entities.SpecialOption@)">
 <summary>
 Creates a special option.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.Create(RAE.RAESolutions.Business.Entities.SpecialOption,System.Data.IDbConnection,System.Data.IDbTransaction)">
 <summary>
 Creates a special option.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.Create(RAE.RAESolutions.Business.Entities.SpecialOptionList,System.Data.IDbConnection,System.Data.IDbTransaction)">
 <summary>
 Creates special options.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.Exists(System.Int32)">
 <summary>
 Checks if special option exists with auto number ID parameter. 
 Returns true if exists; else false.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.Exists(System.Int32,System.Data.IDbConnection,System.Data.IDbTransaction)">
 <summary>
 Checks if special option exists with auto number ID generated by database. 
 Returns true if exists; else false.
 </summary>
 <param name="id">
 Special option ID, auto number ID generated by database.
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.Delete(System.Int32)">
 <summary>
 Deletes special option with auto number ID generated by database.
 </summary>
 <param name="id">
 Auto number ID generated by database of special option to delete.
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.Delete(System.String,System.Data.IDbConnection,System.Data.IDbTransaction)">
 <summary>
 Deletes special options with the specified equipment ID; deletes all revisions.
 </summary>
 <param name="equipmentId">
 Equipment ID of special option to delete
 </param>
 <param name="connection">
 Database connection that should be open
 </param>
 <param name="transaction">
 Transaction to run delete command in
 </param>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.SqlFactory">
 <summary>
 Generates SQL statements for data access.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.SqlFactory.GetLastId">
 <summary>
 Gets last auto number ID.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.SqlFactory.GetRetrieveByEquipmentIdAndRevisionSql(System.String,System.Single)">
 <summary>
 Retrieves special option based on equipment ID and revision parameters.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.SqlFactory.GetRetrieveSql(System.Int32)">
 <summary>
 Retrieves special option by auto number ID.
 </summary>
 <param name="id">Unique auto number ID generated by database.</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.SqlFactory.GetDeleteSql(System.Int32)">
 <summary>
 Deletes special option with auto number parameter.
 </summary>
 <param name="id">
 Auto number parameter.
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.SqlFactory.GetDeleteSql(System.String)">
 <summary>
 Deletes special options with the specified equipment ID
 </summary>
 <param name="equipmentId">
 Equipment ID of special options to delete
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.SpecialOptionsDa.SqlFactory.GetUpdateSql(RAE.RAESolutions.Business.Entities.SpecialOption)">
 <summary>
 Updates special option based on auto number ID.
 </summary>
 <param name="op">
 Option to update.
 </param>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.UnitCoolerEquipmentItemDa">
 <summary>Provides data access for unit cooler equipment.</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.UnitCoolerEquipmentItemDa.Create(RAE.RAESolutions.Business.Entities.unit_cooler)">
 <summary>Creates unit cooler equipment.</summary>
 <param name="unitCooler">unit cooler to create.</param>
 <returns>Num of rows affected.</returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.UnitCoolerEquipmentItemDa.Retrieve(System.String,System.Single)">
 <summary>Retrieves unit cooler equipment.</summary>
 <param name="id">Unit cooler ID.</param>
 <returns>Unit cooler equipment.</returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.UnitCoolerEquipmentItemDa.Retrieve(RAE.RAESolutions.Business.Entities.item_id)">
 <summary>
 Retrieves unit cooler equipment.
 </summary>
 <param name="id">
 unit cooler ID.
 </param>
 <returns>
 unit cooler equipment.
 </returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.UnitCoolerEquipmentItemDa.Retrieve(System.String)">
 <summary>
 Retrieves unit cooler equipment
 </summary>
 <param name="id">
 ID of unit cooler equipment to retrieve.
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.UnitCoolerEquipmentItemDa.Update(RAE.RAESolutions.Business.Entities.unit_cooler)">
 <summary>
 Updates unit cooler equipment.
 </summary>
 <param name="unitCooler">
 unit cooler equipment to update.
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.UnitCoolerEquipmentItemDa.Create(System.Data.IDbConnection,System.Data.IDbTransaction,RAE.RAESolutions.Business.Entities.unit_cooler)">
 <summary>
 Creates only unit cooler specific data (only in unitCoolerEquipmentItem table). Returns number of rows affected.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.UnitCoolerEquipmentItemDa.RetrieveUnitCooler(System.String,System.Single)">
 <summary>
 Retrieves unit cooler info in EquipmentItems and unitCoolerEquipmentItems tables.
 </summary>
 <param name="id">
 Equipment ID.
 </param>
 <returns>
 unit cooler equipment item info from EquipmentItems and unitCoolerEquipmentItems tables, 
 but not OtherEquipmentPricing or Options.
 </returns>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.UnitCoolerEquipmentItemDa.SqlFactory">
 <summary>
 SQL factory for unit cooler equipment item.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.UnitCoolerEquipmentItemDa.SqlFactory.GetInsertUnitCoolerSql(RAE.RAESolutions.Business.Entities.unit_cooler)">
 <summary>
 Gets SQL to insert unit cooler equipment item.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.UnitCoolerEquipmentItemDa.SqlFactory.GetUpdateUnitCoolerSql(RAE.RAESolutions.Business.Entities.unit_cooler)">
 <summary>Gets SQL to update unit cooler equipment item.</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Projects.WCChillerProcessDA.SqlFactory">
 <summary>
 
 SQL Factory
 </summary>
 <remarks></remarks>
 <history></history>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.WCChillerProcessDA.SqlFactory.GetInsertChillerSql(RAE.RAESolutions.Business.Entities.WCChillerProcessItem)">
 <summary>
 Gets SQL to insert chiller equipment item.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.WCChillerProcessDA.SqlFactory.GetUpdateChillerSql(RAE.RAESolutions.Business.Entities.WCChillerProcessItem)">
 <summary>
 Gets SQL to update chiller equipment item.
 </summary>
 <param name="chiller">
 Chiller equipment to update.
 </param>
 <returns>
 SQL command to update chiller equipment.
 </returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Projects.WCChillerProcessDA.SqlFactory.ChillerColumns(RAE.RAESolutions.Business.Entities.WCChillerProcessItem)">
 <summary>
 Chiller equipment item columns
 </summary>
 <param name="chiller">
 Chiller equipment item
 </param>
 <returns>
 List of columns in table
 </returns>
</member>
<member name="T:RAE.RAESolutions.DataAccess.EquipmentOptionsAgent.DependentCommonOptionsDa">
 <summary>
 Retrieves dependent common options from RAE.DataAccess.EquipmentOptions and translates option object.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.EquipmentOptionsAgent.DependentCommonOptionsDa.RetrieveDependentOptions(System.String,System.String)">
 <summary>
 Retrieves dependent common options for the parent option and equipment series
 </summary>
 <param name="parentCode">Option code for the parent option</param>
 <param name="series">Equipment series</param>
 <returns>Dependent options</returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.EquipmentOptionsAgent.DependentCommonOptionsDa.RetrieveParentOptions(System.String,System.String)">
 <summary>
 Retrieves parent options for the dependent option and equipment series
 </summary>
 <param name="dependentCode">Option code of dependent option</param>
 <param name="series">Equipment series</param>
 <returns>Parent options</returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.EquipmentOptionsAgent.DependentCommonOptionsDa.ToOption(Rae.DataAccess.EquipmentOptions.Option)">
 <summary>
 Converts EquipmentOptions Option object to a RAESolutions Option object
 </summary>
 <param name="op">Option to convert</param>
 <returns>Converted option</returns>
 <remarks></remarks>
</member>
<member name="T:RAE.RAESolutions.DataAccess.EquipmentOptionsAgent.OptionsDA">
 <summary>Data access to equipment options database</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.EquipmentOptionsAgent.OptionsDA.RetrieveAvailableOptions(System.String,System.String,System.Int32,System.Int32,RAE.Solutions.user,System.Int32)">
 <summary>Retrieves available options for the specified equipment</summary>
 <param name="series">Equipment series</param>
 <param name="model">Equipment model</param>
 <param name="voltage">Unit voltage</param>
 <returns>Available options for the specified equipment</returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.EquipmentOptionsAgent.OptionsDA.RetrieveStandardOptions(System.String,System.String,System.Int32,System.Int32,System.Int32)">
 <summary>Retrieves standard options for the specified equipment</summary>
 <param name="series">Equipment series</param>
 <param name="model">Equipment model</param>
 <param name="voltage">Unit voltage</param>
 <returns>Standard options</returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.EquipmentOptionsAgent.OptionsDA.RetrieveBaseListPrice(System.String,System.String)">
 <summary>Retrieves equipment's base list price</summary>
 <param name="series">Equipment series</param>
 <param name="model">Equipment model</param>
 <returns>Base list price</returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.EquipmentOptionsAgent.OptionsDA.RetrieveOption(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
 <summary>Retrieves option based on its code and voltage</summary>
 <param name="code">Option code</param>
 <param name="voltage">Voltage</param>
 <param name="series">Series</param>
 <param name="model">Model</param>
 <returns>Option</returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.EquipmentOptionsAgent.OptionsDA.RetrieveOption(System.Int32)">
 <summary>Retrieves the option with the pricing ID.</summary>
 <param name="pricingId">
 Identifies equipment/option combination. Id can be used to get info about the combination.
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.EquipmentOptionsAgent.OptionsDA.OptionToTable(System.Collections.Generic.List{Rae.DataAccess.EquipmentOptions.Option},System.String,System.Int32,System.String,System.Int32)">
 <summary>Converts option list to typed table</summary>
 <remarks>Table allows more functionality with grids</remarks>
</member>
<member name="T:RAE.RAESolutions.DataAccess.AirHandlers">
 <summary>Air handler in Data Access Layer</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.AirHandlers.RetrieveForwardCurvedFanSizes">
 <summary>Retrieves list of distinct, housed forward curved fan sizes.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.AirHandlers.RetrieveHours(System.String)">
 <summary>Retrieves table of hours required for an air handler model to be manufactured.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.AirHandlers.RetrieveMotor(System.String,System.String,System.String,System.Int32)">
 <summary>Retrieves motor based on parameters</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.AirHandlers.RetrieveMotors(System.String,System.String,System.String)">
 <summary>Retrieves motor based on parameters</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.AirHandlers.RetrieveBidiFan(System.Double)">
 <summary>Retrieves housed BIDI fan based on size parameter
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.AirHandlers.RetrieveForwardCurvedFans(System.String)">
 <summary>Retrieves housed forward curved fan based on size
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.AirHandlers.RetrievePlenumFanPrice(System.String,System.Double,System.Double@,System.Int32@)">
 <summary>Retrieves price of plenum fan</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.AirHandlers.RetrieveDuctHeaters(System.Int32,System.Double)">
 <summary>Retrieves duct heaters matching parameters</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.AirHandlers.RetrieveCoilPrices(System.String,System.Int32)">
 <summary>Retrieves coil prices</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.AirHandlers.RetrieveFilters">
 <summary>Retrieves entire filter table</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.AirHandlers.RetrieveDamper(System.String,System.String,System.String)">
 <summary>Retrieves damper</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.AirHandlers.RetrieveSectionDimensions(System.String)">
 <summary>Retrieves section dimensions</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.AirHandlers.RetrieveAirHandlers(System.Double)">
 <summary>Retrieves appropriate air handlers based on the air flow parameter
 </summary>
 <param name="airflow">Air flow [cfm]
 </param>
 <returns>Dataset containing air handler information
 </returns>
 <remarks>Air handlers must be within air flow and face velocity ranges
 </remarks>
 <history>[CASEYJ]	7/1/2005	Created
 </history>
</member>
<member name="T:RAE.RAESolutions.DataAccess.Chillers.GlycolColumnNames">
 <summary>The variables contain the column names that are in the glycol tables in the chiller database.</summary>
 <remarks>This class can shorten the amount of code you have to write if it is imported into classes. Also helps
 prevent mispelling of column names and having to look up what columns are available.</remarks>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Chillers.ChillerDataAccess.GetCondensers">
 <summary>Gets condenser list</summary>
 <remarks>
 Display Member:	Condenser description
 Value Member:		Condenser coil file name
 </remarks>   
</member>
<member name="M:RAE.RAESolutions.DataAccess.Chillers.ChillerDataAccess.RetrieveChiller(System.String)">
 <summary>34, 24, RECH, 35</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Chillers.ChillerDataAccess.RetrieveChillerEvaporator(System.String)">
 <summary>Retrieves chiller evaporator based on evaporator part number</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Chillers.ChillerDataAccess.RetrieveRepChillerModels(System.String)">
 <summary>Retrieves chiller models that the rep can view.</summary>
 <param name="series">Chiller series (ex. 30A0)</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Chillers.ChillerDataAccess.RetrieveEthylene">
 <summary>Retrieves entire ethylene table containing recommendations, freezing point and leaving fluid temperature</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Chillers.ChillerDataAccess.RetrievePropylene">
 <summary>Retrieves entire propylene table containing recommendations, freezing point and leaving fluid temperature</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.Chillers.ChillerDataAccess.retrieveChillerModelsBasedOnSqlCommand(System.String)">
 <summary>Retrieves all chiller models</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.CompressorDataAccess">
 <summary>Data access to compressor data source</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.CompressorDataAccess.RetrieveCompressor(System.String,System.String)">
 <summary>Retrieves all compressor data for the compressor model with the specified refrigerant.</summary>
 <param name="compressorModel">Compressor model to retrieve data for</param>
 <param name="refrigerant">Refrigerant compressor uses</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.CompressorDataAccess.RetrieveCompressors(System.String)">
 <summary>Retrieves compressors that use the specified refrigerant.</summary>
 <param name="refrigerant">Refrigerant that compressor should use</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.CompressorDataAccess.RetrieveCompressorModels(System.String)">
 <summary>Retrieves compressor models for the provided chiller model</summary>
 <param name="chillerModel">The chiller model to retrieve the compressor models for</param>
 <returns>List of compressor models</returns>
</member>
<member name="M:RAE.RAESolutions.DataAccess.CompressorDataAccess.RetrieveCompressorSafety(System.String,System.String)">
 <summary>Retrieves compressor safety information
 </summary>
 <param name="compressorModel">Compressor model
 </param>
 <param name="refrigerant">Refrigerant
 </param>
 <returns>Compressor safety information
 </returns>
 <history>[CASEYJ]	6/14/2005	Created
 </history>
</member>
<member name="M:RAE.RAESolutions.DataAccess.CompressorDataAccess.RetrieveCompressorTemperatureLimits(System.String)">
 <summary>Retrieves condensing and suction temperature limits
 </summary>
 <param name="compressorFileName">Compressor file with temperature limits
 </param>
 <returns>Table containing temperature limits.
 Columns: "minst", "maxst", "minct", "maxct"
 </returns>
 <history>[CASEYJ]	6/23/2005	Created
 </history>
</member>
<member name="M:RAE.RAESolutions.DataAccess.CompressorDataAccess.GetCoefficients(System.String)">
 <summary>Gets coefficients based on the specified compressor file name</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.CompressorDataAccess.Coefficients">
 <summary>New coefficients; 10 rather than 7; based on temperature rather than pressure</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.CompressorDataAccess.retrieveCoefficients(System.String)">
 <summary>Retrieves new coefficients based on temperature (not pressure)</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.CompressorDescription">
 <summary>Compressor description contains model, file and horsepower.</summary>
</member>
<member name="P:RAE.RAESolutions.DataAccess.CompressorDescription.MasterID">
 <summary>Compressor file name</summary>
</member>
<member name="P:RAE.RAESolutions.DataAccess.CompressorDescription.Model">
 <summary>Compressor model</summary>
</member>
<member name="P:RAE.RAESolutions.DataAccess.CompressorDescription.Horsepower">
 <summary>Horsepower</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.CompressorDescription.ToStringSignature">
 <summary>Delegate (method signature) for ToString() method.</summary>
</member>
<member name="F:RAE.RAESolutions.DataAccess.CompressorDescription.ToStringPointer">
 <summary>This delegate determines what is returned by the ToString() method.</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.CompressorDescription.ToString">
 <summary>Returns description of compressor by default</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.ReleaseManager">
 <summary>
 Allows new HR numbers to be assigned
 </summary>
 <remarks>
 ORPCONTRL  table
 OCLSTQTE   column : Double            'Last Quote Number Used
 OCLSTPR    column : Double            'Last PR Number Used
 OCLSTPCK   column : Double            'Last Pick Number
 
 PREASGHRN  table                      ' PREviously ASsiGned HR Numbers
 SALESMAN   column : String * 3
 HRNUMBER   column : Double
 JOBDESC1   column : String * 50
 JOBDESC2   column : String * 50
 JOBDESC3   column : String * 50
 DATE       column : String * 8        'Format: MMddyyyy
 </remarks>
</member>
<member name="P:RAE.RAESolutions.DataAccess.ReleaseManager.NextReleaseNum">
 <summary>
 Cached next release number
 </summary>
</member>
<member name="P:RAE.RAESolutions.DataAccess.ReleaseManager.AssignedReleaseNum">
 <summary>
 Cached assigned release number
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.ReleaseManager.#ctor">
 <summary>Constructor</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.ReleaseManager.AssignReleaseNum(System.String,System.String,System.String)">
 <summary>
 Assigns a new release number, increments stored release number and logs assignment
 </summary>
 <param name="salesman">Salesman assigning the release number</param>
 <param name="repInfo">Information about rep associated with assigned release number</param>
 <param name="projectInfo">Information about project associated with assigned HR number</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.ReleaseManager.RetrieveNextUnassignedReleaseNum">
 <summary>
 Retrieves the next unassigned release number, but does not assign it; just for viewing the release number
 </summary>
 <remarks>The stored release number is not incremented and the retrieval is not logged</remarks>
</member>
<member name="M:RAE.RAESolutions.DataAccess.ReleaseManager.RetrieveInfoByReleaseNum(System.Int32)">
 <summary>
 Retrieves info for specified release number
 </summary>
 <param name="releaseNum">Release number to retrieve information for</param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.ReleaseManager.RetrieveInfoAssignedOnDateOfMostRecentRelease">
 <summary>
 Retrieves info for release numbers assigned on the date that the most recent assignment occurred.
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.ReleaseManager.RetrieveInfoAssignedOnDate(System.DateTime)">
 <summary>
 Retrieves info for release numbers that were assigned on the specified date
 </summary>
 <param name="releaseDate">
 Date release number was assigned
 </param>
</member>
<member name="M:RAE.RAESolutions.DataAccess.ReleaseManager.RetrieveInfoAssignedOnOrAfterDate(System.DateTime)">
 <summary>
 Retrieves info for release numbers assigned on or after the date specified
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.ReleaseManager.RetrieveNumAssignedReleaseNums">
 <summary>
 Retrieves number of release numbers logged
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.ReleaseManager.ReleaseNumToString(System.Int32)">
 <summary>
 Converts release number to string and formats
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.ReleaseManager.IncrementAndRetrieveHrNum">
 <summary>Retrieves a new HR number and then increments the stored HR for the next assignment
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.ReleaseManager.LogHr(System.String,System.String,System.String)">
 <summary>Logs HR number assignment information
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.ReleaseManager.LogHr(System.Int32,System.String,System.String,System.String,System.String)">
 <summary>Logs HR number assignment information
 </summary>
 <remarks>The Assign HR Number database has a salesman, HR number, date assigned and three description columns
 </remarks>
</member>
<member name="T:RAE.RAESolutions.DataAccess.OptionsDS">
<summary>
Represents a strongly typed in-memory cache of data.
</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.OptionsDS.EquipmentOptionDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.OptionsDS.EquipmentOptionRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.OptionsDS.EquipmentOptionRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.OrderAssistanceDA">
 <summary>Provides access to data that can assist the user in creating orders.
 </summary>
 <remarks>This data is read-only it is not user-specific data
 </remarks>
</member>
<member name="M:RAE.RAESolutions.DataAccess.OrderAssistanceDA.RetrieveTsiMultipliersCommissions">
 <summary>Retrieves table of multiplier and commission pairs for Technical Systems</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.OrderAssistanceDA.RetrieveCriMultipliersCommissions">
 <summary>Retrieves table of multiplier and commission pairs for Century Refrigeration</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.OrderAssistanceDA.RetrieveRescoMultipliersCommissions">
 <summary>
 Retrieves table of multiplier and commission pairs for employees at RESCO
 </summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.OrderAssistanceDA.RetrieveUnitedStates">
 <summary>Retrieves table of states' full name and abbreviation</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.OrderAssistanceDA.retrieveMultipliersCommissions(System.String)">
 <summary>Retrieves multipliers and commission rates</summary>
</member>
<member name="T:RAE.RAESolutions.DataAccess.UnitCoolerDataAccess">
 <summary>Provides data access for the unit cooler database.</summary>
</member>
<member name="M:RAE.RAESolutions.DataAccess.UnitCoolerDataAccess.RetrieveUnitCooler(System.String)">
 <summary>Retrieves all unit cooler data for model parameter</summary>
 <param name="model">Unit cooler model to get info for</param>
 <returns>Table with unit cooler data</returns>
</member>
<member name="T:RAE.Solutions.compressors.CompressorSafety">
 <summary>Compressor safety data</summary>
</member>
<member name="P:RAE.Solutions.drawings.DrawingBase.Type">
 <summary>Drawing type (ex unit, piping, etc)</summary>
</member>
<member name="P:RAE.Solutions.drawings.DrawingBase.DrawingName">
 <summary>Master drawing name</summary>
</member>
<member name="M:RAE.Solutions.drawings.DrawingBase.Show(System.Collections.Generic.List{System.String}@,System.Boolean,System.Boolean,System.Boolean)">
 <summary>Show the drawing</summary>
</member>
<member name="M:RAE.Solutions.drawings.DrawingBase.AddOptionField(System.String,System.String)">
 <summary>Adds an option field column to InputData table in DrawingData.mdb</summary>
</member>
<member name="M:RAE.Solutions.drawings.DrawingBase.ReadXML(System.String,RAE.Solutions.drawings.DTXDWG.XMLDataToGet)">
 <summary>Read xml file</summary>
 <param name="XML_File_Path"></param>
 <param name="OutputType"></param>
</member>
<member name="M:RAE.Solutions.drawings.DrawingBase.setDrawing(System.Object,System.Object,System.Boolean,System.String@,System.Boolean,System.Boolean)">
 <summary>
 Set drawing parameters (layers, text handles, name)
 </summary>
 <param name="progressBar"></param>
 <param name="updateLabel"></param>
 <returns>True if succeeds; else false</returns>
</member>
<member name="M:RAE.Solutions.drawings.DrawingBase.deleteAllTextThenInsert(System.String)">
 <summary>Insert text labels and handles into repository</summary>
</member>
<member name="M:RAE.Solutions.drawings.DrawingBase.UpdateForm(System.Object,System.Int32,System.Object,System.String)">
 <summary>
 Update label and progress bar on form calling SetDwg() routine
 </summary>
 <param name="progressBar"></param>
 <param name="pProgress_Increment_Divisor"></param>
 <param name="updateLabel"></param>
 <param name="updateText"></param>
 <remarks></remarks>
</member>
<member name="M:RAE.Solutions.drawings.DrawingBase.setDrawingName(System.String,RAE.Solutions.drawings.DrawingType)">
 <summary>Determines which drawings to show for each pass.</summary>
</member>
<member name="M:RAE.Solutions.drawings.DrawingBase.setDrawingLayers(System.String[])">
 <summary>
 Sets the layers in a drawing based on rules defined in UnitDrawings_LayerRules table.
 </summary>
</member>
<member name="M:RAE.Solutions.drawings.DrawingBase.setHeightLayers">
 <summary>
 Sets the layers in a drawing based on rules defined in UnitDrawings_LayerRules table.
 </summary>
</member>
<member name="M:RAE.Solutions.drawings.DrawingBase.isQualifierALayerName(System.String)">
 <summary>
 Returns true if layer name has a rule in unit drawing rules
 </summary>
</member>
<member name="M:RAE.Solutions.drawings.DrawingBase.stateOf(System.String)">
 <summary>Determines if layer should be turned on or off (0=off, 1=on)</summary>
</member>
<member name="M:RAE.Solutions.drawings.DrawingBase.isQualified(System.String,System.String,System.String)">
 <summary>
 Determine if two strings are qualified based on the strings and qualifying operator.
 </summary>
</member>
<member name="M:RAE.Solutions.drawings.DrawingBase.GetInputValue(System.String,System.Boolean)">
 <summary>Get database or option value of field passed.</summary>
 <param name="fieldName"></param>
</member>
<member name="M:RAE.Solutions.drawings.DrawingBase.getPropValue(System.Type,System.Object,System.String,System.Boolean)">
 <summary>
 Get value of specified property
 </summary>
 <param name="objType"></param>
 <param name="objectInstance"></param>
 <param name="propName"></param>
</member>
<member name="T:RAE.Solutions.drawings.DrawingPath">
 <summary>Helps build path to drawing files.</summary>
 <remarks>Code Example
 <code>
 Dim path = New DrawingPath(type)
 path.To("10-A.dwg").In(path.MasterFolder)
 </code>
 Path Example:
 </remarks>
</member>
<member name="M:RAE.Solutions.drawings.DrawingPath.#ctor(RAE.Solutions.drawings.DrawingType,RAE.Solutions.user_group)">
 <summary>Initializes a new drawing path</summary>
 <param name="type">Type of drawing to build path for</param>
</member>
<member name="P:RAE.Solutions.drawings.DrawingPath.EditFolder">
 <summary>Path to drawing edit folder</summary>
</member>
<member name="P:RAE.Solutions.drawings.DrawingPath.MasterFolder">
 <summary>Path to master drawing folder</summary>
</member>
<member name="M:RAE.Solutions.drawings.DrawingPath.To(System.String)">
 <summary>Specifies file name building path for</summary>
 <param name="fileName">File name building path for</param>
</member>
<member name="M:RAE.Solutions.drawings.DrawingPath.ToMasterDrawing(System.String)">
 <summary>Builds path to master drawing</summary>
 <param name="fileName">File name of master drawing</param>
</member>
<member name="T:RAE.Solutions.drawings.DrawingType">
 <summary>
 Drawing types
 </summary>
</member>
<member name="P:RAE.Solutions.drawings.DTXDWG.LayerName">
 <summary>
 LayerName
 </summary>
</member>
<member name="P:RAE.Solutions.drawings.DTXDWG.Freeze">
 <summary>
 Freeze
 </summary>
</member>
<member name="T:RAE.Solutions.drawings.RefrigerantPipingDrawingNames">
 <summary>Determines piping drawing file names</summary>
</member>
<member name="M:RAE.Solutions.drawings.RefrigerantPipingDrawingNames.#ctor(System.String,RAE.RAESolutions.Business.Entities.EquipmentOptionList)">
 <summary>Initializes new piping drawing name</summary>
</member>
<member name="T:RAE.Solutions.drawings.SharedConnectionFactory">
 <summary>Allows database connection to be reused without being closed</summary>
</member>
<member name="T:RAE.Solutions.drawings.DrawingPdf">
 <summary>
 A pdf containing a drawing (an image).
 </summary>
 <remarks>
 Example: 
 Dim unitDrawingPdf As New DrawingPdf(drawingPath)
 unitDrawingPdf.SavePdf()
 unitDrawingPdf.DeleteDrawing()
 </remarks>
</member>
<member name="P:RAE.Solutions.drawings.DrawingPdf.DrawingFilePath">
 <summary>
 The file path to the drawing to generate the pdf from.
 </summary>
</member>
<member name="P:RAE.Solutions.drawings.DrawingPdf.Pdf">
 <summary>
 The pdf document containing the drawing.
 </summary>
</member>
<member name="M:RAE.Solutions.drawings.DrawingPdf.#ctor(System.String)">
 <summary>
 Constructs a new drawing pdf containing the drawing at the specified file path.
 </summary>
 <param name="drawingFilePath">
 File path to the drawing to generate the pdf from (could be a jpg).
 </param>
</member>
<member name="M:RAE.Solutions.drawings.DrawingPdf.SavePdf">
 <summary>
 Saves pdf containing drawing to the same directory the drawing was in.
 </summary>
</member>
<member name="M:RAE.Solutions.drawings.DrawingPdf.SavePdf(System.String)">
 <summary>
 Saves pdf containing drawing to the specified file path.
 </summary>
 <param name="filePath">
 File path to save the pdf to (example: c:\drawing.pdf)
 </param>
</member>
<member name="M:RAE.Solutions.drawings.DrawingPdf.DeleteDrawing">
 <summary>
 Deletes the drawing used to generate the pdf.
 </summary>
</member>
<member name="P:RAE.Solutions.drawings.RefrigerantPipingDrawing.CircuitInfo">
 <summary>Circuit info (i forgot what this is for ask cliff)</summary>
</member>
<member name="P:RAE.Solutions.drawings.RefrigerantPipingDrawing.SST">
 <summary>Saturated suction temperature in degrees Fahrenheit</summary>
</member>
<member name="P:RAE.Solutions.drawings.RefrigerantPipingDrawing.Refrigerant">
 <summary>Refrigerant (ex. R22)</summary>
</member>
<member name="P:RAE.Solutions.drawings.RefrigerantPipingDrawing.Capacity1">
 <summary>Capacity for circuit 1 in BTUH</summary>
</member>
<member name="M:RAE.Solutions.drawings.ecalc.mca(System.Object,System.Object)">
 <summary>minimum circuit amps</summary>
 <param name="lg">largest rla</param>
</member>
<member name="M:RAE.Solutions.drawings.ecalc.mop(System.Object,System.Object)">
 <summary>max overcurrent protection</summary>
 <param name="lg">largest rla</param>
 <param name="rla">total rla</param>
</member>
<member name="M:RAE.Solutions.drawings.ecalc.fuse(System.Object)">
 <summary>selects largest nominal fuse size that is less than the mop.</summary>
 <param name="mop">max overcurrent protection</param>
 ''' <remarks>Standard fuse sizes   
 15, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 90, 100, 110, 125, 150, 200, 225, 250, and 300.
 </remarks>
</member>
<member name="M:RAE.Solutions.drawings.ecalc.t(RAE.RAESolutions.Business.Division)">
 <summary>transformer amps</summary>
</member>
<member name="M:RAE.Solutions.drawings.ecalc.outlet(System.Object)">
 <summary>Convenience Outlet</summary>
 <param name="v">voltage (460, 230, 208)</param>
</member>
<member name="T:RAE.Solutions.drawings.pp_ecalc">
 <summary>stand-alone pump package electrical calculator</summary>
</member>
<member name="M:RAE.Solutions.drawings.cu_ecalc.rla(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
 <summary>rated load amps</summary>
 <param name="c">compressor amps</param>
 <param name="cq">compressor quantity</param>
 <param name="f">fan amps</param>
 <param name="fq">fan quantity</param>
 <param name="et10">option et10 - kva transformer w/ 15 amp gfi outlet (convenience outlet)</param>
 <param name="v">voltage (460, 230, 208)</param>
</member>
<member name="T:RAE.Solutions.Chillers.Evaporator1">
 <summary>Chiller evaporator</summary>
 <remarks>Has same fields as in table, ChillerData, in chiller database</remarks>
</member>
<member name="T:RAE.Solutions.Chillers.Condenser1">
 <summary>Defines conenser description and filename</summary>
</member>
<member name="M:RAE.Solutions.Chillers.Condenser1.ToString">
 <summary>Returns description</summary>
</member>
<member name="P:RAE.Solutions.chiller_evaporators.evaporator.refrigerant_pressure_drop">
 <summary>refrigerant pressure drop in psid</summary>
</member>
<member name="P:RAE.Solutions.chiller_evaporators.evaporator.refrigerant_flow">
 <summary>refrigerant flow in lbm/hr</summary>
</member>
<member name="P:RAE.Solutions.chiller_evaporators.evaporator.fluid_nozzle">
 <summary>fluid nozzle rho v^2 [lbm/ft*s^2]</summary>
</member>
<member name="M:RAE.Solutions.chiller_evaporators.evaporator_factory.Create(RAE.Solutions.chiller_evaporators.evaporator_spec,RAE.Solutions.chiller_evaporators.evaporator)">
 <summary>creates/rates evaporator at a different approach</summary>
</member>
<member name="M:RAE.Solutions.chiller_evaporators.evaporator_factory.Create(RAE.Solutions.chiller_evaporators.evaporator_spec,StandardRefrigeration.Rating.Output)">
 <summary>creates evaporator based on a rating</summary>
</member>
<member name="M:RAE.Solutions.chiller_evaporators.evaporator_factory.Create(RAE.Solutions.chiller_evaporators.evaporator_spec,System.String)">
 <summary>creates evaporator based on evaporator part number, after chiller model selected</summary>
 <remarks>the chiller data references the evaporator data by the evaporator part number</remarks>   
</member>
<member name="F:RAE.Solutions.chiller_evaporators.evaporator_spec.num_circuits">
 <summary>number of refrigeration circuits</summary>
</member>
<member name="F:RAE.Solutions.chiller_evaporators.evaporator_spec.length">
 <summary>length of the default evaporator - used to select similarly sized alternate evaporators</summary>
</member>
<member name="F:RAE.Solutions.chiller_evaporators.evaporator_spec.authorization">
 <summary>1=employee; 3=rep</summary>
</member>
<member name="F:RAE.Solutions.condensers.condenser.subcooling_percentage">
 <summary>Subcooling percentage (ex. 10% would be 10)</summary>
</member>
<member name="M:RAE.Solutions.condensers.condenser_repository.RetrieveModels(System.String)">
 <summary>Retrieves list of condenser models for the condenser series.</summary>
 <param name="series">Condenser series to get models for (ie 10AO, PFC, RAC)</param>
</member>
<member name="M:RAE.Solutions.condensers.condenser_repository.RetrieveCondenser(System.String)">
 <summary>
 Retrieves condenser data based on the condenser model.
 </summary>
 <param name="model">
 Condenser model to retrieve data for
 </param>
 <exception cref="T:System.ArgumentNullException">
 Thrown when the condenser model parameter is null or empty.
 </exception>
 <exception cref="T:System.ArgumentException">
 Thrown when the condenser model does not exist in the data source.
 </exception>
</member>
<member name="M:RAE.Solutions.condensers.condenser_repository.RetrieveCoilData(System.String,System.String)">
 <summary>
 Retrieve data in coil curves table (curves, number of rows, diameter)
 </summary>
</member>
<member name="T:RAE.Solutions.condensers.condenser_repository.CoilData">
 <summary>
 Data for the coil such as curves, number of rows, etc.
 </summary>
</member>
<member name="P:RAE.Solutions.condensers.condenser_repository.CoilData.TubeSurface">
 <summary>
 Number of rows
 </summary>
</member>
<member name="P:RAE.Solutions.condensers.condenser_repository.CoilData.NumRows">
 <summary>
 Number of rows
 </summary>
</member>
<member name="P:RAE.Solutions.condensers.condenser_repository.CoilData.Diameter">
 <summary>
 Diameter
 </summary>
</member>
<member name="P:RAE.Solutions.condensers.condenser_repository.CoilData.PressureCoefficients">
 <summary>
 Pressure coefficients (indices 0-4)
 </summary>
</member>
<member name="P:RAE.Solutions.condensers.condenser_repository.CoilData.FpiData">
 <summary>
 Data that is dependent on the fins per inch in a coil
 </summary>
</member>
<member name="T:RAE.Solutions.condensers.condenser_repository.FpiData">
 <summary>
 Data that is dependent on the number of fins per inch the coil has
 </summary>
</member>
<member name="P:RAE.Solutions.condensers.condenser_repository.FpiData.Fpi">
 <summary>
 Fins per inch
 </summary>
</member>
<member name="P:RAE.Solutions.condensers.condenser_repository.FpiData.PressureCoefficient">
 <summary>
 Pressure coefficient
 </summary>
</member>
<member name="P:RAE.Solutions.condensers.condenser_repository.FpiData.FanCoefficients">
 <summary>
 Fan coefficients (indices 0-4)
 </summary>
</member>
<member name="M:RAE.Solutions.cu_uc_balances.balance_system.balance.CheckEvaporatingTemperatureRange(System.String,System.Single)">
 <summary>Checks evaporating temperature range for the unit cooler parameter</summary>
</member>
<member name="M:RAE.Solutions.cu_uc_balances.balance_system.balance.CheckCompressorTemperatureLimits(System.String,System.Double,System.Double)">
 <summary>
 Checks that compressor suction and condensing temperatures are within the limits.
 Compressor is selected based on the condensing unit model.
 Returns message if a temperature is out of range; else returns null.
 </summary>
</member>
<member name="T:RAE.Solutions.unit_coolers.database_formatter">
 <summary>converts model from format used in pricing database to format used in engineering database.</summary>
 <remarks>ex. pricing/input model: BOC 550-1916HG. ex. engineering/output model: BOC 554-1916.</remarks>
</member>
<member name="T:RAE.Solutions.evaporative_condenser_chillers.plv_algorithm">
 <summary>Part load value algorithm is used for both IPLV and NPLV.</summary>
</member>
<member name="T:RAE.Solutions.user">
 <summary>User contains information about a user of the application.</summary>
</member>
<member name="F:RAE.Solutions.user.authority_group">
 <summary>Group that defines its members' authorization level.</summary>
</member>
<member name="P:RAE.Solutions.user.access_level">
 <summary>Access level. Indicates the information that the user is allowed to access.</summary>
 <remarks>Determines access to certain divisions and may restrict pricing information.</remarks>
</member>
<member name="P:RAE.Solutions.user.full_name">
 <summary>First name space last name</summary>
</member>
<member name="M:RAE.Solutions.user.is(System.String)">
 <summary>True if this user's username matches the username parameter</summary>
 <param name="username">Username to compare to this user</param>
</member>
<member name="M:RAE.Solutions.user.ToString">
 <summary>User's full name (first then last)</summary>
</member>
<member name="M:RAE.Solutions.user.parse_full_name(System.String)">
 <summary>Sets user's first and last name based upon the provided full name.</summary>
</member>
<member name="T:RAE.Solutions.group">
 <summary>Groups of usernames</summary>
</member>
<member name="F:RAE.Solutions.CoolingMedia.Ethylene">
 <summary>Ethylene glycol</summary>
</member>
<member name="F:RAE.Solutions.CoolingMedia.Propylene">
 <summary>Propylene glycol</summary>
</member>
<member name="P:RAE.Solutions.IFluid.Max">
 <summary>Max glycol percentage</summary>
</member>
<member name="P:RAE.Solutions.IFluid.Min">
 <summary>Min glycol percentage</summary>
</member>
<member name="P:RAE.Solutions.IFluid.FreezePoint">
 <summary>Point at which fluid freezes in degrees Fahrenheit</summary>
</member>
<member name="P:RAE.Solutions.IFluid.MinSuctionTemp">
 <summary>Min recommended suction temperature in degrees Fahrenheit</summary>
</member>
<member name="M:RAE.Solutions.IFluid.PercentageInRange">
 <summary>True if fluid percentage is in range. Recommend to pass percentage into constructor</summary>
</member>
<member name="M:RAE.Solutions.Water.IsInRange">
 <summary>Water doesn't contain glycol percentage so it's always in range</summary>
</member>
<member name="T:RAE.DataAccess.SpecialOptions.ConnectionString">
 <summary>
 Provides connection string information.
 </summary>
 <remarks>
 Call Initialize(dbFolderPath) before using any of the other data access methods in this assembly.
 Uses default database location when public method Initialize hasn't been called which is useful for testing and debugging.
 Uses specified database folder path when Initialize is called which is useful for release version.
 </remarks>
</member>
<member name="F:RAE.DataAccess.SpecialOptions.ConnectionString.dbName">
 <summary>
 Database file name.
 </summary>
</member>
<member name="F:RAE.DataAccess.SpecialOptions.ConnectionString.testDbPath">
 <summary>
 Relative path beginning in testDllPath's folder.
 </summary>
</member>
<member name="F:RAE.DataAccess.SpecialOptions.ConnectionString.testDllPath">
 <summary>
 Default path of this assembly, used during testing.
 </summary>
</member>
<member name="P:RAE.DataAccess.SpecialOptions.ConnectionString.Text">
 <summary>SpecialOptions database connection string
 </summary>
</member>
<member name="P:RAE.DataAccess.SpecialOptions.ConnectionString.DataSource">
 <summary>Data source (database path)
 </summary>
</member>
<member name="P:RAE.DataAccess.SpecialOptions.ConnectionString.Provider">
 <summary>Database provider
 </summary>
</member>
<member name="M:RAE.DataAccess.SpecialOptions.ConnectionString.Initialize(System.String)">
 <summary>
 Initializes assembly by setting connection string. 
 Must call this before using any of the assemblies data access methods.
 </summary>
 <param name="dbFolderPath">
 Database path of SpecialOptions.mdb.
 </param>
 <remarks>
 This should be used during release version.
 </remarks>
</member>
<member name="M:RAE.DataAccess.SpecialOptions.ConnectionString.Initialize">
 <summary>
 Initializes assembly by setting connection string. Default.
 </summary>
 <remarks>
 This will be used by default if the Public Initialize(dbPath) has not be called.
 </remarks>
</member>
<member name="M:RAE.DataAccess.SpecialOptions.ConnectionString.SetConnectionString(System.String)">
 <summary>
 Sets connection string for the specified data source.
 </summary>
 <param name="dataSource">
 Database file path.
 </param>
</member>
<member name="T:RAE.DataAccess.SpecialOptions.SpecialOptionsDa">
 <summary>
 Provides data access to SpecialOptions database.
 </summary>
 <history by="Casey Joyce" finish="2006/05/31" hours="2">
 Created
 </history>
</member>
<member name="M:RAE.DataAccess.SpecialOptions.SpecialOptionsDa.Create(System.String,System.Double,System.String,System.String,System.DateTime)">
 <summary>
 Creates special option and retrieves its unique identifier.
 </summary>
</member>
<member name="M:RAE.DataAccess.SpecialOptions.SpecialOptionsDa.Retrieve(System.Int32,System.String@,System.Double@,System.String@,System.String@,System.DateTime@,System.DateTime@)">
 <summary>
 Retrieves special options by ID.
 </summary>
 <returns>
 Boolean indicating whether special exists. True if option exists; else false.
 </returns>
</member>
<member name="M:RAE.DataAccess.SpecialOptions.SpecialOptionsDa.RetrieveById(System.Int32)">
 <summary>
 Retrieves special option by ID; returns data table.
 </summary>
 <param name="id">
 Unique ID to retrieve special option by.</param>
 <returns>
 Table with special option with ID.
 </returns>
</member>
<member name="M:RAE.DataAccess.SpecialOptions.SpecialOptionsDa.Update(System.String,System.Double,System.String,System.String,System.DateTime,System.Int32)">
 <summary>
 Updates special option that has the specified ID.
 </summary>
</member>
<member name="M:RAE.DataAccess.SpecialOptions.SpecialOptionsDa.Verify(System.Int32,System.Double)">
 <summary>
 Verifies the special option ID and price combination.
 </summary>
 <param name="id">
 Special option unique ID.</param>
 <param name="price">
 Special option's assigned price.</param>
 <returns>
 Verification message. Null if verfication succeeded.</returns>
</member>
<member name="M:RAE.DataAccess.SpecialOptions.SpecialOptionsDa.RetrieveByAssignedBy(System.String)">
 <summary>
 Retrieves special options assigned by the specified person.
 </summary>
 <param name="assignedBy">
 Person special options are assigned by.</param>
 <returns>
 Table of special options assigned by specified person.</returns>
</member>
<member name="M:RAE.DataAccess.SpecialOptions.SpecialOptionsDa.RetrieveByAssignedTo(System.String)">
 <summary>
 Retrieves special options assigned to the specified person.
 </summary>
 <param name="assignedTo">
 Person special options are assigned to.</param>
 <returns>
 Table of special option assignments assigned to specified person.</returns>
</member>
<member name="M:RAE.DataAccess.SpecialOptions.SpecialOptionsDa.RetrieveAll">
 <summary>
 Retrieves all special options in table.
 </summary>
</member>
<member name="M:RAE.DataAccess.SpecialOptions.SpecialOptionsDa.RetrieveDataTable(System.String)">
 <summary>
 Retrieves data table depending on SQL parameter.
 </summary>
 <param name="sql">
 SQL command to execute that selects a table of special option info.</param>
</member>
<member name="T:RAE.DataAccess.SpecialOptions.SpecialOptionsTable">
 <summary>
 Special options table and columns names.
 </summary>
</member>
<member name="T:RAE.DataAccess.SpecialOptions.SqlFactory">
 <summary>
 SQL factory to generate SQL commands for data access.
 </summary>
</member>
<member name="M:RAE.reflection.domain.clone``1(``0)">
 <summary>clones structure or object with parameterless constructor by copying public fields</summary>
</member>
<member name="T:RAE.Data.Access.LegacyPricing">
 <summary>Legacy pricing data access</summary>
</member>
<member name="T:RAE.Data.Access.BoxLoadDto">
 <summary>
 Box load data transfer object
 </summary>
</member>
<member name="P:RAE.Data.Access.BoxLoadDto.Id">
 <summary>
 Database ID
 </summary>
</member>
<member name="P:RAE.Data.Access.BoxLoadDto.ItemId">
 <summary>
 Process/Item ID
 </summary>
</member>
<member name="P:RAE.Data.Access.BoxLoadDto.ItemRevision">
 <summary>
 Item revision
 </summary>
</member>
<member name="P:RAE.Data.Access.BoxLoadDto.ProjectId">
 <summary>
 Project ID
 </summary>
</member>
<member name="P:RAE.Data.Access.BoxLoadDto.Description">
 <summary>
 Description
 </summary>
</member>
<member name="P:RAE.Data.Access.BoxLoadDto.UserCapacity">
 <summary>
 Capacity the user entered
 </summary>
</member>
<member name="P:RAE.Data.Access.BoxLoadDto.UserCapacityChecked">
 <summary>
 User capacity
 </summary>
</member>
<member name="P:RAE.Data.Access.BoxLoadDto.Ambient">
 <summary>
 Ambient temperature
 </summary>
</member>
<member name="P:RAE.Data.Access.BoxLoadDto.ExtWb">
 <summary>
 External wet bulb
 </summary>
</member>
<member name="P:RAE.Data.Access.BoxLoadDto.RmTemp">
 <summary>
 Room temperature
 </summary>
</member>
<member name="T:RAE.Data.Access.BoxLoadProjects">
 <summary>
 Box load data access
 </summary>
</member>
<member name="M:RAE.Data.Access.BoxLoadProjects.IsLinked(System.Int32)">
 <summary>
 Returns true if box load is linked
 </summary>
 <param name="dbId">
 Box load database ID
 </param>
</member>
<member name="M:RAE.Data.Access.BoxLoadProjects.RetrieveDbId(System.String,System.Single)">
 <summary>
 Retrieves database ID for box load with linked item.
 </summary>
</member>
<member name="M:RAE.Data.Access.BoxLoadProjects.#ctor">
 <summary>
 Initializes new data access for box load project
 </summary>
</member>
<member name="M:RAE.Data.Access.BoxLoadProjects.Retrieve(System.String)">
 <summary>
 Retrieves latest revision.
 </summary>
 <param name="itemId">
 Item ID
 </param>
</member>
<member name="M:RAE.Data.Access.BoxLoadProjects.Retrieve(System.String,System.Int32)">
 <summary>
 Retrieves item at specific revision
 </summary>
 <param name="itemId">
 ID of item to retrieve
 </param>
 <param name="itemRevision">
 Revision of item to retrieve
 </param>
</member>
<member name="M:RAE.Data.Access.BoxLoadProjects.Insert(RAE.Data.Access.BoxLoadDto)">
 <summary>
 Inserts a new box load
 </summary>
 <param name="dto">
 Box load data transfer object
 </param>
</member>
<member name="M:RAE.Data.Access.BoxLoadProjects.Update(RAE.Data.Access.BoxLoadDto)">
 <summary>
 Updates existing box load
 </summary>
 <param name="dto">
 Box laod data transer object
 </param>
</member>
<member name="M:RAE.Data.Access.BoxLoadProjects.Delete(System.Int32)">
 <summary>
 Deletes a specified item based on its unique database ID.
 </summary>
 <param name="id">
 Unique database ID
 </param>
</member>
<member name="T:RAE.Data.Access.IItemDto">
 <summary>
 Item data transfer object
 </summary>
</member>
<member name="T:RAE.Data.Access.Item`1">
 <summary>
 Item data access
 </summary>
</member>
<member name="M:RAE.Data.Access.Item`1.#ctor(RAE.Data.Access.ConnectionFactory,System.String)">
 <summary>
 Initializes a new instance of item data access
 </summary>
 <param name="connectionFactory">
 Connection factory to create connection
 </param>
 <param name="tableName">
 Table name
 </param>
</member>
<member name="M:RAE.Data.Access.Item`1.Exists(System.String,System.Int32)">
 <summary>
 Returns true if item exists
 </summary>
 <param name="itemId">
 Item ID
 </param>
 <param name="itemRevision">
 Item revision
 </param>
</member>
<member name="M:RAE.Data.Access.Item`1.Delete(System.String)">
 <summary>
 Deletes an item including all its revisions
 </summary>
 <param name="itemId">
 ID of item to delete
 </param>
</member>
<member name="M:RAE.Data.Access.Item`1.Save(`0)">
 <summary>
 Saves the item. Inserts if item does NOT exists. Updates if item does exist.
 </summary>
 <param name="dto">
 Data transfer object
 </param>
 <returns>
 Database ID
 </returns>   
</member>
<member name="M:RAE.Data.Access.Item`1.Revisions(System.String)">
 <summary>
 Retrieves revisions for an item
 </summary>
 <param name="itemId">
 Item ID
 </param>
</member>
<member name="M:RAE.Data.Access.Item`1.IsLatest(System.String,System.Int32)">
 <summary>
 True if revision is the latest revision
 </summary>
 <param name="itemId">
 ID of the item to compare
 </param>
 <param name="revision">
 Revision to compare
 </param>
</member>
<member name="M:RAE.Data.Access.Item`1.Latest(System.String)">
 <summary>
 Retrieves the latest revision of the item
 </summary>
 <param name="itemId">
 ID of the item whose latest revision will be retrieved
 </param>
</member>
<member name="T:RAE.Data.Access.DataAccessBase">
 <summary>
 Basic data access for retrieving a table, a scalar or executing a command.
 </summary>
</member>
<member name="M:RAE.Data.Access.DataAccessBase.#ctor(RAE.Data.Access.IConnectionFactory)">
 <summary>Initializes a new data access base</summary>
 <param name="connectionFactory">Connection factory</param>
</member>
<member name="M:RAE.Data.Access.DataAccessBase.RetrieveTable(System.String)">
 <summary>Retrieves an untyped table based on the SQL query</summary>
 <param name="sqlQuery">SQL query that specifies what data to return in the table</param>
</member>
<member name="M:RAE.Data.Access.DataAccessBase.ExecuteNonQuery(System.String)">
 <summary>Executes a non-query</summary>
 <param name="sqlStatement">SQL statement to execute</param>
</member>
<member name="M:RAE.Data.Access.DataAccessBase.ExecuteScalar``1(System.String)">
 <summary>Retrieves scalar value</summary>
 <typeparam name="T">Type of value being returned from database</typeparam>
 <param name="sqlQuery">SQL query that returns scalar value</param>
</member>
<member name="M:RAE.Data.Access.DataAccessBase.ExecuteScalar(System.String)">
 <summary>Retrieves a scalar value as an object. Value can be DBNull.</summary>
 <remarks>DBNull.ToString() is equal to empty string</remarks>
</member>
<member name="M:RAE.Data.Access.DataAccessBase.ExecuteNullableScalar``1(System.String)">
 <summary>Retrieves a scalar that could be null.</summary>
 <typeparam name="T">Type of scalar</typeparam>
 <param name="sqlQuery">SQL query to retrieve scalar</param>
</member>
<member name="T:RAE.Data.Access.ItemSql">
 <summary>
 Builds SQL statements for items
 </summary>
</member>
<member name="M:RAE.Data.Access.ItemSql.#ctor(System.String)">
 <summary>
 Initializes a new item SQL
 </summary>
 <param name="tableName"></param>
 <remarks></remarks>
</member>
<member name="P:RAE.Data.Access.ItemSql.TableName">
 <summary>
 Name of the table containing the items
 </summary>
</member>
<member name="M:RAE.Data.Access.ItemSql.Count(System.String,System.Int32)">
 <summary>
 SQL statement that retrieves the number of items with the item ID and revision.
 Shouldn't be more than one.   
 </summary>
 <param name="itemId">
 Item ID
 </param>
 <param name="itemRevision">
 Item revision
 </param>
</member>
<member name="M:RAE.Data.Access.ItemSql.Revisions(System.String)">
 <summary>
 SQL statement that retrieves item revisions based on the item ID.
 </summary>
 <param name="itemId">
 Item ID
 </param>
</member>
<member name="M:RAE.Data.Access.ItemSql.Latest(System.String)">
 <summary>
 Retrieves latest revision
 </summary>
 <param name="itemId">
 Item ID
 </param>
</member>
<member name="M:RAE.Data.Access.ItemSql.Delete(System.String)">
 <summary>
 SQL statement that deletes an item including all its revisions.
 </summary>
 <param name="itemId">
 ID of item to delete
 </param>
</member>
<member name="M:RAE.Data.Access.ItemSql.Retrieve(System.String,System.Int32)">
 <summary>
 SQL statement that retrieves an item
 </summary>
 <param name="itemId">
 ID of item to retrieve
 </param>
 <param name="itemRevision">
 Revision of item to retrieve
 </param>
</member>
<member name="M:RAE.Data.Access.ItemSql.Id(System.String)">
 <summary>
 SQL statement to retrieve the ID that was just inserted.
 </summary>
 <param name="columnName">
 ID column
 </param>
</member>
<member name="M:RAE.Data.Access.ItemSql.Id">
 <summary>
 SQL statement that retrieves the ID that was just inserted.
 Assumes column name is ID.
 </summary>
</member>
<member name="M:RAE.Data.Access.IDataAccess`1.Retrieve(System.String)">
 <summary>
 Retrieves item's latest revision
 </summary>
</member>
<member name="M:RAE.Data.Access.IDataAccess`1.Retrieve(System.String,System.Int32)">
 <summary>
 Retrieves item at specified revision
 </summary>
</member>
<member name="T:RAE.Data.Access.ConnectionFactory">
 <summary>
 Connection factory creates a connection to a database.
 </summary>
 <remarks>
 <para>
 SQL Server Connection String
 Server:
 Data Source=[ServerPath]; Initial Catalog=[DataBase]; User Id=[Username]; Password=[Password];
 Data Source=Fileserver1; Initial Catalog=RAESolutions; User Id=admin; Password=pass;
 Local:
 Data Source=[ComputerName\InstanceName]; Initial Catalog=[Database];
 Data Source=RAE690\SQLExpress; Initial Catalog=RAESolutions;
 </para>
 <para>
 Microsoft Access Connection String
 Data Source=[FilePath]; Provider=[Provider];
 Data Source=C:\Program Files\RAESolutions\Databases\Projects.mdb; Provider=Microsoft.Jet.OLEDB.4.0;
 </para>
 </remarks>
</member>
<member name="M:RAE.Data.Access.ConnectionFactory.#ctor(System.String)">
 <summary>Initializes connection factory with connection string.</summary>
 <param name="connectionString">Connection string</param>
</member>
<member name="M:RAE.Data.Access.ConnectionFactory.Create">
 <summary>
 Creates a connection based on the connection string provided in the constructor.
 </summary>
</member>
<member name="F:RAE.Data.Access.ConnectionName.Projects">
 <summary>Contains user's project data.</summary>
</member>
<member name="T:RAE.Data.Access.Identities">
 <summary>
 Provides data access to database containing identities.
 </summary>
</member>
<member name="P:RAE.Persistence.IAmAwareOfPersistence.IsPersisted">
 <summary>Returns true if item exists in data source already</summary>
</member>
<member name="T:RAE.Persistence.Navigator">
 <summary>Revision navigator</summary>
</member>
<member name="E:RAE.Persistence.Navigator.Navigating">
 <summary>
 Occurs before after the request to navigate, but before the item is navigated.
 Allows navigation to be canceled.   
 </summary>
</member>
<member name="E:RAE.Persistence.Navigator.Navigated">
 <summary>
 Occurs after an item has been navigated.
 </summary>
</member>
<member name="M:RAE.Persistence.Navigator.NavigateTo(RAE.Persistence.Revision)">
 <summary>
 Navigate to revision
 </summary>
 <param name="revision">
 Revision to navigate to
 </param>
 <exception cref="T:System.NullReferenceException">
 Thrown when the item to revision is null.
 </exception>
</member>
<member name="P:RAE.Persistence.Navigator.Item">
 <summary>
 Item that can be navigated by the navigator.
 </summary>
</member>
<member name="M:RAE.Persistence.Revision.#ctor(System.Int32,System.Int32)">
 <summary>
 Initializes a new revision with a major and minor revision.
 </summary>
</member>
<member name="P:RAE.Persistence.Revision.Major">
 <summary>
 Major revision supersedes the minor revision.
 </summary>
 <remarks>
 If a revision's major is greater, then it is always comparitively larger,
 even if it's minor revision is smaller.
 </remarks>
</member>
<member name="P:RAE.Persistence.Revision.Minor">
 <summary>
 Minor revision is superceded by the major revision.
 </summary>
</member>
<member name="M:RAE.Persistence.Revision.op_Equality(RAE.Persistence.Revision,RAE.Persistence.Revision)">
 <summary>
 True if revisions are equal
 </summary>
</member>
<member name="M:RAE.Persistence.Revision.op_Inequality(RAE.Persistence.Revision,RAE.Persistence.Revision)">
 <summary>
 True if revision are NOT equal
 </summary>
</member>
<member name="M:RAE.Persistence.Revision.Increment">
 <summary>
 Returns a new incremented revision
 </summary>
</member>
<member name="M:RAE.Persistence.Revision.Equals(RAE.Persistence.Revision)">
 <summary>
 True if this revision is equal to the other
 </summary>
 <param name="other">
 The other revision to compare equality with
 </param>
</member>
<member name="M:RAE.Persistence.Revision.Equals(System.Object)">
 <summary>
 True if this revision is equal to the other
 </summary>
 <param name="obj">
 Other revision
 </param>
</member>
<member name="M:RAE.Persistence.Revision.CompareTo(RAE.Persistence.Revision)">
 <summary>
 Compares this revision with another revision to see which is greater.
 </summary>
 <param name="other">
 Other revision to compare against
 </param>
 <remarks>
 If me less other return less 0
 If me = other return 0
 If me greater other return greater 0
 A null is less than a non null
 </remarks>
</member>
<member name="M:RAE.Persistence.Revision.ToString">
 <summary>
 String representation of revision (Format: [Major].[Minor]) (Ex: 1.2)
 </summary>
</member>
<member name="M:RAE.Persistence.Revision.compare(RAE.Persistence.Revision,RAE.Persistence.Revision)">
 <summary>
 Compares two values to determine which is greater
 </summary>
 <remarks>
 If x less y return less 0
 If x = y return 0
 If x greater y return greater 0
 A null is less than a non null
 </remarks>
</member>
<member name="T:RAE.Persistence.RevisionList">
 <summary>A list of revisions that is sorted and does not allow duplicate revisions.</summary>
</member>
<member name="M:RAE.Persistence.RevisionList.Add(RAE.Persistence.Revision)">
 <summary>Adds a revision</summary>
 <param name="revision">Revision to add cannot exist in list</param>
</member>
<member name="P:RAE.Persistence.RevisionList.Current">
 <summary>Current revision</summary>
 <remarks>
 What about when indexes are sorted or otherwise changed?
     Sorting shouldn't matter since current references revision not index.
 What about removing indexes?
     Revisions should never be removed      
 </remarks>   
</member>
<member name="P:RAE.Persistence.RevisionList.First">
 <summary>First revision</summary>
</member>
<member name="P:RAE.Persistence.RevisionList.Previous">
 <summary>Returns the previous revision before the current revision.</summary>
 <remarks>If the current revision is the first revision made, returns the first revision.</remarks>
</member>
<member name="P:RAE.Persistence.RevisionList.Next">
 <summary>Returns the next revision after the current revision</summary>
</member>
<member name="P:RAE.Persistence.RevisionList.Last">
 <summary>Last revision</summary>
</member>
<member name="P:RAE.Persistence.RevisionList.IsLatest">
 <summary>True if current revision is the latest revision</summary>
</member>
<member name="P:RAE.Persistence.RevisionList.IsFirst">
 <summary>True if current revision the first revision</summary>
</member>
<member name="P:RAE.Engineering.Refrigerant.Type">
 <summary>
 Type
 </summary>
</member>
<member name="M:RAE.Engineering.Refrigerant.GetCondenserPressure(System.Double)">
 <summary>
 Get's refrigerant's pressure based on current temperature (liquid state)
 </summary>
 <param name="CurrentTemperature">Temperature as deg F</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RAE.Engineering.Refrigerant.GetEvapPressure(System.Double)">
 <summary>
 Get's refrigerant's pressure based on current temperature (gas state)
 </summary>
 <param name="CurrentTemperature">Temperature as deg F</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:balance_dataset">
<summary>
Represents a strongly typed in-memory cache of data.
</summary>
</member>
<member name="T:balance_dataset.balance_resultsDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:balance_dataset.balance_resultsRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:balance_dataset.balance_resultsRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:CondensingUnitRatingDataSet">
<summary>
Represents a strongly typed in-memory cache of data.
</summary>
</member>
<member name="T:CondensingUnitRatingDataSet.ResultsDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:CondensingUnitRatingDataSet.ResultsRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:CondensingUnitRatingDataSet.ResultsRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:IdentityFactory">
 <summary>
 Factory that creates identities based on username and password.
 </summary>
 <history by="Casey Joyce" finish="2006/07/11">
 Created
 </history>
</member>
<member name="M:IdentityFactory.#ctor">
 <summary>
 Constructor is private to prevent its use.
 </summary>
</member>
<member name="M:IdentityFactory.CreateIdentity(System.String,System.String)">
 <summary>
 Creates identities based on username and password.
 </summary>
 <param name="username">
 Username
 </param>
 <param name="password">
 Password
 </param>
 <returns>
 Created identity.
 </returns>
</member>
<member name="T:DrawingService.WebService2">
<remarks/>
</member>
<member name="M:DrawingService.WebService2.#ctor">
<remarks/>
</member>
<member name="E:DrawingService.WebService2.dxfToPDFCompleted">
<remarks/>
</member>
<member name="E:DrawingService.WebService2.dxfToPDFLinkCompleted">
<remarks/>
</member>
<member name="M:DrawingService.WebService2.dxfToPDF(System.String)">
<remarks/>
</member>
<member name="M:DrawingService.WebService2.dxfToPDFAsync(System.String)">
<remarks/>
</member>
<member name="M:DrawingService.WebService2.dxfToPDFAsync(System.String,System.Object)">
<remarks/>
</member>
<member name="M:DrawingService.WebService2.dxfToPDFLink(System.String)">
<remarks/>
</member>
<member name="M:DrawingService.WebService2.dxfToPDFLinkAsync(System.String)">
<remarks/>
</member>
<member name="M:DrawingService.WebService2.dxfToPDFLinkAsync(System.String,System.Object)">
<remarks/>
</member>
<member name="M:DrawingService.WebService2.CancelAsync(System.Object)">
<remarks/>
</member>
<member name="T:DrawingService.dxfToPDFCompletedEventHandler">
<remarks/>
</member>
<member name="T:DrawingService.dxfToPDFCompletedEventArgs">
<remarks/>
</member>
<member name="P:DrawingService.dxfToPDFCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:DrawingService.dxfToPDFLinkCompletedEventHandler">
<remarks/>
</member>
<member name="T:DrawingService.dxfToPDFLinkCompletedEventArgs">
<remarks/>
</member>
<member name="P:DrawingService.dxfToPDFLinkCompletedEventArgs.Result">
<remarks/>
</member>
</members>
</doc>

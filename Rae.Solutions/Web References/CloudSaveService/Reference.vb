'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
'
Namespace CloudSaveService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CloudSaveSoap", [Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class CloudSave
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private CreateCloudProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCloudIDFromGUIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyProjectsRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyProcessesRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyEquipmentRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyEquipmentRecord2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyEquipmentRecord3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private sendErrorEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyACChillerProcessesRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyAddressesRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyChillerRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyCompaniesRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyCondenserRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyCondenserProcessesRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyCondensingUnitRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyCondensingUnitProcessesRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyCoolStuffUserAshraeRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyCoolStuffReportProjectRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyCoolStuffProjectsRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyCoolStuffProductSelectionsReportRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyCoolStuffProductSelectionsRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyWCChillerProcessesRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyUnitCoolerProcessesRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyUnitCoolerRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopySpecialOptionsRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyRatingEquipmentRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyPumpPackageRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyOrderEntryContactsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyProjectContactsRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyProductCoolerRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyProcessSpecificRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyProcessEquipRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyOtherEquipmentCostsRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyFluidCoolerProcessesRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyEquipmentOptionsRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyEvapChillerProcessesRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyFluidCoolerRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyContactsRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyContactsRecord1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadACChillerProcessesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadWCChillerProcessesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadUnitCoolerProcessesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadUnitCoolerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadCompaniesRecordsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadContactsRecordsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadContactsRecords1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadProjectContactsRecordsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadOrderEntryContactsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadSpecialOptionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadRatingEquipmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadPumpPackageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadProjectsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadProductCoolerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadProcessSpecificOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadProcessesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadProcessEquipOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadOtherEquipmentCostsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadFluidCoolerProcessesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadFluidCoolerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadEvapChillerProcessesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadEquipmentOptionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadEquipmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadEquipment2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadEquipment3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadCondensingUnitProcessesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadCondensingUnitsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadCondenserProcessesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadCondensersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadChillersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUsersToShareWithOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCloudProjectsUserCanAccessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ShareOrUnshareProjectsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Rae.RaeSolutions.My.MySettings.Default.RaeSolutions_CloudSaveService_CloudSave
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event CreateCloudProjectCompleted As CreateCloudProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCloudIDFromGUIDCompleted As GetCloudIDFromGUIDCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyProjectsRecordCompleted As CopyProjectsRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyProcessesRecordCompleted As CopyProcessesRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyEquipmentRecordCompleted As CopyEquipmentRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyEquipmentRecord2Completed As CopyEquipmentRecord2CompletedEventHandler
        
        '''<remarks/>
        Public Event CopyEquipmentRecord3Completed As CopyEquipmentRecord3CompletedEventHandler
        
        '''<remarks/>
        Public Event sendErrorEmailCompleted As sendErrorEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyACChillerProcessesRecordCompleted As CopyACChillerProcessesRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyAddressesRecordCompleted As CopyAddressesRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyChillerRecordCompleted As CopyChillerRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyCompaniesRecordCompleted As CopyCompaniesRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyCondenserRecordCompleted As CopyCondenserRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyCondenserProcessesRecordCompleted As CopyCondenserProcessesRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyCondensingUnitRecordCompleted As CopyCondensingUnitRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyCondensingUnitProcessesRecordCompleted As CopyCondensingUnitProcessesRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyCoolStuffUserAshraeRecordCompleted As CopyCoolStuffUserAshraeRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyCoolStuffReportProjectRecordCompleted As CopyCoolStuffReportProjectRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyCoolStuffProjectsRecordCompleted As CopyCoolStuffProjectsRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyCoolStuffProductSelectionsReportRecordCompleted As CopyCoolStuffProductSelectionsReportRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyCoolStuffProductSelectionsRecordCompleted As CopyCoolStuffProductSelectionsRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyWCChillerProcessesRecordCompleted As CopyWCChillerProcessesRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyUnitCoolerProcessesRecordCompleted As CopyUnitCoolerProcessesRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyUnitCoolerRecordCompleted As CopyUnitCoolerRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopySpecialOptionsRecordCompleted As CopySpecialOptionsRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyRatingEquipmentRecordCompleted As CopyRatingEquipmentRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyPumpPackageRecordCompleted As CopyPumpPackageRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyOrderEntryContactsCompleted As CopyOrderEntryContactsCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyProjectContactsRecordCompleted As CopyProjectContactsRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyProductCoolerRecordCompleted As CopyProductCoolerRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyProcessSpecificRecordCompleted As CopyProcessSpecificRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyProcessEquipRecordCompleted As CopyProcessEquipRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyOtherEquipmentCostsRecordCompleted As CopyOtherEquipmentCostsRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyFluidCoolerProcessesRecordCompleted As CopyFluidCoolerProcessesRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyEquipmentOptionsRecordCompleted As CopyEquipmentOptionsRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyEvapChillerProcessesRecordCompleted As CopyEvapChillerProcessesRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyFluidCoolerRecordCompleted As CopyFluidCoolerRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyContactsRecordCompleted As CopyContactsRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyContactsRecord1Completed As CopyContactsRecord1CompletedEventHandler
        
        '''<remarks/>
        Public Event LoadACChillerProcessesCompleted As LoadACChillerProcessesCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadWCChillerProcessesCompleted As LoadWCChillerProcessesCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadUnitCoolerProcessesCompleted As LoadUnitCoolerProcessesCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadUnitCoolerCompleted As LoadUnitCoolerCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadCompaniesRecordsCompleted As LoadCompaniesRecordsCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadContactsRecordsCompleted As LoadContactsRecordsCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadContactsRecords1Completed As LoadContactsRecords1CompletedEventHandler
        
        '''<remarks/>
        Public Event LoadProjectContactsRecordsCompleted As LoadProjectContactsRecordsCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadOrderEntryContactsCompleted As LoadOrderEntryContactsCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadSpecialOptionsCompleted As LoadSpecialOptionsCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadRatingEquipmentCompleted As LoadRatingEquipmentCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadPumpPackageCompleted As LoadPumpPackageCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadProjectsCompleted As LoadProjectsCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadProductCoolerCompleted As LoadProductCoolerCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadProcessSpecificCompleted As LoadProcessSpecificCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadProcessesCompleted As LoadProcessesCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadProcessEquipCompleted As LoadProcessEquipCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadOtherEquipmentCostsCompleted As LoadOtherEquipmentCostsCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadFluidCoolerProcessesCompleted As LoadFluidCoolerProcessesCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadFluidCoolerCompleted As LoadFluidCoolerCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadEvapChillerProcessesCompleted As LoadEvapChillerProcessesCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadEquipmentOptionsCompleted As LoadEquipmentOptionsCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadEquipmentCompleted As LoadEquipmentCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadEquipment2Completed As LoadEquipment2CompletedEventHandler
        
        '''<remarks/>
        Public Event LoadEquipment3Completed As LoadEquipment3CompletedEventHandler
        
        '''<remarks/>
        Public Event LoadCondensingUnitProcessesCompleted As LoadCondensingUnitProcessesCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadCondensingUnitsCompleted As LoadCondensingUnitsCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadCondenserProcessesCompleted As LoadCondenserProcessesCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadCondensersCompleted As LoadCondensersCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadChillersCompleted As LoadChillersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUsersToShareWithCompleted As GetUsersToShareWithCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCloudProjectsUserCanAccessCompleted As GetCloudProjectsUserCanAccessCompletedEventHandler
        
        '''<remarks/>
        Public Event ShareOrUnshareProjectsCompleted As ShareOrUnshareProjectsCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CreateCloudProject", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateCloudProject(ByVal userName As String, ByVal companyCode As String) As CloudProjectInfo
            Dim results() As Object = Me.Invoke("CreateCloudProject", New Object() {userName, companyCode})
            Return CType(results(0),CloudProjectInfo)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateCloudProject(ByVal userName As String, ByVal companyCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateCloudProject", New Object() {userName, companyCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateCloudProject(ByVal asyncResult As System.IAsyncResult) As CloudProjectInfo
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),CloudProjectInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateCloudProjectAsync(ByVal userName As String, ByVal companyCode As String)
            Me.CreateCloudProjectAsync(userName, companyCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateCloudProjectAsync(ByVal userName As String, ByVal companyCode As String, ByVal userState As Object)
            If (Me.CreateCloudProjectOperationCompleted Is Nothing) Then
                Me.CreateCloudProjectOperationCompleted = AddressOf Me.OnCreateCloudProjectOperationCompleted
            End If
            Me.InvokeAsync("CreateCloudProject", New Object() {userName, companyCode}, Me.CreateCloudProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateCloudProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateCloudProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateCloudProjectCompleted(Me, New CreateCloudProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/GetCloudIDFromGUID", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCloudIDFromGUID(ByVal shareGUID As String) As Integer
            Dim results() As Object = Me.Invoke("GetCloudIDFromGUID", New Object() {shareGUID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCloudIDFromGUID(ByVal shareGUID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCloudIDFromGUID", New Object() {shareGUID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCloudIDFromGUID(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCloudIDFromGUIDAsync(ByVal shareGUID As String)
            Me.GetCloudIDFromGUIDAsync(shareGUID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCloudIDFromGUIDAsync(ByVal shareGUID As String, ByVal userState As Object)
            If (Me.GetCloudIDFromGUIDOperationCompleted Is Nothing) Then
                Me.GetCloudIDFromGUIDOperationCompleted = AddressOf Me.OnGetCloudIDFromGUIDOperationCompleted
            End If
            Me.InvokeAsync("GetCloudIDFromGUID", New Object() {shareGUID}, Me.GetCloudIDFromGUIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCloudIDFromGUIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCloudIDFromGUIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCloudIDFromGUIDCompleted(Me, New GetCloudIDFromGUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyProjectsRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyProjectsRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal Name As String,  _
                    ByVal Notes As String,  _
                    ByVal Tag As String,  _
                    ByVal ReleaseStatus As String,  _
                    ByVal ReleaseNum As Integer,  _
                    ByVal HoursBeforeDeliveryToCall As Single,  _
                    ByVal PoNum As Integer,  _
                    ByVal PoDate As Date,  _
                    ByVal RequestedShipDate As Date,  _
                    ByVal SalesClass As String,  _
                    ByVal RepId As Integer,  _
                    ByVal ArchitectName As String,  _
                    ByVal ContractorName As String,  _
                    ByVal EngineerName As String,  _
                    ByVal RepCompanyId As Integer,  _
                    ByVal ArchitectCompanyName As String,  _
                    ByVal ContractorCompanyName As String,  _
                    ByVal EngineerCompanyName As String,  _
                    ByVal Description As String,  _
                    ByVal ContactDataStructure As String,  _
                    ByVal ProjectOwner As String,  _
                    ByVal OpenedBy As String,  _
                    ByVal CheckedOutBy As String,  _
                    ByVal RevisionDate As Date)
            Me.Invoke("CopyProjectsRecord", New Object() {CloudID, ProjectId, ProjectRevision, Name, Notes, Tag, ReleaseStatus, ReleaseNum, HoursBeforeDeliveryToCall, PoNum, PoDate, RequestedShipDate, SalesClass, RepId, ArchitectName, ContractorName, EngineerName, RepCompanyId, ArchitectCompanyName, ContractorCompanyName, EngineerCompanyName, Description, ContactDataStructure, ProjectOwner, OpenedBy, CheckedOutBy, RevisionDate})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyProjectsRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal Name As String,  _
                    ByVal Notes As String,  _
                    ByVal Tag As String,  _
                    ByVal ReleaseStatus As String,  _
                    ByVal ReleaseNum As Integer,  _
                    ByVal HoursBeforeDeliveryToCall As Single,  _
                    ByVal PoNum As Integer,  _
                    ByVal PoDate As Date,  _
                    ByVal RequestedShipDate As Date,  _
                    ByVal SalesClass As String,  _
                    ByVal RepId As Integer,  _
                    ByVal ArchitectName As String,  _
                    ByVal ContractorName As String,  _
                    ByVal EngineerName As String,  _
                    ByVal RepCompanyId As Integer,  _
                    ByVal ArchitectCompanyName As String,  _
                    ByVal ContractorCompanyName As String,  _
                    ByVal EngineerCompanyName As String,  _
                    ByVal Description As String,  _
                    ByVal ContactDataStructure As String,  _
                    ByVal ProjectOwner As String,  _
                    ByVal OpenedBy As String,  _
                    ByVal CheckedOutBy As String,  _
                    ByVal RevisionDate As Date,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyProjectsRecord", New Object() {CloudID, ProjectId, ProjectRevision, Name, Notes, Tag, ReleaseStatus, ReleaseNum, HoursBeforeDeliveryToCall, PoNum, PoDate, RequestedShipDate, SalesClass, RepId, ArchitectName, ContractorName, EngineerName, RepCompanyId, ArchitectCompanyName, ContractorCompanyName, EngineerCompanyName, Description, ContactDataStructure, ProjectOwner, OpenedBy, CheckedOutBy, RevisionDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyProjectsRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyProjectsRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal Name As String,  _
                    ByVal Notes As String,  _
                    ByVal Tag As String,  _
                    ByVal ReleaseStatus As String,  _
                    ByVal ReleaseNum As Integer,  _
                    ByVal HoursBeforeDeliveryToCall As Single,  _
                    ByVal PoNum As Integer,  _
                    ByVal PoDate As Date,  _
                    ByVal RequestedShipDate As Date,  _
                    ByVal SalesClass As String,  _
                    ByVal RepId As Integer,  _
                    ByVal ArchitectName As String,  _
                    ByVal ContractorName As String,  _
                    ByVal EngineerName As String,  _
                    ByVal RepCompanyId As Integer,  _
                    ByVal ArchitectCompanyName As String,  _
                    ByVal ContractorCompanyName As String,  _
                    ByVal EngineerCompanyName As String,  _
                    ByVal Description As String,  _
                    ByVal ContactDataStructure As String,  _
                    ByVal ProjectOwner As String,  _
                    ByVal OpenedBy As String,  _
                    ByVal CheckedOutBy As String,  _
                    ByVal RevisionDate As Date)
            Me.CopyProjectsRecordAsync(CloudID, ProjectId, ProjectRevision, Name, Notes, Tag, ReleaseStatus, ReleaseNum, HoursBeforeDeliveryToCall, PoNum, PoDate, RequestedShipDate, SalesClass, RepId, ArchitectName, ContractorName, EngineerName, RepCompanyId, ArchitectCompanyName, ContractorCompanyName, EngineerCompanyName, Description, ContactDataStructure, ProjectOwner, OpenedBy, CheckedOutBy, RevisionDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyProjectsRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal Name As String,  _
                    ByVal Notes As String,  _
                    ByVal Tag As String,  _
                    ByVal ReleaseStatus As String,  _
                    ByVal ReleaseNum As Integer,  _
                    ByVal HoursBeforeDeliveryToCall As Single,  _
                    ByVal PoNum As Integer,  _
                    ByVal PoDate As Date,  _
                    ByVal RequestedShipDate As Date,  _
                    ByVal SalesClass As String,  _
                    ByVal RepId As Integer,  _
                    ByVal ArchitectName As String,  _
                    ByVal ContractorName As String,  _
                    ByVal EngineerName As String,  _
                    ByVal RepCompanyId As Integer,  _
                    ByVal ArchitectCompanyName As String,  _
                    ByVal ContractorCompanyName As String,  _
                    ByVal EngineerCompanyName As String,  _
                    ByVal Description As String,  _
                    ByVal ContactDataStructure As String,  _
                    ByVal ProjectOwner As String,  _
                    ByVal OpenedBy As String,  _
                    ByVal CheckedOutBy As String,  _
                    ByVal RevisionDate As Date,  _
                    ByVal userState As Object)
            If (Me.CopyProjectsRecordOperationCompleted Is Nothing) Then
                Me.CopyProjectsRecordOperationCompleted = AddressOf Me.OnCopyProjectsRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyProjectsRecord", New Object() {CloudID, ProjectId, ProjectRevision, Name, Notes, Tag, ReleaseStatus, ReleaseNum, HoursBeforeDeliveryToCall, PoNum, PoDate, RequestedShipDate, SalesClass, RepId, ArchitectName, ContractorName, EngineerName, RepCompanyId, ArchitectCompanyName, ContractorCompanyName, EngineerCompanyName, Description, ContactDataStructure, ProjectOwner, OpenedBy, CheckedOutBy, RevisionDate}, Me.CopyProjectsRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyProjectsRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyProjectsRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyProjectsRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyProcessesRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyProcessesRecord(ByVal CloudID As Integer, ByVal ID As String, ByVal ProjectID As String, ByVal ProcessTableName As String)
            Me.Invoke("CopyProcessesRecord", New Object() {CloudID, ID, ProjectID, ProcessTableName})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyProcessesRecord(ByVal CloudID As Integer, ByVal ID As String, ByVal ProjectID As String, ByVal ProcessTableName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyProcessesRecord", New Object() {CloudID, ID, ProjectID, ProcessTableName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyProcessesRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyProcessesRecordAsync(ByVal CloudID As Integer, ByVal ID As String, ByVal ProjectID As String, ByVal ProcessTableName As String)
            Me.CopyProcessesRecordAsync(CloudID, ID, ProjectID, ProcessTableName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyProcessesRecordAsync(ByVal CloudID As Integer, ByVal ID As String, ByVal ProjectID As String, ByVal ProcessTableName As String, ByVal userState As Object)
            If (Me.CopyProcessesRecordOperationCompleted Is Nothing) Then
                Me.CopyProcessesRecordOperationCompleted = AddressOf Me.OnCopyProcessesRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyProcessesRecord", New Object() {CloudID, ID, ProjectID, ProcessTableName}, Me.CopyProcessesRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyProcessesRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyProcessesRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyProcessesRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyEquipmentRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyEquipmentRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal EquipmentId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal Name As String,  _
                    ByVal TypeTableName As String,  _
                    ByVal Division As String,  _
                    ByVal Author As String,  _
                    ByVal Series As String,  _
                    ByVal Model As String,  _
                    ByVal Quantity As Integer,  _
                    ByVal ParMultiplier As Single,  _
                    ByVal WarrantyPrice As Single,  _
                    ByVal FreightPrice As Single,  _
                    ByVal StartUpPrice As Single,  _
                    ByVal CommissionRate As Single,  _
                    ByVal UnitVoltage As String,  _
                    ByVal ControlVoltage As String,  _
                    ByVal Length As Single,  _
                    ByVal Width As Single,  _
                    ByVal Height As Single,  _
                    ByVal Mca As Single,  _
                    ByVal Rla As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal Notes As String,  _
                    ByVal Tag As String,  _
                    ByVal ShippingWeight As Single,  _
                    ByVal OperatingWeight As Single,  _
                    ByVal Included As Boolean,  _
                    ByVal OtherPrice As Single,  _
                    ByVal OtherDescription As String,  _
                    ByVal CustomModel As String,  _
                    ByVal OverriddenBaseListPrice As Single,  _
                    ByVal ShouldOverrideBaseListPrice As Boolean,  _
                    ByVal MultiplierCode As String)
            Me.Invoke("CopyEquipmentRecord", New Object() {CloudID, ProjectId, ProjectRevision, EquipmentId, Revision, Name, TypeTableName, Division, Author, Series, Model, Quantity, ParMultiplier, WarrantyPrice, FreightPrice, StartUpPrice, CommissionRate, UnitVoltage, ControlVoltage, Length, Width, Height, Mca, Rla, Altitude, Notes, Tag, ShippingWeight, OperatingWeight, Included, OtherPrice, OtherDescription, CustomModel, OverriddenBaseListPrice, ShouldOverrideBaseListPrice, MultiplierCode})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyEquipmentRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal EquipmentId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal Name As String,  _
                    ByVal TypeTableName As String,  _
                    ByVal Division As String,  _
                    ByVal Author As String,  _
                    ByVal Series As String,  _
                    ByVal Model As String,  _
                    ByVal Quantity As Integer,  _
                    ByVal ParMultiplier As Single,  _
                    ByVal WarrantyPrice As Single,  _
                    ByVal FreightPrice As Single,  _
                    ByVal StartUpPrice As Single,  _
                    ByVal CommissionRate As Single,  _
                    ByVal UnitVoltage As String,  _
                    ByVal ControlVoltage As String,  _
                    ByVal Length As Single,  _
                    ByVal Width As Single,  _
                    ByVal Height As Single,  _
                    ByVal Mca As Single,  _
                    ByVal Rla As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal Notes As String,  _
                    ByVal Tag As String,  _
                    ByVal ShippingWeight As Single,  _
                    ByVal OperatingWeight As Single,  _
                    ByVal Included As Boolean,  _
                    ByVal OtherPrice As Single,  _
                    ByVal OtherDescription As String,  _
                    ByVal CustomModel As String,  _
                    ByVal OverriddenBaseListPrice As Single,  _
                    ByVal ShouldOverrideBaseListPrice As Boolean,  _
                    ByVal MultiplierCode As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyEquipmentRecord", New Object() {CloudID, ProjectId, ProjectRevision, EquipmentId, Revision, Name, TypeTableName, Division, Author, Series, Model, Quantity, ParMultiplier, WarrantyPrice, FreightPrice, StartUpPrice, CommissionRate, UnitVoltage, ControlVoltage, Length, Width, Height, Mca, Rla, Altitude, Notes, Tag, ShippingWeight, OperatingWeight, Included, OtherPrice, OtherDescription, CustomModel, OverriddenBaseListPrice, ShouldOverrideBaseListPrice, MultiplierCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyEquipmentRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyEquipmentRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal EquipmentId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal Name As String,  _
                    ByVal TypeTableName As String,  _
                    ByVal Division As String,  _
                    ByVal Author As String,  _
                    ByVal Series As String,  _
                    ByVal Model As String,  _
                    ByVal Quantity As Integer,  _
                    ByVal ParMultiplier As Single,  _
                    ByVal WarrantyPrice As Single,  _
                    ByVal FreightPrice As Single,  _
                    ByVal StartUpPrice As Single,  _
                    ByVal CommissionRate As Single,  _
                    ByVal UnitVoltage As String,  _
                    ByVal ControlVoltage As String,  _
                    ByVal Length As Single,  _
                    ByVal Width As Single,  _
                    ByVal Height As Single,  _
                    ByVal Mca As Single,  _
                    ByVal Rla As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal Notes As String,  _
                    ByVal Tag As String,  _
                    ByVal ShippingWeight As Single,  _
                    ByVal OperatingWeight As Single,  _
                    ByVal Included As Boolean,  _
                    ByVal OtherPrice As Single,  _
                    ByVal OtherDescription As String,  _
                    ByVal CustomModel As String,  _
                    ByVal OverriddenBaseListPrice As Single,  _
                    ByVal ShouldOverrideBaseListPrice As Boolean,  _
                    ByVal MultiplierCode As String)
            Me.CopyEquipmentRecordAsync(CloudID, ProjectId, ProjectRevision, EquipmentId, Revision, Name, TypeTableName, Division, Author, Series, Model, Quantity, ParMultiplier, WarrantyPrice, FreightPrice, StartUpPrice, CommissionRate, UnitVoltage, ControlVoltage, Length, Width, Height, Mca, Rla, Altitude, Notes, Tag, ShippingWeight, OperatingWeight, Included, OtherPrice, OtherDescription, CustomModel, OverriddenBaseListPrice, ShouldOverrideBaseListPrice, MultiplierCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyEquipmentRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal EquipmentId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal Name As String,  _
                    ByVal TypeTableName As String,  _
                    ByVal Division As String,  _
                    ByVal Author As String,  _
                    ByVal Series As String,  _
                    ByVal Model As String,  _
                    ByVal Quantity As Integer,  _
                    ByVal ParMultiplier As Single,  _
                    ByVal WarrantyPrice As Single,  _
                    ByVal FreightPrice As Single,  _
                    ByVal StartUpPrice As Single,  _
                    ByVal CommissionRate As Single,  _
                    ByVal UnitVoltage As String,  _
                    ByVal ControlVoltage As String,  _
                    ByVal Length As Single,  _
                    ByVal Width As Single,  _
                    ByVal Height As Single,  _
                    ByVal Mca As Single,  _
                    ByVal Rla As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal Notes As String,  _
                    ByVal Tag As String,  _
                    ByVal ShippingWeight As Single,  _
                    ByVal OperatingWeight As Single,  _
                    ByVal Included As Boolean,  _
                    ByVal OtherPrice As Single,  _
                    ByVal OtherDescription As String,  _
                    ByVal CustomModel As String,  _
                    ByVal OverriddenBaseListPrice As Single,  _
                    ByVal ShouldOverrideBaseListPrice As Boolean,  _
                    ByVal MultiplierCode As String,  _
                    ByVal userState As Object)
            If (Me.CopyEquipmentRecordOperationCompleted Is Nothing) Then
                Me.CopyEquipmentRecordOperationCompleted = AddressOf Me.OnCopyEquipmentRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyEquipmentRecord", New Object() {CloudID, ProjectId, ProjectRevision, EquipmentId, Revision, Name, TypeTableName, Division, Author, Series, Model, Quantity, ParMultiplier, WarrantyPrice, FreightPrice, StartUpPrice, CommissionRate, UnitVoltage, ControlVoltage, Length, Width, Height, Mca, Rla, Altitude, Notes, Tag, ShippingWeight, OperatingWeight, Included, OtherPrice, OtherDescription, CustomModel, OverriddenBaseListPrice, ShouldOverrideBaseListPrice, MultiplierCode}, Me.CopyEquipmentRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyEquipmentRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyEquipmentRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyEquipmentRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyEquipmentRecord2", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyEquipmentRecord2( _
                    ByVal CloudID As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal EquipmentId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal Name As String,  _
                    ByVal TypeTableName As String,  _
                    ByVal Division As String,  _
                    ByVal Author As String,  _
                    ByVal Series As String,  _
                    ByVal Model As String,  _
                    ByVal Quantity As Integer,  _
                    ByVal ParMultiplier As Single,  _
                    ByVal WarrantyPrice As Single,  _
                    ByVal FreightPrice As Single,  _
                    ByVal StartUpPrice As Single,  _
                    ByVal CommissionRate As Single,  _
                    ByVal UnitVoltage As String,  _
                    ByVal ControlVoltage As String,  _
                    ByVal Length As Single,  _
                    ByVal Width As Single,  _
                    ByVal Height As Single,  _
                    ByVal Mca As Single,  _
                    ByVal Rla As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal Notes As String,  _
                    ByVal Tag As String,  _
                    ByVal ShippingWeight As Single,  _
                    ByVal OperatingWeight As Single,  _
                    ByVal Included As Boolean,  _
                    ByVal OtherPrice As Single,  _
                    ByVal OtherDescription As String,  _
                    ByVal CustomModel As String,  _
                    ByVal OverriddenBaseListPrice As Single,  _
                    ByVal ShouldOverrideBaseListPrice As Boolean,  _
                    ByVal MultiplierCode As String,  _
                    ByVal MultiplierType As String)
            Me.Invoke("CopyEquipmentRecord2", New Object() {CloudID, ProjectId, ProjectRevision, EquipmentId, Revision, Name, TypeTableName, Division, Author, Series, Model, Quantity, ParMultiplier, WarrantyPrice, FreightPrice, StartUpPrice, CommissionRate, UnitVoltage, ControlVoltage, Length, Width, Height, Mca, Rla, Altitude, Notes, Tag, ShippingWeight, OperatingWeight, Included, OtherPrice, OtherDescription, CustomModel, OverriddenBaseListPrice, ShouldOverrideBaseListPrice, MultiplierCode, MultiplierType})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyEquipmentRecord2( _
                    ByVal CloudID As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal EquipmentId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal Name As String,  _
                    ByVal TypeTableName As String,  _
                    ByVal Division As String,  _
                    ByVal Author As String,  _
                    ByVal Series As String,  _
                    ByVal Model As String,  _
                    ByVal Quantity As Integer,  _
                    ByVal ParMultiplier As Single,  _
                    ByVal WarrantyPrice As Single,  _
                    ByVal FreightPrice As Single,  _
                    ByVal StartUpPrice As Single,  _
                    ByVal CommissionRate As Single,  _
                    ByVal UnitVoltage As String,  _
                    ByVal ControlVoltage As String,  _
                    ByVal Length As Single,  _
                    ByVal Width As Single,  _
                    ByVal Height As Single,  _
                    ByVal Mca As Single,  _
                    ByVal Rla As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal Notes As String,  _
                    ByVal Tag As String,  _
                    ByVal ShippingWeight As Single,  _
                    ByVal OperatingWeight As Single,  _
                    ByVal Included As Boolean,  _
                    ByVal OtherPrice As Single,  _
                    ByVal OtherDescription As String,  _
                    ByVal CustomModel As String,  _
                    ByVal OverriddenBaseListPrice As Single,  _
                    ByVal ShouldOverrideBaseListPrice As Boolean,  _
                    ByVal MultiplierCode As String,  _
                    ByVal MultiplierType As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyEquipmentRecord2", New Object() {CloudID, ProjectId, ProjectRevision, EquipmentId, Revision, Name, TypeTableName, Division, Author, Series, Model, Quantity, ParMultiplier, WarrantyPrice, FreightPrice, StartUpPrice, CommissionRate, UnitVoltage, ControlVoltage, Length, Width, Height, Mca, Rla, Altitude, Notes, Tag, ShippingWeight, OperatingWeight, Included, OtherPrice, OtherDescription, CustomModel, OverriddenBaseListPrice, ShouldOverrideBaseListPrice, MultiplierCode, MultiplierType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyEquipmentRecord2(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyEquipmentRecord2Async( _
                    ByVal CloudID As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal EquipmentId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal Name As String,  _
                    ByVal TypeTableName As String,  _
                    ByVal Division As String,  _
                    ByVal Author As String,  _
                    ByVal Series As String,  _
                    ByVal Model As String,  _
                    ByVal Quantity As Integer,  _
                    ByVal ParMultiplier As Single,  _
                    ByVal WarrantyPrice As Single,  _
                    ByVal FreightPrice As Single,  _
                    ByVal StartUpPrice As Single,  _
                    ByVal CommissionRate As Single,  _
                    ByVal UnitVoltage As String,  _
                    ByVal ControlVoltage As String,  _
                    ByVal Length As Single,  _
                    ByVal Width As Single,  _
                    ByVal Height As Single,  _
                    ByVal Mca As Single,  _
                    ByVal Rla As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal Notes As String,  _
                    ByVal Tag As String,  _
                    ByVal ShippingWeight As Single,  _
                    ByVal OperatingWeight As Single,  _
                    ByVal Included As Boolean,  _
                    ByVal OtherPrice As Single,  _
                    ByVal OtherDescription As String,  _
                    ByVal CustomModel As String,  _
                    ByVal OverriddenBaseListPrice As Single,  _
                    ByVal ShouldOverrideBaseListPrice As Boolean,  _
                    ByVal MultiplierCode As String,  _
                    ByVal MultiplierType As String)
            Me.CopyEquipmentRecord2Async(CloudID, ProjectId, ProjectRevision, EquipmentId, Revision, Name, TypeTableName, Division, Author, Series, Model, Quantity, ParMultiplier, WarrantyPrice, FreightPrice, StartUpPrice, CommissionRate, UnitVoltage, ControlVoltage, Length, Width, Height, Mca, Rla, Altitude, Notes, Tag, ShippingWeight, OperatingWeight, Included, OtherPrice, OtherDescription, CustomModel, OverriddenBaseListPrice, ShouldOverrideBaseListPrice, MultiplierCode, MultiplierType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyEquipmentRecord2Async( _
                    ByVal CloudID As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal EquipmentId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal Name As String,  _
                    ByVal TypeTableName As String,  _
                    ByVal Division As String,  _
                    ByVal Author As String,  _
                    ByVal Series As String,  _
                    ByVal Model As String,  _
                    ByVal Quantity As Integer,  _
                    ByVal ParMultiplier As Single,  _
                    ByVal WarrantyPrice As Single,  _
                    ByVal FreightPrice As Single,  _
                    ByVal StartUpPrice As Single,  _
                    ByVal CommissionRate As Single,  _
                    ByVal UnitVoltage As String,  _
                    ByVal ControlVoltage As String,  _
                    ByVal Length As Single,  _
                    ByVal Width As Single,  _
                    ByVal Height As Single,  _
                    ByVal Mca As Single,  _
                    ByVal Rla As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal Notes As String,  _
                    ByVal Tag As String,  _
                    ByVal ShippingWeight As Single,  _
                    ByVal OperatingWeight As Single,  _
                    ByVal Included As Boolean,  _
                    ByVal OtherPrice As Single,  _
                    ByVal OtherDescription As String,  _
                    ByVal CustomModel As String,  _
                    ByVal OverriddenBaseListPrice As Single,  _
                    ByVal ShouldOverrideBaseListPrice As Boolean,  _
                    ByVal MultiplierCode As String,  _
                    ByVal MultiplierType As String,  _
                    ByVal userState As Object)
            If (Me.CopyEquipmentRecord2OperationCompleted Is Nothing) Then
                Me.CopyEquipmentRecord2OperationCompleted = AddressOf Me.OnCopyEquipmentRecord2OperationCompleted
            End If
            Me.InvokeAsync("CopyEquipmentRecord2", New Object() {CloudID, ProjectId, ProjectRevision, EquipmentId, Revision, Name, TypeTableName, Division, Author, Series, Model, Quantity, ParMultiplier, WarrantyPrice, FreightPrice, StartUpPrice, CommissionRate, UnitVoltage, ControlVoltage, Length, Width, Height, Mca, Rla, Altitude, Notes, Tag, ShippingWeight, OperatingWeight, Included, OtherPrice, OtherDescription, CustomModel, OverriddenBaseListPrice, ShouldOverrideBaseListPrice, MultiplierCode, MultiplierType}, Me.CopyEquipmentRecord2OperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyEquipmentRecord2OperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyEquipmentRecord2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyEquipmentRecord2Completed(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyEquipmentRecord3", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyEquipmentRecord3( _
                    ByVal CloudID As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal EquipmentId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal Name As String,  _
                    ByVal TypeTableName As String,  _
                    ByVal Division As String,  _
                    ByVal Author As String,  _
                    ByVal Series As String,  _
                    ByVal Model As String,  _
                    ByVal Quantity As Integer,  _
                    ByVal ParMultiplier As Single,  _
                    ByVal WarrantyPrice As Single,  _
                    ByVal FreightPrice As Single,  _
                    ByVal StartUpPrice As Single,  _
                    ByVal CommissionRate As Single,  _
                    ByVal UnitVoltage As String,  _
                    ByVal ControlVoltage As String,  _
                    ByVal Length As Single,  _
                    ByVal Width As Single,  _
                    ByVal Height As Single,  _
                    ByVal Mca As Single,  _
                    ByVal Rla As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal Notes As String,  _
                    ByVal Tag As String,  _
                    ByVal ShippingWeight As Single,  _
                    ByVal OperatingWeight As Single,  _
                    ByVal Included As Boolean,  _
                    ByVal OtherPrice As Single,  _
                    ByVal OtherDescription As String,  _
                    ByVal CustomModel As String,  _
                    ByVal OverriddenBaseListPrice As Single,  _
                    ByVal ShouldOverrideBaseListPrice As Boolean,  _
                    ByVal MultiplierCode As String,  _
                    ByVal MultiplierType As String,  _
                    ByVal ListPosition As Integer)
            Me.Invoke("CopyEquipmentRecord3", New Object() {CloudID, ProjectId, ProjectRevision, EquipmentId, Revision, Name, TypeTableName, Division, Author, Series, Model, Quantity, ParMultiplier, WarrantyPrice, FreightPrice, StartUpPrice, CommissionRate, UnitVoltage, ControlVoltage, Length, Width, Height, Mca, Rla, Altitude, Notes, Tag, ShippingWeight, OperatingWeight, Included, OtherPrice, OtherDescription, CustomModel, OverriddenBaseListPrice, ShouldOverrideBaseListPrice, MultiplierCode, MultiplierType, ListPosition})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyEquipmentRecord3( _
                    ByVal CloudID As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal EquipmentId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal Name As String,  _
                    ByVal TypeTableName As String,  _
                    ByVal Division As String,  _
                    ByVal Author As String,  _
                    ByVal Series As String,  _
                    ByVal Model As String,  _
                    ByVal Quantity As Integer,  _
                    ByVal ParMultiplier As Single,  _
                    ByVal WarrantyPrice As Single,  _
                    ByVal FreightPrice As Single,  _
                    ByVal StartUpPrice As Single,  _
                    ByVal CommissionRate As Single,  _
                    ByVal UnitVoltage As String,  _
                    ByVal ControlVoltage As String,  _
                    ByVal Length As Single,  _
                    ByVal Width As Single,  _
                    ByVal Height As Single,  _
                    ByVal Mca As Single,  _
                    ByVal Rla As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal Notes As String,  _
                    ByVal Tag As String,  _
                    ByVal ShippingWeight As Single,  _
                    ByVal OperatingWeight As Single,  _
                    ByVal Included As Boolean,  _
                    ByVal OtherPrice As Single,  _
                    ByVal OtherDescription As String,  _
                    ByVal CustomModel As String,  _
                    ByVal OverriddenBaseListPrice As Single,  _
                    ByVal ShouldOverrideBaseListPrice As Boolean,  _
                    ByVal MultiplierCode As String,  _
                    ByVal MultiplierType As String,  _
                    ByVal ListPosition As Integer,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyEquipmentRecord3", New Object() {CloudID, ProjectId, ProjectRevision, EquipmentId, Revision, Name, TypeTableName, Division, Author, Series, Model, Quantity, ParMultiplier, WarrantyPrice, FreightPrice, StartUpPrice, CommissionRate, UnitVoltage, ControlVoltage, Length, Width, Height, Mca, Rla, Altitude, Notes, Tag, ShippingWeight, OperatingWeight, Included, OtherPrice, OtherDescription, CustomModel, OverriddenBaseListPrice, ShouldOverrideBaseListPrice, MultiplierCode, MultiplierType, ListPosition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyEquipmentRecord3(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyEquipmentRecord3Async( _
                    ByVal CloudID As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal EquipmentId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal Name As String,  _
                    ByVal TypeTableName As String,  _
                    ByVal Division As String,  _
                    ByVal Author As String,  _
                    ByVal Series As String,  _
                    ByVal Model As String,  _
                    ByVal Quantity As Integer,  _
                    ByVal ParMultiplier As Single,  _
                    ByVal WarrantyPrice As Single,  _
                    ByVal FreightPrice As Single,  _
                    ByVal StartUpPrice As Single,  _
                    ByVal CommissionRate As Single,  _
                    ByVal UnitVoltage As String,  _
                    ByVal ControlVoltage As String,  _
                    ByVal Length As Single,  _
                    ByVal Width As Single,  _
                    ByVal Height As Single,  _
                    ByVal Mca As Single,  _
                    ByVal Rla As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal Notes As String,  _
                    ByVal Tag As String,  _
                    ByVal ShippingWeight As Single,  _
                    ByVal OperatingWeight As Single,  _
                    ByVal Included As Boolean,  _
                    ByVal OtherPrice As Single,  _
                    ByVal OtherDescription As String,  _
                    ByVal CustomModel As String,  _
                    ByVal OverriddenBaseListPrice As Single,  _
                    ByVal ShouldOverrideBaseListPrice As Boolean,  _
                    ByVal MultiplierCode As String,  _
                    ByVal MultiplierType As String,  _
                    ByVal ListPosition As Integer)
            Me.CopyEquipmentRecord3Async(CloudID, ProjectId, ProjectRevision, EquipmentId, Revision, Name, TypeTableName, Division, Author, Series, Model, Quantity, ParMultiplier, WarrantyPrice, FreightPrice, StartUpPrice, CommissionRate, UnitVoltage, ControlVoltage, Length, Width, Height, Mca, Rla, Altitude, Notes, Tag, ShippingWeight, OperatingWeight, Included, OtherPrice, OtherDescription, CustomModel, OverriddenBaseListPrice, ShouldOverrideBaseListPrice, MultiplierCode, MultiplierType, ListPosition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyEquipmentRecord3Async( _
                    ByVal CloudID As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal EquipmentId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal Name As String,  _
                    ByVal TypeTableName As String,  _
                    ByVal Division As String,  _
                    ByVal Author As String,  _
                    ByVal Series As String,  _
                    ByVal Model As String,  _
                    ByVal Quantity As Integer,  _
                    ByVal ParMultiplier As Single,  _
                    ByVal WarrantyPrice As Single,  _
                    ByVal FreightPrice As Single,  _
                    ByVal StartUpPrice As Single,  _
                    ByVal CommissionRate As Single,  _
                    ByVal UnitVoltage As String,  _
                    ByVal ControlVoltage As String,  _
                    ByVal Length As Single,  _
                    ByVal Width As Single,  _
                    ByVal Height As Single,  _
                    ByVal Mca As Single,  _
                    ByVal Rla As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal Notes As String,  _
                    ByVal Tag As String,  _
                    ByVal ShippingWeight As Single,  _
                    ByVal OperatingWeight As Single,  _
                    ByVal Included As Boolean,  _
                    ByVal OtherPrice As Single,  _
                    ByVal OtherDescription As String,  _
                    ByVal CustomModel As String,  _
                    ByVal OverriddenBaseListPrice As Single,  _
                    ByVal ShouldOverrideBaseListPrice As Boolean,  _
                    ByVal MultiplierCode As String,  _
                    ByVal MultiplierType As String,  _
                    ByVal ListPosition As Integer,  _
                    ByVal userState As Object)
            If (Me.CopyEquipmentRecord3OperationCompleted Is Nothing) Then
                Me.CopyEquipmentRecord3OperationCompleted = AddressOf Me.OnCopyEquipmentRecord3OperationCompleted
            End If
            Me.InvokeAsync("CopyEquipmentRecord3", New Object() {CloudID, ProjectId, ProjectRevision, EquipmentId, Revision, Name, TypeTableName, Division, Author, Series, Model, Quantity, ParMultiplier, WarrantyPrice, FreightPrice, StartUpPrice, CommissionRate, UnitVoltage, ControlVoltage, Length, Width, Height, Mca, Rla, Altitude, Notes, Tag, ShippingWeight, OperatingWeight, Included, OtherPrice, OtherDescription, CustomModel, OverriddenBaseListPrice, ShouldOverrideBaseListPrice, MultiplierCode, MultiplierType, ListPosition}, Me.CopyEquipmentRecord3OperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyEquipmentRecord3OperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyEquipmentRecord3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyEquipmentRecord3Completed(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/sendErrorEmail", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub sendErrorEmail(ByVal subject As String, ByVal body As String)
            Me.Invoke("sendErrorEmail", New Object() {subject, body})
        End Sub
        
        '''<remarks/>
        Public Function BeginsendErrorEmail(ByVal subject As String, ByVal body As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("sendErrorEmail", New Object() {subject, body}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndsendErrorEmail(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub sendErrorEmailAsync(ByVal subject As String, ByVal body As String)
            Me.sendErrorEmailAsync(subject, body, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub sendErrorEmailAsync(ByVal subject As String, ByVal body As String, ByVal userState As Object)
            If (Me.sendErrorEmailOperationCompleted Is Nothing) Then
                Me.sendErrorEmailOperationCompleted = AddressOf Me.OnsendErrorEmailOperationCompleted
            End If
            Me.InvokeAsync("sendErrorEmail", New Object() {subject, body}, Me.sendErrorEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnsendErrorEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.sendErrorEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent sendErrorEmailCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyACChillerProcessesRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyACChillerProcessesRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal Series As String,  _
                    ByVal NewCoefficients As Boolean,  _
                    ByVal Model As String,  _
                    ByVal ModelDesc As String,  _
                    ByVal Fluid As String,  _
                    ByVal GlycolPercentage As Single,  _
                    ByVal CoolingMedia As String,  _
                    ByVal SpecificHeat As Single,  _
                    ByVal SpecificGravity As Single,  _
                    ByVal SubCooling As Boolean,  _
                    ByVal Refrigerant As String,  _
                    ByVal TempRange As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal System As String,  _
                    ByVal Hertz As Single,  _
                    ByVal Volts As Single,  _
                    ByVal Approach As String,  _
                    ByVal SafetyOverride As Boolean,  _
                    ByVal Circuit1 As Boolean,  _
                    ByVal Circuit2 As Boolean,  _
                    ByVal NumCompressors1 As Integer,  _
                    ByVal NumCompressors2 As Integer,  _
                    ByVal Compressors1 As String,  _
                    ByVal Compressors2 As String,  _
                    ByVal NumCoils1 As Integer,  _
                    ByVal NumCoils2 As Integer,  _
                    ByVal Condenser1 As String,  _
                    ByVal Condenser2 As String,  _
                    ByVal FinsPerInch1 As Integer,  _
                    ByVal FinsPerInch2 As Integer,  _
                    ByVal SubCooling1 As Boolean,  _
                    ByVal SubCooling2 As Boolean,  _
                    ByVal SubCoolingPercent1 As Single,  _
                    ByVal SubCoolingPercent2 As Single,  _
                    ByVal CondenserTD1 As Single,  _
                    ByVal CondenserTD2 As Single,  _
                    ByVal FinHeight1 As Single,  _
                    ByVal FinHeight2 As Single,  _
                    ByVal FinLength1 As Single,  _
                    ByVal FinLength2 As Single,  _
                    ByVal DischargeLineLoss As Single,  _
                    ByVal SuctionLineLoss As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal Fan As String,  _
                    ByVal CfmOverride As Single,  _
                    ByVal NumFans1 As Single,  _
                    ByVal NumFans2 As Single,  _
                    ByVal CondenserCapacity1 As Single,  _
                    ByVal CondenserCapacity2 As Single,  _
                    ByVal EvaporatorModel As String,  _
                    ByVal EvaporatorModelDesc As String,  _
                    ByVal NumEvap As Integer,  _
                    ByVal FoulingFactor As Single,  _
                    ByVal CapacityType As String,  _
                    ByVal EvaporatorCapacity As Integer,  _
                    ByVal CatalogRating As Boolean,  _
                    ByVal ApproachRange As String,  _
                    ByVal Evap8Degr1 As Single,  _
                    ByVal Evap8Degr2 As Single,  _
                    ByVal Evap10Degr1 As Integer,  _
                    ByVal Evap10Degr2 As Single,  _
                    ByVal Division As String,  _
                    ByVal FanWatts As Single)
            Me.Invoke("CopyACChillerProcessesRecord", New Object() {CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Name, Series, NewCoefficients, Model, ModelDesc, Fluid, GlycolPercentage, CoolingMedia, SpecificHeat, SpecificGravity, SubCooling, Refrigerant, TempRange, AmbientTemp, LeavingFluidTemp, System, Hertz, Volts, Approach, SafetyOverride, Circuit1, Circuit2, NumCompressors1, NumCompressors2, Compressors1, Compressors2, NumCoils1, NumCoils2, Condenser1, Condenser2, FinsPerInch1, FinsPerInch2, SubCooling1, SubCooling2, SubCoolingPercent1, SubCoolingPercent2, CondenserTD1, CondenserTD2, FinHeight1, FinHeight2, FinLength1, FinLength2, DischargeLineLoss, SuctionLineLoss, Altitude, Fan, CfmOverride, NumFans1, NumFans2, CondenserCapacity1, CondenserCapacity2, EvaporatorModel, EvaporatorModelDesc, NumEvap, FoulingFactor, CapacityType, EvaporatorCapacity, CatalogRating, ApproachRange, Evap8Degr1, Evap8Degr2, Evap10Degr1, Evap10Degr2, Division, FanWatts})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyACChillerProcessesRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal Series As String,  _
                    ByVal NewCoefficients As Boolean,  _
                    ByVal Model As String,  _
                    ByVal ModelDesc As String,  _
                    ByVal Fluid As String,  _
                    ByVal GlycolPercentage As Single,  _
                    ByVal CoolingMedia As String,  _
                    ByVal SpecificHeat As Single,  _
                    ByVal SpecificGravity As Single,  _
                    ByVal SubCooling As Boolean,  _
                    ByVal Refrigerant As String,  _
                    ByVal TempRange As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal System As String,  _
                    ByVal Hertz As Single,  _
                    ByVal Volts As Single,  _
                    ByVal Approach As String,  _
                    ByVal SafetyOverride As Boolean,  _
                    ByVal Circuit1 As Boolean,  _
                    ByVal Circuit2 As Boolean,  _
                    ByVal NumCompressors1 As Integer,  _
                    ByVal NumCompressors2 As Integer,  _
                    ByVal Compressors1 As String,  _
                    ByVal Compressors2 As String,  _
                    ByVal NumCoils1 As Integer,  _
                    ByVal NumCoils2 As Integer,  _
                    ByVal Condenser1 As String,  _
                    ByVal Condenser2 As String,  _
                    ByVal FinsPerInch1 As Integer,  _
                    ByVal FinsPerInch2 As Integer,  _
                    ByVal SubCooling1 As Boolean,  _
                    ByVal SubCooling2 As Boolean,  _
                    ByVal SubCoolingPercent1 As Single,  _
                    ByVal SubCoolingPercent2 As Single,  _
                    ByVal CondenserTD1 As Single,  _
                    ByVal CondenserTD2 As Single,  _
                    ByVal FinHeight1 As Single,  _
                    ByVal FinHeight2 As Single,  _
                    ByVal FinLength1 As Single,  _
                    ByVal FinLength2 As Single,  _
                    ByVal DischargeLineLoss As Single,  _
                    ByVal SuctionLineLoss As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal Fan As String,  _
                    ByVal CfmOverride As Single,  _
                    ByVal NumFans1 As Single,  _
                    ByVal NumFans2 As Single,  _
                    ByVal CondenserCapacity1 As Single,  _
                    ByVal CondenserCapacity2 As Single,  _
                    ByVal EvaporatorModel As String,  _
                    ByVal EvaporatorModelDesc As String,  _
                    ByVal NumEvap As Integer,  _
                    ByVal FoulingFactor As Single,  _
                    ByVal CapacityType As String,  _
                    ByVal EvaporatorCapacity As Integer,  _
                    ByVal CatalogRating As Boolean,  _
                    ByVal ApproachRange As String,  _
                    ByVal Evap8Degr1 As Single,  _
                    ByVal Evap8Degr2 As Single,  _
                    ByVal Evap10Degr1 As Integer,  _
                    ByVal Evap10Degr2 As Single,  _
                    ByVal Division As String,  _
                    ByVal FanWatts As Single,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyACChillerProcessesRecord", New Object() {CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Name, Series, NewCoefficients, Model, ModelDesc, Fluid, GlycolPercentage, CoolingMedia, SpecificHeat, SpecificGravity, SubCooling, Refrigerant, TempRange, AmbientTemp, LeavingFluidTemp, System, Hertz, Volts, Approach, SafetyOverride, Circuit1, Circuit2, NumCompressors1, NumCompressors2, Compressors1, Compressors2, NumCoils1, NumCoils2, Condenser1, Condenser2, FinsPerInch1, FinsPerInch2, SubCooling1, SubCooling2, SubCoolingPercent1, SubCoolingPercent2, CondenserTD1, CondenserTD2, FinHeight1, FinHeight2, FinLength1, FinLength2, DischargeLineLoss, SuctionLineLoss, Altitude, Fan, CfmOverride, NumFans1, NumFans2, CondenserCapacity1, CondenserCapacity2, EvaporatorModel, EvaporatorModelDesc, NumEvap, FoulingFactor, CapacityType, EvaporatorCapacity, CatalogRating, ApproachRange, Evap8Degr1, Evap8Degr2, Evap10Degr1, Evap10Degr2, Division, FanWatts}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyACChillerProcessesRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyACChillerProcessesRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal Series As String,  _
                    ByVal NewCoefficients As Boolean,  _
                    ByVal Model As String,  _
                    ByVal ModelDesc As String,  _
                    ByVal Fluid As String,  _
                    ByVal GlycolPercentage As Single,  _
                    ByVal CoolingMedia As String,  _
                    ByVal SpecificHeat As Single,  _
                    ByVal SpecificGravity As Single,  _
                    ByVal SubCooling As Boolean,  _
                    ByVal Refrigerant As String,  _
                    ByVal TempRange As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal System As String,  _
                    ByVal Hertz As Single,  _
                    ByVal Volts As Single,  _
                    ByVal Approach As String,  _
                    ByVal SafetyOverride As Boolean,  _
                    ByVal Circuit1 As Boolean,  _
                    ByVal Circuit2 As Boolean,  _
                    ByVal NumCompressors1 As Integer,  _
                    ByVal NumCompressors2 As Integer,  _
                    ByVal Compressors1 As String,  _
                    ByVal Compressors2 As String,  _
                    ByVal NumCoils1 As Integer,  _
                    ByVal NumCoils2 As Integer,  _
                    ByVal Condenser1 As String,  _
                    ByVal Condenser2 As String,  _
                    ByVal FinsPerInch1 As Integer,  _
                    ByVal FinsPerInch2 As Integer,  _
                    ByVal SubCooling1 As Boolean,  _
                    ByVal SubCooling2 As Boolean,  _
                    ByVal SubCoolingPercent1 As Single,  _
                    ByVal SubCoolingPercent2 As Single,  _
                    ByVal CondenserTD1 As Single,  _
                    ByVal CondenserTD2 As Single,  _
                    ByVal FinHeight1 As Single,  _
                    ByVal FinHeight2 As Single,  _
                    ByVal FinLength1 As Single,  _
                    ByVal FinLength2 As Single,  _
                    ByVal DischargeLineLoss As Single,  _
                    ByVal SuctionLineLoss As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal Fan As String,  _
                    ByVal CfmOverride As Single,  _
                    ByVal NumFans1 As Single,  _
                    ByVal NumFans2 As Single,  _
                    ByVal CondenserCapacity1 As Single,  _
                    ByVal CondenserCapacity2 As Single,  _
                    ByVal EvaporatorModel As String,  _
                    ByVal EvaporatorModelDesc As String,  _
                    ByVal NumEvap As Integer,  _
                    ByVal FoulingFactor As Single,  _
                    ByVal CapacityType As String,  _
                    ByVal EvaporatorCapacity As Integer,  _
                    ByVal CatalogRating As Boolean,  _
                    ByVal ApproachRange As String,  _
                    ByVal Evap8Degr1 As Single,  _
                    ByVal Evap8Degr2 As Single,  _
                    ByVal Evap10Degr1 As Integer,  _
                    ByVal Evap10Degr2 As Single,  _
                    ByVal Division As String,  _
                    ByVal FanWatts As Single)
            Me.CopyACChillerProcessesRecordAsync(CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Name, Series, NewCoefficients, Model, ModelDesc, Fluid, GlycolPercentage, CoolingMedia, SpecificHeat, SpecificGravity, SubCooling, Refrigerant, TempRange, AmbientTemp, LeavingFluidTemp, System, Hertz, Volts, Approach, SafetyOverride, Circuit1, Circuit2, NumCompressors1, NumCompressors2, Compressors1, Compressors2, NumCoils1, NumCoils2, Condenser1, Condenser2, FinsPerInch1, FinsPerInch2, SubCooling1, SubCooling2, SubCoolingPercent1, SubCoolingPercent2, CondenserTD1, CondenserTD2, FinHeight1, FinHeight2, FinLength1, FinLength2, DischargeLineLoss, SuctionLineLoss, Altitude, Fan, CfmOverride, NumFans1, NumFans2, CondenserCapacity1, CondenserCapacity2, EvaporatorModel, EvaporatorModelDesc, NumEvap, FoulingFactor, CapacityType, EvaporatorCapacity, CatalogRating, ApproachRange, Evap8Degr1, Evap8Degr2, Evap10Degr1, Evap10Degr2, Division, FanWatts, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyACChillerProcessesRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal Series As String,  _
                    ByVal NewCoefficients As Boolean,  _
                    ByVal Model As String,  _
                    ByVal ModelDesc As String,  _
                    ByVal Fluid As String,  _
                    ByVal GlycolPercentage As Single,  _
                    ByVal CoolingMedia As String,  _
                    ByVal SpecificHeat As Single,  _
                    ByVal SpecificGravity As Single,  _
                    ByVal SubCooling As Boolean,  _
                    ByVal Refrigerant As String,  _
                    ByVal TempRange As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal System As String,  _
                    ByVal Hertz As Single,  _
                    ByVal Volts As Single,  _
                    ByVal Approach As String,  _
                    ByVal SafetyOverride As Boolean,  _
                    ByVal Circuit1 As Boolean,  _
                    ByVal Circuit2 As Boolean,  _
                    ByVal NumCompressors1 As Integer,  _
                    ByVal NumCompressors2 As Integer,  _
                    ByVal Compressors1 As String,  _
                    ByVal Compressors2 As String,  _
                    ByVal NumCoils1 As Integer,  _
                    ByVal NumCoils2 As Integer,  _
                    ByVal Condenser1 As String,  _
                    ByVal Condenser2 As String,  _
                    ByVal FinsPerInch1 As Integer,  _
                    ByVal FinsPerInch2 As Integer,  _
                    ByVal SubCooling1 As Boolean,  _
                    ByVal SubCooling2 As Boolean,  _
                    ByVal SubCoolingPercent1 As Single,  _
                    ByVal SubCoolingPercent2 As Single,  _
                    ByVal CondenserTD1 As Single,  _
                    ByVal CondenserTD2 As Single,  _
                    ByVal FinHeight1 As Single,  _
                    ByVal FinHeight2 As Single,  _
                    ByVal FinLength1 As Single,  _
                    ByVal FinLength2 As Single,  _
                    ByVal DischargeLineLoss As Single,  _
                    ByVal SuctionLineLoss As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal Fan As String,  _
                    ByVal CfmOverride As Single,  _
                    ByVal NumFans1 As Single,  _
                    ByVal NumFans2 As Single,  _
                    ByVal CondenserCapacity1 As Single,  _
                    ByVal CondenserCapacity2 As Single,  _
                    ByVal EvaporatorModel As String,  _
                    ByVal EvaporatorModelDesc As String,  _
                    ByVal NumEvap As Integer,  _
                    ByVal FoulingFactor As Single,  _
                    ByVal CapacityType As String,  _
                    ByVal EvaporatorCapacity As Integer,  _
                    ByVal CatalogRating As Boolean,  _
                    ByVal ApproachRange As String,  _
                    ByVal Evap8Degr1 As Single,  _
                    ByVal Evap8Degr2 As Single,  _
                    ByVal Evap10Degr1 As Integer,  _
                    ByVal Evap10Degr2 As Single,  _
                    ByVal Division As String,  _
                    ByVal FanWatts As Single,  _
                    ByVal userState As Object)
            If (Me.CopyACChillerProcessesRecordOperationCompleted Is Nothing) Then
                Me.CopyACChillerProcessesRecordOperationCompleted = AddressOf Me.OnCopyACChillerProcessesRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyACChillerProcessesRecord", New Object() {CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Name, Series, NewCoefficients, Model, ModelDesc, Fluid, GlycolPercentage, CoolingMedia, SpecificHeat, SpecificGravity, SubCooling, Refrigerant, TempRange, AmbientTemp, LeavingFluidTemp, System, Hertz, Volts, Approach, SafetyOverride, Circuit1, Circuit2, NumCompressors1, NumCompressors2, Compressors1, Compressors2, NumCoils1, NumCoils2, Condenser1, Condenser2, FinsPerInch1, FinsPerInch2, SubCooling1, SubCooling2, SubCoolingPercent1, SubCoolingPercent2, CondenserTD1, CondenserTD2, FinHeight1, FinHeight2, FinLength1, FinLength2, DischargeLineLoss, SuctionLineLoss, Altitude, Fan, CfmOverride, NumFans1, NumFans2, CondenserCapacity1, CondenserCapacity2, EvaporatorModel, EvaporatorModelDesc, NumEvap, FoulingFactor, CapacityType, EvaporatorCapacity, CatalogRating, ApproachRange, Evap8Degr1, Evap8Degr2, Evap10Degr1, Evap10Degr2, Division, FanWatts}, Me.CopyACChillerProcessesRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyACChillerProcessesRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyACChillerProcessesRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyACChillerProcessesRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyAddressesRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyAddressesRecord(ByVal CloudID As Integer, ByVal Id As Integer, ByVal Name As String, ByVal Line1 As String, ByVal Line2 As String, ByVal City As String, ByVal State As String, ByVal ZipCode5 As Integer, ByVal ZipCode4 As Integer, ByVal Description As String)
            Me.Invoke("CopyAddressesRecord", New Object() {CloudID, Id, Name, Line1, Line2, City, State, ZipCode5, ZipCode4, Description})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyAddressesRecord(ByVal CloudID As Integer, ByVal Id As Integer, ByVal Name As String, ByVal Line1 As String, ByVal Line2 As String, ByVal City As String, ByVal State As String, ByVal ZipCode5 As Integer, ByVal ZipCode4 As Integer, ByVal Description As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyAddressesRecord", New Object() {CloudID, Id, Name, Line1, Line2, City, State, ZipCode5, ZipCode4, Description}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyAddressesRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyAddressesRecordAsync(ByVal CloudID As Integer, ByVal Id As Integer, ByVal Name As String, ByVal Line1 As String, ByVal Line2 As String, ByVal City As String, ByVal State As String, ByVal ZipCode5 As Integer, ByVal ZipCode4 As Integer, ByVal Description As String)
            Me.CopyAddressesRecordAsync(CloudID, Id, Name, Line1, Line2, City, State, ZipCode5, ZipCode4, Description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyAddressesRecordAsync(ByVal CloudID As Integer, ByVal Id As Integer, ByVal Name As String, ByVal Line1 As String, ByVal Line2 As String, ByVal City As String, ByVal State As String, ByVal ZipCode5 As Integer, ByVal ZipCode4 As Integer, ByVal Description As String, ByVal userState As Object)
            If (Me.CopyAddressesRecordOperationCompleted Is Nothing) Then
                Me.CopyAddressesRecordOperationCompleted = AddressOf Me.OnCopyAddressesRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyAddressesRecord", New Object() {CloudID, Id, Name, Line1, Line2, City, State, ZipCode5, ZipCode4, Description}, Me.CopyAddressesRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyAddressesRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyAddressesRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyAddressesRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyChillerRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyChillerRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal EquipmentId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal Capacity As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal EnteringFluidTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal GlycolPercent As Single,  _
                    ByVal Fluid As String,  _
                    ByVal Flow As Integer,  _
                    ByVal Refrigerant As String,  _
                    ByVal EvaporatorPressureDrop As Single,  _
                    ByVal UnitKwPerTon As String,  _
                    ByVal CompressorAmps1 As Single,  _
                    ByVal CompressorAmps2 As Single,  _
                    ByVal CompressorQuantity1 As Single,  _
                    ByVal CompressorQuantity2 As Single,  _
                    ByVal CondenserQuantity As Single,  _
                    ByVal SprayPumpAmps As Single,  _
                    ByVal BlowerAmps As Single,  _
                    ByVal HasBalance As Boolean)
            Me.Invoke("CopyChillerRecord", New Object() {CloudID, EquipmentId, Revision, Capacity, AmbientTemp, EnteringFluidTemp, LeavingFluidTemp, GlycolPercent, Fluid, Flow, Refrigerant, EvaporatorPressureDrop, UnitKwPerTon, CompressorAmps1, CompressorAmps2, CompressorQuantity1, CompressorQuantity2, CondenserQuantity, SprayPumpAmps, BlowerAmps, HasBalance})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyChillerRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal EquipmentId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal Capacity As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal EnteringFluidTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal GlycolPercent As Single,  _
                    ByVal Fluid As String,  _
                    ByVal Flow As Integer,  _
                    ByVal Refrigerant As String,  _
                    ByVal EvaporatorPressureDrop As Single,  _
                    ByVal UnitKwPerTon As String,  _
                    ByVal CompressorAmps1 As Single,  _
                    ByVal CompressorAmps2 As Single,  _
                    ByVal CompressorQuantity1 As Single,  _
                    ByVal CompressorQuantity2 As Single,  _
                    ByVal CondenserQuantity As Single,  _
                    ByVal SprayPumpAmps As Single,  _
                    ByVal BlowerAmps As Single,  _
                    ByVal HasBalance As Boolean,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyChillerRecord", New Object() {CloudID, EquipmentId, Revision, Capacity, AmbientTemp, EnteringFluidTemp, LeavingFluidTemp, GlycolPercent, Fluid, Flow, Refrigerant, EvaporatorPressureDrop, UnitKwPerTon, CompressorAmps1, CompressorAmps2, CompressorQuantity1, CompressorQuantity2, CondenserQuantity, SprayPumpAmps, BlowerAmps, HasBalance}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyChillerRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyChillerRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal EquipmentId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal Capacity As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal EnteringFluidTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal GlycolPercent As Single,  _
                    ByVal Fluid As String,  _
                    ByVal Flow As Integer,  _
                    ByVal Refrigerant As String,  _
                    ByVal EvaporatorPressureDrop As Single,  _
                    ByVal UnitKwPerTon As String,  _
                    ByVal CompressorAmps1 As Single,  _
                    ByVal CompressorAmps2 As Single,  _
                    ByVal CompressorQuantity1 As Single,  _
                    ByVal CompressorQuantity2 As Single,  _
                    ByVal CondenserQuantity As Single,  _
                    ByVal SprayPumpAmps As Single,  _
                    ByVal BlowerAmps As Single,  _
                    ByVal HasBalance As Boolean)
            Me.CopyChillerRecordAsync(CloudID, EquipmentId, Revision, Capacity, AmbientTemp, EnteringFluidTemp, LeavingFluidTemp, GlycolPercent, Fluid, Flow, Refrigerant, EvaporatorPressureDrop, UnitKwPerTon, CompressorAmps1, CompressorAmps2, CompressorQuantity1, CompressorQuantity2, CondenserQuantity, SprayPumpAmps, BlowerAmps, HasBalance, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyChillerRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal EquipmentId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal Capacity As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal EnteringFluidTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal GlycolPercent As Single,  _
                    ByVal Fluid As String,  _
                    ByVal Flow As Integer,  _
                    ByVal Refrigerant As String,  _
                    ByVal EvaporatorPressureDrop As Single,  _
                    ByVal UnitKwPerTon As String,  _
                    ByVal CompressorAmps1 As Single,  _
                    ByVal CompressorAmps2 As Single,  _
                    ByVal CompressorQuantity1 As Single,  _
                    ByVal CompressorQuantity2 As Single,  _
                    ByVal CondenserQuantity As Single,  _
                    ByVal SprayPumpAmps As Single,  _
                    ByVal BlowerAmps As Single,  _
                    ByVal HasBalance As Boolean,  _
                    ByVal userState As Object)
            If (Me.CopyChillerRecordOperationCompleted Is Nothing) Then
                Me.CopyChillerRecordOperationCompleted = AddressOf Me.OnCopyChillerRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyChillerRecord", New Object() {CloudID, EquipmentId, Revision, Capacity, AmbientTemp, EnteringFluidTemp, LeavingFluidTemp, GlycolPercent, Fluid, Flow, Refrigerant, EvaporatorPressureDrop, UnitKwPerTon, CompressorAmps1, CompressorAmps2, CompressorQuantity1, CompressorQuantity2, CondenserQuantity, SprayPumpAmps, BlowerAmps, HasBalance}, Me.CopyChillerRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyChillerRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyChillerRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyChillerRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyCompaniesRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyCompaniesRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal Id As Integer,  _
                    ByVal CustomerNum As Integer,  _
                    ByVal RepNum As Integer,  _
                    ByVal Name As String,  _
                    ByVal Website As String,  _
                    ByVal Email As String,  _
                    ByVal Description As String,  _
                    ByVal Line1 As String,  _
                    ByVal Line2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal ZipCode5 As Integer,  _
                    ByVal ZipCode4 As Integer,  _
                    ByVal PhoneNumAreaCode As Integer,  _
                    ByVal PhoneNum As Integer,  _
                    ByVal PhoneNumExtension As Integer,  _
                    ByVal FaxNum As Integer,  _
                    ByVal FaxNumAreaCode As Integer)
            Me.Invoke("CopyCompaniesRecord", New Object() {CloudID, Id, CustomerNum, RepNum, Name, Website, Email, Description, Line1, Line2, City, State, ZipCode5, ZipCode4, PhoneNumAreaCode, PhoneNum, PhoneNumExtension, FaxNum, FaxNumAreaCode})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyCompaniesRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal Id As Integer,  _
                    ByVal CustomerNum As Integer,  _
                    ByVal RepNum As Integer,  _
                    ByVal Name As String,  _
                    ByVal Website As String,  _
                    ByVal Email As String,  _
                    ByVal Description As String,  _
                    ByVal Line1 As String,  _
                    ByVal Line2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal ZipCode5 As Integer,  _
                    ByVal ZipCode4 As Integer,  _
                    ByVal PhoneNumAreaCode As Integer,  _
                    ByVal PhoneNum As Integer,  _
                    ByVal PhoneNumExtension As Integer,  _
                    ByVal FaxNum As Integer,  _
                    ByVal FaxNumAreaCode As Integer,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyCompaniesRecord", New Object() {CloudID, Id, CustomerNum, RepNum, Name, Website, Email, Description, Line1, Line2, City, State, ZipCode5, ZipCode4, PhoneNumAreaCode, PhoneNum, PhoneNumExtension, FaxNum, FaxNumAreaCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyCompaniesRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCompaniesRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal Id As Integer,  _
                    ByVal CustomerNum As Integer,  _
                    ByVal RepNum As Integer,  _
                    ByVal Name As String,  _
                    ByVal Website As String,  _
                    ByVal Email As String,  _
                    ByVal Description As String,  _
                    ByVal Line1 As String,  _
                    ByVal Line2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal ZipCode5 As Integer,  _
                    ByVal ZipCode4 As Integer,  _
                    ByVal PhoneNumAreaCode As Integer,  _
                    ByVal PhoneNum As Integer,  _
                    ByVal PhoneNumExtension As Integer,  _
                    ByVal FaxNum As Integer,  _
                    ByVal FaxNumAreaCode As Integer)
            Me.CopyCompaniesRecordAsync(CloudID, Id, CustomerNum, RepNum, Name, Website, Email, Description, Line1, Line2, City, State, ZipCode5, ZipCode4, PhoneNumAreaCode, PhoneNum, PhoneNumExtension, FaxNum, FaxNumAreaCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCompaniesRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal Id As Integer,  _
                    ByVal CustomerNum As Integer,  _
                    ByVal RepNum As Integer,  _
                    ByVal Name As String,  _
                    ByVal Website As String,  _
                    ByVal Email As String,  _
                    ByVal Description As String,  _
                    ByVal Line1 As String,  _
                    ByVal Line2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal ZipCode5 As Integer,  _
                    ByVal ZipCode4 As Integer,  _
                    ByVal PhoneNumAreaCode As Integer,  _
                    ByVal PhoneNum As Integer,  _
                    ByVal PhoneNumExtension As Integer,  _
                    ByVal FaxNum As Integer,  _
                    ByVal FaxNumAreaCode As Integer,  _
                    ByVal userState As Object)
            If (Me.CopyCompaniesRecordOperationCompleted Is Nothing) Then
                Me.CopyCompaniesRecordOperationCompleted = AddressOf Me.OnCopyCompaniesRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyCompaniesRecord", New Object() {CloudID, Id, CustomerNum, RepNum, Name, Website, Email, Description, Line1, Line2, City, State, ZipCode5, ZipCode4, PhoneNumAreaCode, PhoneNum, PhoneNumExtension, FaxNum, FaxNumAreaCode}, Me.CopyCompaniesRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyCompaniesRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyCompaniesRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyCompaniesRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyCondenserRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyCondenserRecord(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal AmbientTemp As Single, ByVal Refrigerant As String, ByVal ThrCircuit1 As Single, ByVal ThrCircuit2 As Single, ByVal ThrCircuit3 As Single, ByVal ThrCircuit4 As Single, ByVal TempDifference As Single, ByVal Fpi As Single, ByVal SubCooling As Boolean)
            Me.Invoke("CopyCondenserRecord", New Object() {CloudID, EquipmentId, Revision, AmbientTemp, Refrigerant, ThrCircuit1, ThrCircuit2, ThrCircuit3, ThrCircuit4, TempDifference, Fpi, SubCooling})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyCondenserRecord(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal AmbientTemp As Single, ByVal Refrigerant As String, ByVal ThrCircuit1 As Single, ByVal ThrCircuit2 As Single, ByVal ThrCircuit3 As Single, ByVal ThrCircuit4 As Single, ByVal TempDifference As Single, ByVal Fpi As Single, ByVal SubCooling As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyCondenserRecord", New Object() {CloudID, EquipmentId, Revision, AmbientTemp, Refrigerant, ThrCircuit1, ThrCircuit2, ThrCircuit3, ThrCircuit4, TempDifference, Fpi, SubCooling}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyCondenserRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCondenserRecordAsync(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal AmbientTemp As Single, ByVal Refrigerant As String, ByVal ThrCircuit1 As Single, ByVal ThrCircuit2 As Single, ByVal ThrCircuit3 As Single, ByVal ThrCircuit4 As Single, ByVal TempDifference As Single, ByVal Fpi As Single, ByVal SubCooling As Boolean)
            Me.CopyCondenserRecordAsync(CloudID, EquipmentId, Revision, AmbientTemp, Refrigerant, ThrCircuit1, ThrCircuit2, ThrCircuit3, ThrCircuit4, TempDifference, Fpi, SubCooling, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCondenserRecordAsync(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal AmbientTemp As Single, ByVal Refrigerant As String, ByVal ThrCircuit1 As Single, ByVal ThrCircuit2 As Single, ByVal ThrCircuit3 As Single, ByVal ThrCircuit4 As Single, ByVal TempDifference As Single, ByVal Fpi As Single, ByVal SubCooling As Boolean, ByVal userState As Object)
            If (Me.CopyCondenserRecordOperationCompleted Is Nothing) Then
                Me.CopyCondenserRecordOperationCompleted = AddressOf Me.OnCopyCondenserRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyCondenserRecord", New Object() {CloudID, EquipmentId, Revision, AmbientTemp, Refrigerant, ThrCircuit1, ThrCircuit2, ThrCircuit3, ThrCircuit4, TempDifference, Fpi, SubCooling}, Me.CopyCondenserRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyCondenserRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyCondenserRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyCondenserRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyCondenserProcessesRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyCondenserProcessesRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Altitude As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal CatalogRating As Boolean,  _
                    ByVal CFM As Single,  _
                    ByVal CoilDesc As String,  _
                    ByVal CoilLength As Single,  _
                    ByVal CoilWidth As Single,  _
                    ByVal ExtStaticPressure As Single,  _
                    ByVal Fan As String,  _
                    ByVal Model As String,  _
                    ByVal Name As String,  _
                    ByVal NumFans As Single,  _
                    ByVal Refrigerant As String,  _
                    ByVal Series As String,  _
                    ByVal SubCooling As Boolean,  _
                    ByVal SubCoolingPercentage As Single,  _
                    ByVal TD As Single,  _
                    ByVal Division As String)
            Me.Invoke("CopyCondenserProcessesRecord", New Object() {CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Altitude, AmbientTemp, CatalogRating, CFM, CoilDesc, CoilLength, CoilWidth, ExtStaticPressure, Fan, Model, Name, NumFans, Refrigerant, Series, SubCooling, SubCoolingPercentage, TD, Division})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyCondenserProcessesRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Altitude As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal CatalogRating As Boolean,  _
                    ByVal CFM As Single,  _
                    ByVal CoilDesc As String,  _
                    ByVal CoilLength As Single,  _
                    ByVal CoilWidth As Single,  _
                    ByVal ExtStaticPressure As Single,  _
                    ByVal Fan As String,  _
                    ByVal Model As String,  _
                    ByVal Name As String,  _
                    ByVal NumFans As Single,  _
                    ByVal Refrigerant As String,  _
                    ByVal Series As String,  _
                    ByVal SubCooling As Boolean,  _
                    ByVal SubCoolingPercentage As Single,  _
                    ByVal TD As Single,  _
                    ByVal Division As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyCondenserProcessesRecord", New Object() {CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Altitude, AmbientTemp, CatalogRating, CFM, CoilDesc, CoilLength, CoilWidth, ExtStaticPressure, Fan, Model, Name, NumFans, Refrigerant, Series, SubCooling, SubCoolingPercentage, TD, Division}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyCondenserProcessesRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCondenserProcessesRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Altitude As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal CatalogRating As Boolean,  _
                    ByVal CFM As Single,  _
                    ByVal CoilDesc As String,  _
                    ByVal CoilLength As Single,  _
                    ByVal CoilWidth As Single,  _
                    ByVal ExtStaticPressure As Single,  _
                    ByVal Fan As String,  _
                    ByVal Model As String,  _
                    ByVal Name As String,  _
                    ByVal NumFans As Single,  _
                    ByVal Refrigerant As String,  _
                    ByVal Series As String,  _
                    ByVal SubCooling As Boolean,  _
                    ByVal SubCoolingPercentage As Single,  _
                    ByVal TD As Single,  _
                    ByVal Division As String)
            Me.CopyCondenserProcessesRecordAsync(CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Altitude, AmbientTemp, CatalogRating, CFM, CoilDesc, CoilLength, CoilWidth, ExtStaticPressure, Fan, Model, Name, NumFans, Refrigerant, Series, SubCooling, SubCoolingPercentage, TD, Division, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCondenserProcessesRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Altitude As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal CatalogRating As Boolean,  _
                    ByVal CFM As Single,  _
                    ByVal CoilDesc As String,  _
                    ByVal CoilLength As Single,  _
                    ByVal CoilWidth As Single,  _
                    ByVal ExtStaticPressure As Single,  _
                    ByVal Fan As String,  _
                    ByVal Model As String,  _
                    ByVal Name As String,  _
                    ByVal NumFans As Single,  _
                    ByVal Refrigerant As String,  _
                    ByVal Series As String,  _
                    ByVal SubCooling As Boolean,  _
                    ByVal SubCoolingPercentage As Single,  _
                    ByVal TD As Single,  _
                    ByVal Division As String,  _
                    ByVal userState As Object)
            If (Me.CopyCondenserProcessesRecordOperationCompleted Is Nothing) Then
                Me.CopyCondenserProcessesRecordOperationCompleted = AddressOf Me.OnCopyCondenserProcessesRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyCondenserProcessesRecord", New Object() {CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Altitude, AmbientTemp, CatalogRating, CFM, CoilDesc, CoilLength, CoilWidth, ExtStaticPressure, Fan, Model, Name, NumFans, Refrigerant, Series, SubCooling, SubCoolingPercentage, TD, Division}, Me.CopyCondenserProcessesRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyCondenserProcessesRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyCondenserProcessesRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyCondenserProcessesRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyCondensingUnitRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyCondensingUnitRecord(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal AmbientTemp As Single, ByVal SuctionTemp As Single, ByVal Refrigerant As String, ByVal Circuit1Capacity As Single, ByVal Circuit2Capacity As Single, ByVal Circuit3Capacity As Integer, ByVal Circuit4Capacity As Integer, ByVal EvapTemp As Single, ByVal Efficiency As Single)
            Me.Invoke("CopyCondensingUnitRecord", New Object() {CloudID, EquipmentId, Revision, AmbientTemp, SuctionTemp, Refrigerant, Circuit1Capacity, Circuit2Capacity, Circuit3Capacity, Circuit4Capacity, EvapTemp, Efficiency})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyCondensingUnitRecord(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal AmbientTemp As Single, ByVal SuctionTemp As Single, ByVal Refrigerant As String, ByVal Circuit1Capacity As Single, ByVal Circuit2Capacity As Single, ByVal Circuit3Capacity As Integer, ByVal Circuit4Capacity As Integer, ByVal EvapTemp As Single, ByVal Efficiency As Single, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyCondensingUnitRecord", New Object() {CloudID, EquipmentId, Revision, AmbientTemp, SuctionTemp, Refrigerant, Circuit1Capacity, Circuit2Capacity, Circuit3Capacity, Circuit4Capacity, EvapTemp, Efficiency}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyCondensingUnitRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCondensingUnitRecordAsync(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal AmbientTemp As Single, ByVal SuctionTemp As Single, ByVal Refrigerant As String, ByVal Circuit1Capacity As Single, ByVal Circuit2Capacity As Single, ByVal Circuit3Capacity As Integer, ByVal Circuit4Capacity As Integer, ByVal EvapTemp As Single, ByVal Efficiency As Single)
            Me.CopyCondensingUnitRecordAsync(CloudID, EquipmentId, Revision, AmbientTemp, SuctionTemp, Refrigerant, Circuit1Capacity, Circuit2Capacity, Circuit3Capacity, Circuit4Capacity, EvapTemp, Efficiency, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCondensingUnitRecordAsync(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal AmbientTemp As Single, ByVal SuctionTemp As Single, ByVal Refrigerant As String, ByVal Circuit1Capacity As Single, ByVal Circuit2Capacity As Single, ByVal Circuit3Capacity As Integer, ByVal Circuit4Capacity As Integer, ByVal EvapTemp As Single, ByVal Efficiency As Single, ByVal userState As Object)
            If (Me.CopyCondensingUnitRecordOperationCompleted Is Nothing) Then
                Me.CopyCondensingUnitRecordOperationCompleted = AddressOf Me.OnCopyCondensingUnitRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyCondensingUnitRecord", New Object() {CloudID, EquipmentId, Revision, AmbientTemp, SuctionTemp, Refrigerant, Circuit1Capacity, Circuit2Capacity, Circuit3Capacity, Circuit4Capacity, EvapTemp, Efficiency}, Me.CopyCondensingUnitRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyCondensingUnitRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyCondensingUnitRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyCondensingUnitRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyCondensingUnitProcessesRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyCondensingUnitProcessesRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal CondensingUnitSeries As String,  _
                    ByVal Capacity As Single,  _
                    ByVal RunTimeAdjust As Boolean,  _
                    ByVal CondensingUnitsRequired As Single,  _
                    ByVal RunTime As Single,  _
                    ByVal AmbientTemperature As Single,  _
                    ByVal SuctionTemperature As Single,  _
                    ByVal Refrigerant As String,  _
                    ByVal Compressor As String,  _
                    ByVal CompressorPerUnit As Integer,  _
                    ByVal CircuitsPerUnit As Integer,  _
                    ByVal Altitude As Single,  _
                    ByVal RunType As String,  _
                    ByVal NoCondensingUnits As Boolean,  _
                    ByVal CondensingUnitModel As String,  _
                    ByVal CustomCondensingUnitModel As String,  _
                    ByVal RatingAmbient As Single,  _
                    ByVal RatingAmbientInterval As Single,  _
                    ByVal RatingAmbientStep As Single,  _
                    ByVal RatingSuction As Single,  _
                    ByVal RatingSuctionInterval As Single,  _
                    ByVal RatingSuctionStep As Single,  _
                    ByVal RatingRefrigerant As String,  _
                    ByVal RatingAltitude As Single,  _
                    ByVal RatingSubCooling As Single,  _
                    ByVal RatingCatalog As Boolean,  _
                    ByVal RatingHertz As Single,  _
                    ByVal RatingSafety As Boolean,  _
                    ByVal Compressor1 As String,  _
                    ByVal Compressor2 As String,  _
                    ByVal Compressor3 As String,  _
                    ByVal Compressor4 As String,  _
                    ByVal CompressorQuantity1 As Integer,  _
                    ByVal CompressorQuantity2 As Integer,  _
                    ByVal CompressorQuantity3 As Integer,  _
                    ByVal CompressorQuantity4 As Integer,  _
                    ByVal FinHeight1 As Single,  _
                    ByVal FinHeight2 As Single,  _
                    ByVal FinHeight3 As Single,  _
                    ByVal FinHeight4 As Single,  _
                    ByVal CoilFinWidth1 As Single,  _
                    ByVal CoilFinWidth2 As Single,  _
                    ByVal CoilFinWidth3 As Single,  _
                    ByVal CoilFinWidth4 As Single,  _
                    ByVal CoilRows1 As Integer,  _
                    ByVal CoilRows2 As Integer,  _
                    ByVal CoilRows3 As Integer,  _
                    ByVal CoilRows4 As Integer,  _
                    ByVal CoilSubCoolingPercentage1 As Single,  _
                    ByVal CoilSubCoolingPercentage2 As Single,  _
                    ByVal CoilSubCoolingPercentage3 As Single,  _
                    ByVal CoilSubCoolingPercentage4 As Single,  _
                    ByVal FinsPerInch1 As Integer,  _
                    ByVal FinsPerInch2 As Integer,  _
                    ByVal FinsPerInch3 As Integer,  _
                    ByVal FinsPerInch4 As Integer,  _
                    ByVal FanDia1 As String,  _
                    ByVal FanDia2 As String,  _
                    ByVal FanDia3 As String,  _
                    ByVal FanDia4 As String,  _
                    ByVal FanQuantity1 As Integer,  _
                    ByVal FanQuantity2 As Integer,  _
                    ByVal FanQuantity3 As Integer,  _
                    ByVal FanQuantity4 As Integer,  _
                    ByVal Division As String,  _
                    ByVal Voltage As Integer,  _
                    ByVal Use10Coefficients As Boolean,  _
                    ByVal TubeDiameter1 As Single,  _
                    ByVal TubeDiameter2 As Single,  _
                    ByVal TubeDiameter3 As Single,  _
                    ByVal TubeDiameter4 As Single,  _
                    ByVal TubeSurface1 As String,  _
                    ByVal TubeSurface2 As String,  _
                    ByVal TubeSurface3 As String,  _
                    ByVal TubeSurface4 As String,  _
                    ByVal FinType1 As String,  _
                    ByVal FinType2 As String,  _
                    ByVal FinType3 As String,  _
                    ByVal FinType4 As String,  _
                    ByVal FanRPM1 As Decimal,  _
                    ByVal FanRPM2 As Decimal,  _
                    ByVal FanRPM3 As Decimal,  _
                    ByVal FanRPM4 As Decimal,  _
                    ByVal DOEModel As String)
            Me.Invoke("CopyCondensingUnitProcessesRecord", New Object() {CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Name, CondensingUnitSeries, Capacity, RunTimeAdjust, CondensingUnitsRequired, RunTime, AmbientTemperature, SuctionTemperature, Refrigerant, Compressor, CompressorPerUnit, CircuitsPerUnit, Altitude, RunType, NoCondensingUnits, CondensingUnitModel, CustomCondensingUnitModel, RatingAmbient, RatingAmbientInterval, RatingAmbientStep, RatingSuction, RatingSuctionInterval, RatingSuctionStep, RatingRefrigerant, RatingAltitude, RatingSubCooling, RatingCatalog, RatingHertz, RatingSafety, Compressor1, Compressor2, Compressor3, Compressor4, CompressorQuantity1, CompressorQuantity2, CompressorQuantity3, CompressorQuantity4, FinHeight1, FinHeight2, FinHeight3, FinHeight4, CoilFinWidth1, CoilFinWidth2, CoilFinWidth3, CoilFinWidth4, CoilRows1, CoilRows2, CoilRows3, CoilRows4, CoilSubCoolingPercentage1, CoilSubCoolingPercentage2, CoilSubCoolingPercentage3, CoilSubCoolingPercentage4, FinsPerInch1, FinsPerInch2, FinsPerInch3, FinsPerInch4, FanDia1, FanDia2, FanDia3, FanDia4, FanQuantity1, FanQuantity2, FanQuantity3, FanQuantity4, Division, Voltage, Use10Coefficients, TubeDiameter1, TubeDiameter2, TubeDiameter3, TubeDiameter4, TubeSurface1, TubeSurface2, TubeSurface3, TubeSurface4, FinType1, FinType2, FinType3, FinType4, FanRPM1, FanRPM2, FanRPM3, FanRPM4, DOEModel})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyCondensingUnitProcessesRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal CondensingUnitSeries As String,  _
                    ByVal Capacity As Single,  _
                    ByVal RunTimeAdjust As Boolean,  _
                    ByVal CondensingUnitsRequired As Single,  _
                    ByVal RunTime As Single,  _
                    ByVal AmbientTemperature As Single,  _
                    ByVal SuctionTemperature As Single,  _
                    ByVal Refrigerant As String,  _
                    ByVal Compressor As String,  _
                    ByVal CompressorPerUnit As Integer,  _
                    ByVal CircuitsPerUnit As Integer,  _
                    ByVal Altitude As Single,  _
                    ByVal RunType As String,  _
                    ByVal NoCondensingUnits As Boolean,  _
                    ByVal CondensingUnitModel As String,  _
                    ByVal CustomCondensingUnitModel As String,  _
                    ByVal RatingAmbient As Single,  _
                    ByVal RatingAmbientInterval As Single,  _
                    ByVal RatingAmbientStep As Single,  _
                    ByVal RatingSuction As Single,  _
                    ByVal RatingSuctionInterval As Single,  _
                    ByVal RatingSuctionStep As Single,  _
                    ByVal RatingRefrigerant As String,  _
                    ByVal RatingAltitude As Single,  _
                    ByVal RatingSubCooling As Single,  _
                    ByVal RatingCatalog As Boolean,  _
                    ByVal RatingHertz As Single,  _
                    ByVal RatingSafety As Boolean,  _
                    ByVal Compressor1 As String,  _
                    ByVal Compressor2 As String,  _
                    ByVal Compressor3 As String,  _
                    ByVal Compressor4 As String,  _
                    ByVal CompressorQuantity1 As Integer,  _
                    ByVal CompressorQuantity2 As Integer,  _
                    ByVal CompressorQuantity3 As Integer,  _
                    ByVal CompressorQuantity4 As Integer,  _
                    ByVal FinHeight1 As Single,  _
                    ByVal FinHeight2 As Single,  _
                    ByVal FinHeight3 As Single,  _
                    ByVal FinHeight4 As Single,  _
                    ByVal CoilFinWidth1 As Single,  _
                    ByVal CoilFinWidth2 As Single,  _
                    ByVal CoilFinWidth3 As Single,  _
                    ByVal CoilFinWidth4 As Single,  _
                    ByVal CoilRows1 As Integer,  _
                    ByVal CoilRows2 As Integer,  _
                    ByVal CoilRows3 As Integer,  _
                    ByVal CoilRows4 As Integer,  _
                    ByVal CoilSubCoolingPercentage1 As Single,  _
                    ByVal CoilSubCoolingPercentage2 As Single,  _
                    ByVal CoilSubCoolingPercentage3 As Single,  _
                    ByVal CoilSubCoolingPercentage4 As Single,  _
                    ByVal FinsPerInch1 As Integer,  _
                    ByVal FinsPerInch2 As Integer,  _
                    ByVal FinsPerInch3 As Integer,  _
                    ByVal FinsPerInch4 As Integer,  _
                    ByVal FanDia1 As String,  _
                    ByVal FanDia2 As String,  _
                    ByVal FanDia3 As String,  _
                    ByVal FanDia4 As String,  _
                    ByVal FanQuantity1 As Integer,  _
                    ByVal FanQuantity2 As Integer,  _
                    ByVal FanQuantity3 As Integer,  _
                    ByVal FanQuantity4 As Integer,  _
                    ByVal Division As String,  _
                    ByVal Voltage As Integer,  _
                    ByVal Use10Coefficients As Boolean,  _
                    ByVal TubeDiameter1 As Single,  _
                    ByVal TubeDiameter2 As Single,  _
                    ByVal TubeDiameter3 As Single,  _
                    ByVal TubeDiameter4 As Single,  _
                    ByVal TubeSurface1 As String,  _
                    ByVal TubeSurface2 As String,  _
                    ByVal TubeSurface3 As String,  _
                    ByVal TubeSurface4 As String,  _
                    ByVal FinType1 As String,  _
                    ByVal FinType2 As String,  _
                    ByVal FinType3 As String,  _
                    ByVal FinType4 As String,  _
                    ByVal FanRPM1 As Decimal,  _
                    ByVal FanRPM2 As Decimal,  _
                    ByVal FanRPM3 As Decimal,  _
                    ByVal FanRPM4 As Decimal,  _
                    ByVal DOEModel As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyCondensingUnitProcessesRecord", New Object() {CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Name, CondensingUnitSeries, Capacity, RunTimeAdjust, CondensingUnitsRequired, RunTime, AmbientTemperature, SuctionTemperature, Refrigerant, Compressor, CompressorPerUnit, CircuitsPerUnit, Altitude, RunType, NoCondensingUnits, CondensingUnitModel, CustomCondensingUnitModel, RatingAmbient, RatingAmbientInterval, RatingAmbientStep, RatingSuction, RatingSuctionInterval, RatingSuctionStep, RatingRefrigerant, RatingAltitude, RatingSubCooling, RatingCatalog, RatingHertz, RatingSafety, Compressor1, Compressor2, Compressor3, Compressor4, CompressorQuantity1, CompressorQuantity2, CompressorQuantity3, CompressorQuantity4, FinHeight1, FinHeight2, FinHeight3, FinHeight4, CoilFinWidth1, CoilFinWidth2, CoilFinWidth3, CoilFinWidth4, CoilRows1, CoilRows2, CoilRows3, CoilRows4, CoilSubCoolingPercentage1, CoilSubCoolingPercentage2, CoilSubCoolingPercentage3, CoilSubCoolingPercentage4, FinsPerInch1, FinsPerInch2, FinsPerInch3, FinsPerInch4, FanDia1, FanDia2, FanDia3, FanDia4, FanQuantity1, FanQuantity2, FanQuantity3, FanQuantity4, Division, Voltage, Use10Coefficients, TubeDiameter1, TubeDiameter2, TubeDiameter3, TubeDiameter4, TubeSurface1, TubeSurface2, TubeSurface3, TubeSurface4, FinType1, FinType2, FinType3, FinType4, FanRPM1, FanRPM2, FanRPM3, FanRPM4, DOEModel}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyCondensingUnitProcessesRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCondensingUnitProcessesRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal CondensingUnitSeries As String,  _
                    ByVal Capacity As Single,  _
                    ByVal RunTimeAdjust As Boolean,  _
                    ByVal CondensingUnitsRequired As Single,  _
                    ByVal RunTime As Single,  _
                    ByVal AmbientTemperature As Single,  _
                    ByVal SuctionTemperature As Single,  _
                    ByVal Refrigerant As String,  _
                    ByVal Compressor As String,  _
                    ByVal CompressorPerUnit As Integer,  _
                    ByVal CircuitsPerUnit As Integer,  _
                    ByVal Altitude As Single,  _
                    ByVal RunType As String,  _
                    ByVal NoCondensingUnits As Boolean,  _
                    ByVal CondensingUnitModel As String,  _
                    ByVal CustomCondensingUnitModel As String,  _
                    ByVal RatingAmbient As Single,  _
                    ByVal RatingAmbientInterval As Single,  _
                    ByVal RatingAmbientStep As Single,  _
                    ByVal RatingSuction As Single,  _
                    ByVal RatingSuctionInterval As Single,  _
                    ByVal RatingSuctionStep As Single,  _
                    ByVal RatingRefrigerant As String,  _
                    ByVal RatingAltitude As Single,  _
                    ByVal RatingSubCooling As Single,  _
                    ByVal RatingCatalog As Boolean,  _
                    ByVal RatingHertz As Single,  _
                    ByVal RatingSafety As Boolean,  _
                    ByVal Compressor1 As String,  _
                    ByVal Compressor2 As String,  _
                    ByVal Compressor3 As String,  _
                    ByVal Compressor4 As String,  _
                    ByVal CompressorQuantity1 As Integer,  _
                    ByVal CompressorQuantity2 As Integer,  _
                    ByVal CompressorQuantity3 As Integer,  _
                    ByVal CompressorQuantity4 As Integer,  _
                    ByVal FinHeight1 As Single,  _
                    ByVal FinHeight2 As Single,  _
                    ByVal FinHeight3 As Single,  _
                    ByVal FinHeight4 As Single,  _
                    ByVal CoilFinWidth1 As Single,  _
                    ByVal CoilFinWidth2 As Single,  _
                    ByVal CoilFinWidth3 As Single,  _
                    ByVal CoilFinWidth4 As Single,  _
                    ByVal CoilRows1 As Integer,  _
                    ByVal CoilRows2 As Integer,  _
                    ByVal CoilRows3 As Integer,  _
                    ByVal CoilRows4 As Integer,  _
                    ByVal CoilSubCoolingPercentage1 As Single,  _
                    ByVal CoilSubCoolingPercentage2 As Single,  _
                    ByVal CoilSubCoolingPercentage3 As Single,  _
                    ByVal CoilSubCoolingPercentage4 As Single,  _
                    ByVal FinsPerInch1 As Integer,  _
                    ByVal FinsPerInch2 As Integer,  _
                    ByVal FinsPerInch3 As Integer,  _
                    ByVal FinsPerInch4 As Integer,  _
                    ByVal FanDia1 As String,  _
                    ByVal FanDia2 As String,  _
                    ByVal FanDia3 As String,  _
                    ByVal FanDia4 As String,  _
                    ByVal FanQuantity1 As Integer,  _
                    ByVal FanQuantity2 As Integer,  _
                    ByVal FanQuantity3 As Integer,  _
                    ByVal FanQuantity4 As Integer,  _
                    ByVal Division As String,  _
                    ByVal Voltage As Integer,  _
                    ByVal Use10Coefficients As Boolean,  _
                    ByVal TubeDiameter1 As Single,  _
                    ByVal TubeDiameter2 As Single,  _
                    ByVal TubeDiameter3 As Single,  _
                    ByVal TubeDiameter4 As Single,  _
                    ByVal TubeSurface1 As String,  _
                    ByVal TubeSurface2 As String,  _
                    ByVal TubeSurface3 As String,  _
                    ByVal TubeSurface4 As String,  _
                    ByVal FinType1 As String,  _
                    ByVal FinType2 As String,  _
                    ByVal FinType3 As String,  _
                    ByVal FinType4 As String,  _
                    ByVal FanRPM1 As Decimal,  _
                    ByVal FanRPM2 As Decimal,  _
                    ByVal FanRPM3 As Decimal,  _
                    ByVal FanRPM4 As Decimal,  _
                    ByVal DOEModel As String)
            Me.CopyCondensingUnitProcessesRecordAsync(CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Name, CondensingUnitSeries, Capacity, RunTimeAdjust, CondensingUnitsRequired, RunTime, AmbientTemperature, SuctionTemperature, Refrigerant, Compressor, CompressorPerUnit, CircuitsPerUnit, Altitude, RunType, NoCondensingUnits, CondensingUnitModel, CustomCondensingUnitModel, RatingAmbient, RatingAmbientInterval, RatingAmbientStep, RatingSuction, RatingSuctionInterval, RatingSuctionStep, RatingRefrigerant, RatingAltitude, RatingSubCooling, RatingCatalog, RatingHertz, RatingSafety, Compressor1, Compressor2, Compressor3, Compressor4, CompressorQuantity1, CompressorQuantity2, CompressorQuantity3, CompressorQuantity4, FinHeight1, FinHeight2, FinHeight3, FinHeight4, CoilFinWidth1, CoilFinWidth2, CoilFinWidth3, CoilFinWidth4, CoilRows1, CoilRows2, CoilRows3, CoilRows4, CoilSubCoolingPercentage1, CoilSubCoolingPercentage2, CoilSubCoolingPercentage3, CoilSubCoolingPercentage4, FinsPerInch1, FinsPerInch2, FinsPerInch3, FinsPerInch4, FanDia1, FanDia2, FanDia3, FanDia4, FanQuantity1, FanQuantity2, FanQuantity3, FanQuantity4, Division, Voltage, Use10Coefficients, TubeDiameter1, TubeDiameter2, TubeDiameter3, TubeDiameter4, TubeSurface1, TubeSurface2, TubeSurface3, TubeSurface4, FinType1, FinType2, FinType3, FinType4, FanRPM1, FanRPM2, FanRPM3, FanRPM4, DOEModel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCondensingUnitProcessesRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal CondensingUnitSeries As String,  _
                    ByVal Capacity As Single,  _
                    ByVal RunTimeAdjust As Boolean,  _
                    ByVal CondensingUnitsRequired As Single,  _
                    ByVal RunTime As Single,  _
                    ByVal AmbientTemperature As Single,  _
                    ByVal SuctionTemperature As Single,  _
                    ByVal Refrigerant As String,  _
                    ByVal Compressor As String,  _
                    ByVal CompressorPerUnit As Integer,  _
                    ByVal CircuitsPerUnit As Integer,  _
                    ByVal Altitude As Single,  _
                    ByVal RunType As String,  _
                    ByVal NoCondensingUnits As Boolean,  _
                    ByVal CondensingUnitModel As String,  _
                    ByVal CustomCondensingUnitModel As String,  _
                    ByVal RatingAmbient As Single,  _
                    ByVal RatingAmbientInterval As Single,  _
                    ByVal RatingAmbientStep As Single,  _
                    ByVal RatingSuction As Single,  _
                    ByVal RatingSuctionInterval As Single,  _
                    ByVal RatingSuctionStep As Single,  _
                    ByVal RatingRefrigerant As String,  _
                    ByVal RatingAltitude As Single,  _
                    ByVal RatingSubCooling As Single,  _
                    ByVal RatingCatalog As Boolean,  _
                    ByVal RatingHertz As Single,  _
                    ByVal RatingSafety As Boolean,  _
                    ByVal Compressor1 As String,  _
                    ByVal Compressor2 As String,  _
                    ByVal Compressor3 As String,  _
                    ByVal Compressor4 As String,  _
                    ByVal CompressorQuantity1 As Integer,  _
                    ByVal CompressorQuantity2 As Integer,  _
                    ByVal CompressorQuantity3 As Integer,  _
                    ByVal CompressorQuantity4 As Integer,  _
                    ByVal FinHeight1 As Single,  _
                    ByVal FinHeight2 As Single,  _
                    ByVal FinHeight3 As Single,  _
                    ByVal FinHeight4 As Single,  _
                    ByVal CoilFinWidth1 As Single,  _
                    ByVal CoilFinWidth2 As Single,  _
                    ByVal CoilFinWidth3 As Single,  _
                    ByVal CoilFinWidth4 As Single,  _
                    ByVal CoilRows1 As Integer,  _
                    ByVal CoilRows2 As Integer,  _
                    ByVal CoilRows3 As Integer,  _
                    ByVal CoilRows4 As Integer,  _
                    ByVal CoilSubCoolingPercentage1 As Single,  _
                    ByVal CoilSubCoolingPercentage2 As Single,  _
                    ByVal CoilSubCoolingPercentage3 As Single,  _
                    ByVal CoilSubCoolingPercentage4 As Single,  _
                    ByVal FinsPerInch1 As Integer,  _
                    ByVal FinsPerInch2 As Integer,  _
                    ByVal FinsPerInch3 As Integer,  _
                    ByVal FinsPerInch4 As Integer,  _
                    ByVal FanDia1 As String,  _
                    ByVal FanDia2 As String,  _
                    ByVal FanDia3 As String,  _
                    ByVal FanDia4 As String,  _
                    ByVal FanQuantity1 As Integer,  _
                    ByVal FanQuantity2 As Integer,  _
                    ByVal FanQuantity3 As Integer,  _
                    ByVal FanQuantity4 As Integer,  _
                    ByVal Division As String,  _
                    ByVal Voltage As Integer,  _
                    ByVal Use10Coefficients As Boolean,  _
                    ByVal TubeDiameter1 As Single,  _
                    ByVal TubeDiameter2 As Single,  _
                    ByVal TubeDiameter3 As Single,  _
                    ByVal TubeDiameter4 As Single,  _
                    ByVal TubeSurface1 As String,  _
                    ByVal TubeSurface2 As String,  _
                    ByVal TubeSurface3 As String,  _
                    ByVal TubeSurface4 As String,  _
                    ByVal FinType1 As String,  _
                    ByVal FinType2 As String,  _
                    ByVal FinType3 As String,  _
                    ByVal FinType4 As String,  _
                    ByVal FanRPM1 As Decimal,  _
                    ByVal FanRPM2 As Decimal,  _
                    ByVal FanRPM3 As Decimal,  _
                    ByVal FanRPM4 As Decimal,  _
                    ByVal DOEModel As String,  _
                    ByVal userState As Object)
            If (Me.CopyCondensingUnitProcessesRecordOperationCompleted Is Nothing) Then
                Me.CopyCondensingUnitProcessesRecordOperationCompleted = AddressOf Me.OnCopyCondensingUnitProcessesRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyCondensingUnitProcessesRecord", New Object() {CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Name, CondensingUnitSeries, Capacity, RunTimeAdjust, CondensingUnitsRequired, RunTime, AmbientTemperature, SuctionTemperature, Refrigerant, Compressor, CompressorPerUnit, CircuitsPerUnit, Altitude, RunType, NoCondensingUnits, CondensingUnitModel, CustomCondensingUnitModel, RatingAmbient, RatingAmbientInterval, RatingAmbientStep, RatingSuction, RatingSuctionInterval, RatingSuctionStep, RatingRefrigerant, RatingAltitude, RatingSubCooling, RatingCatalog, RatingHertz, RatingSafety, Compressor1, Compressor2, Compressor3, Compressor4, CompressorQuantity1, CompressorQuantity2, CompressorQuantity3, CompressorQuantity4, FinHeight1, FinHeight2, FinHeight3, FinHeight4, CoilFinWidth1, CoilFinWidth2, CoilFinWidth3, CoilFinWidth4, CoilRows1, CoilRows2, CoilRows3, CoilRows4, CoilSubCoolingPercentage1, CoilSubCoolingPercentage2, CoilSubCoolingPercentage3, CoilSubCoolingPercentage4, FinsPerInch1, FinsPerInch2, FinsPerInch3, FinsPerInch4, FanDia1, FanDia2, FanDia3, FanDia4, FanQuantity1, FanQuantity2, FanQuantity3, FanQuantity4, Division, Voltage, Use10Coefficients, TubeDiameter1, TubeDiameter2, TubeDiameter3, TubeDiameter4, TubeSurface1, TubeSurface2, TubeSurface3, TubeSurface4, FinType1, FinType2, FinType3, FinType4, FanRPM1, FanRPM2, FanRPM3, FanRPM4, DOEModel}, Me.CopyCondensingUnitProcessesRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyCondensingUnitProcessesRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyCondensingUnitProcessesRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyCondensingUnitProcessesRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyCoolStuffUserAshraeRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyCoolStuffUserAshraeRecord(ByVal CloudID As Integer, ByVal Category As String, ByVal Commodity As String, ByVal Type As String, ByVal StorageTemp As String, ByVal RH As String, ByVal StorageLife As String, ByVal WaterContentpcent As Single, ByVal HighFreeze As Single, ByVal HeatAboveBTU As Single, ByVal HeatBelowBTU As Single, ByVal LatentHeatBTU As Single, ByVal HeatRespire As Single, ByVal FromRep As Boolean, ByVal mycounter As Integer)
            Me.Invoke("CopyCoolStuffUserAshraeRecord", New Object() {CloudID, Category, Commodity, Type, StorageTemp, RH, StorageLife, WaterContentpcent, HighFreeze, HeatAboveBTU, HeatBelowBTU, LatentHeatBTU, HeatRespire, FromRep, mycounter})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyCoolStuffUserAshraeRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal Category As String,  _
                    ByVal Commodity As String,  _
                    ByVal Type As String,  _
                    ByVal StorageTemp As String,  _
                    ByVal RH As String,  _
                    ByVal StorageLife As String,  _
                    ByVal WaterContentpcent As Single,  _
                    ByVal HighFreeze As Single,  _
                    ByVal HeatAboveBTU As Single,  _
                    ByVal HeatBelowBTU As Single,  _
                    ByVal LatentHeatBTU As Single,  _
                    ByVal HeatRespire As Single,  _
                    ByVal FromRep As Boolean,  _
                    ByVal mycounter As Integer,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyCoolStuffUserAshraeRecord", New Object() {CloudID, Category, Commodity, Type, StorageTemp, RH, StorageLife, WaterContentpcent, HighFreeze, HeatAboveBTU, HeatBelowBTU, LatentHeatBTU, HeatRespire, FromRep, mycounter}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyCoolStuffUserAshraeRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCoolStuffUserAshraeRecordAsync(ByVal CloudID As Integer, ByVal Category As String, ByVal Commodity As String, ByVal Type As String, ByVal StorageTemp As String, ByVal RH As String, ByVal StorageLife As String, ByVal WaterContentpcent As Single, ByVal HighFreeze As Single, ByVal HeatAboveBTU As Single, ByVal HeatBelowBTU As Single, ByVal LatentHeatBTU As Single, ByVal HeatRespire As Single, ByVal FromRep As Boolean, ByVal mycounter As Integer)
            Me.CopyCoolStuffUserAshraeRecordAsync(CloudID, Category, Commodity, Type, StorageTemp, RH, StorageLife, WaterContentpcent, HighFreeze, HeatAboveBTU, HeatBelowBTU, LatentHeatBTU, HeatRespire, FromRep, mycounter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCoolStuffUserAshraeRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal Category As String,  _
                    ByVal Commodity As String,  _
                    ByVal Type As String,  _
                    ByVal StorageTemp As String,  _
                    ByVal RH As String,  _
                    ByVal StorageLife As String,  _
                    ByVal WaterContentpcent As Single,  _
                    ByVal HighFreeze As Single,  _
                    ByVal HeatAboveBTU As Single,  _
                    ByVal HeatBelowBTU As Single,  _
                    ByVal LatentHeatBTU As Single,  _
                    ByVal HeatRespire As Single,  _
                    ByVal FromRep As Boolean,  _
                    ByVal mycounter As Integer,  _
                    ByVal userState As Object)
            If (Me.CopyCoolStuffUserAshraeRecordOperationCompleted Is Nothing) Then
                Me.CopyCoolStuffUserAshraeRecordOperationCompleted = AddressOf Me.OnCopyCoolStuffUserAshraeRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyCoolStuffUserAshraeRecord", New Object() {CloudID, Category, Commodity, Type, StorageTemp, RH, StorageLife, WaterContentpcent, HighFreeze, HeatAboveBTU, HeatBelowBTU, LatentHeatBTU, HeatRespire, FromRep, mycounter}, Me.CopyCoolStuffUserAshraeRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyCoolStuffUserAshraeRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyCoolStuffUserAshraeRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyCoolStuffUserAshraeRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyCoolStuffReportProjectRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyCoolStuffReportProjectRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ID As Integer,  _
                    ByVal PROJECTID As String,  _
                    ByVal REVISION As Integer,  _
                    ByVal Ambient As String,  _
                    ByVal ExtWB As String,  _
                    ByVal RmTemp As String,  _
                    ByVal RMWB As String,  _
                    ByVal roomVolume As String,  _
                    ByVal roomArea As String,  _
                    ByVal Height As String,  _
                    ByVal ExtTempW1 As String,  _
                    ByVal ExtTempW2 As String,  _
                    ByVal ExtTempW3 As String,  _
                    ByVal ExtTempW4 As String,  _
                    ByVal ExtTempW5 As String,  _
                    ByVal ExtTempW6 As String,  _
                    ByVal InsulW1 As String,  _
                    ByVal InsulW2 As String,  _
                    ByVal InsulW3 As String,  _
                    ByVal InsulW4 As String,  _
                    ByVal InsulW5 As String,  _
                    ByVal InsulW6 As String,  _
                    ByVal ThickW1 As String,  _
                    ByVal ThickW2 As String,  _
                    ByVal ThickW3 As String,  _
                    ByVal ThickW4 As String,  _
                    ByVal ThickW5 As String,  _
                    ByVal ThickW6 As String,  _
                    ByVal KFactorW1 As String,  _
                    ByVal KFactorW2 As String,  _
                    ByVal KFactorW3 As String,  _
                    ByVal KFactorW4 As String,  _
                    ByVal KFactorW5 As String,  _
                    ByVal KFactorW6 As String,  _
                    ByVal Walltot As String,  _
                    ByVal FExtTemp As String,  _
                    ByVal InsulF As String,  _
                    ByVal ThickF As String,  _
                    ByVal KFactorF As String,  _
                    ByVal FloorTot As String,  _
                    ByVal CExtTemp As String,  _
                    ByVal InsulC As String,  _
                    ByVal ThickC As String,  _
                    ByVal KFactorC As String,  _
                    ByVal CeilingTot As String,  _
                    ByVal TransTot As String,  _
                    ByVal IVolume As String,  _
                    ByVal InfWB As String,  _
                    ByVal InfDB As String,  _
                    ByVal IFactor As String,  _
                    ByVal IAirChg As String,  _
                    ByVal IHeatRem As String,  _
                    ByVal TotInfil As String,  _
                    ByVal Product As String,  _
                    ByVal Type As String,  _
                    ByVal FreezePt As String,  _
                    ByVal CHeat As String,  _
                    ByVal CFHeat As String,  _
                    ByVal FLatent As String,  _
                    ByVal CIbs As String,  _
                    ByVal CLoad As String,  _
                    ByVal CPull As String,  _
                    ByVal CEnter As String,  _
                    ByVal CFinal As String,  _
                    ByVal CTot As String,  _
                    ByVal FTot As String,  _
                    ByVal CFPTot As String,  _
                    ByVal CFTot As String,  _
                    ByVal RIbs As String,  _
                    ByVal RHeat As String,  _
                    ByVal RTot As String,  _
                    ByVal ProdTot As String,  _
                    ByVal WattL As String,  _
                    ByVal TotOL As String,  _
                    ByVal MotorHP As String,  _
                    ByVal TotOM As String,  _
                    ByVal People As String,  _
                    ByVal TotOP As String,  _
                    ByVal OtherType As String,  _
                    ByVal OtherBTU As String,  _
                    ByVal TotOO As String,  _
                    ByVal OtherTot As String,  _
                    ByVal SumTran As String,  _
                    ByVal SumINf As String,  _
                    ByVal SumProd As String,  _
                    ByVal SumOther As String,  _
                    ByVal SumTot As String,  _
                    ByVal Safety As String,  _
                    ByVal SafetyTot As String,  _
                    ByVal RunVar As String,  _
                    ByVal RunVarTot As String,  _
                    ByVal LoadTot As String,  _
                    ByVal btnAllWallsy As Boolean,  _
                    ByVal btnallwallsN As Boolean,  _
                    ByVal chkFreezept As Boolean,  _
                    ByVal chkfreezetoCore As Boolean,  _
                    ByVal mystate As String,  _
                    ByVal mycity As String,  _
                    ByVal rw1 As Decimal,  _
                    ByVal rw2 As Decimal,  _
                    ByVal rw3 As Decimal,  _
                    ByVal rw4 As Decimal,  _
                    ByVal rw5 As Decimal,  _
                    ByVal rw6 As Decimal,  _
                    ByVal rwfloor As Decimal,  _
                    ByVal rwceiling As Decimal,  _
                    ByVal kfactors As Boolean,  _
                    ByVal forklift As String,  _
                    ByVal totforklift As String,  _
                    ByVal dockdoors As String,  _
                    ByVal totdockdoors As String,  _
                    ByVal wall1 As String,  _
                    ByVal wall2 As String,  _
                    ByVal wall3 As String,  _
                    ByVal wall4 As String,  _
                    ByVal wall5 As String,  _
                    ByVal wall6 As String,  _
                    ByVal height1 As String,  _
                    ByVal height2 As String,  _
                    ByVal height3 As String,  _
                    ByVal height4 As String,  _
                    ByVal height5 As String,  _
                    ByVal height6 As String,  _
                    ByVal rdorectangle As Boolean,  _
                    ByVal txtimagecounter As String,  _
                    ByVal Description As String,  _
                    ByVal UserCapacity As String,  _
                    ByVal UserCapacityChecked As Boolean,  _
                    ByVal CreatedWhen As Date)
            Me.Invoke("CopyCoolStuffReportProjectRecord", New Object() {CloudID, ID, PROJECTID, REVISION, Ambient, ExtWB, RmTemp, RMWB, roomVolume, roomArea, Height, ExtTempW1, ExtTempW2, ExtTempW3, ExtTempW4, ExtTempW5, ExtTempW6, InsulW1, InsulW2, InsulW3, InsulW4, InsulW5, InsulW6, ThickW1, ThickW2, ThickW3, ThickW4, ThickW5, ThickW6, KFactorW1, KFactorW2, KFactorW3, KFactorW4, KFactorW5, KFactorW6, Walltot, FExtTemp, InsulF, ThickF, KFactorF, FloorTot, CExtTemp, InsulC, ThickC, KFactorC, CeilingTot, TransTot, IVolume, InfWB, InfDB, IFactor, IAirChg, IHeatRem, TotInfil, Product, Type, FreezePt, CHeat, CFHeat, FLatent, CIbs, CLoad, CPull, CEnter, CFinal, CTot, FTot, CFPTot, CFTot, RIbs, RHeat, RTot, ProdTot, WattL, TotOL, MotorHP, TotOM, People, TotOP, OtherType, OtherBTU, TotOO, OtherTot, SumTran, SumINf, SumProd, SumOther, SumTot, Safety, SafetyTot, RunVar, RunVarTot, LoadTot, btnAllWallsy, btnallwallsN, chkFreezept, chkfreezetoCore, mystate, mycity, rw1, rw2, rw3, rw4, rw5, rw6, rwfloor, rwceiling, kfactors, forklift, totforklift, dockdoors, totdockdoors, wall1, wall2, wall3, wall4, wall5, wall6, height1, height2, height3, height4, height5, height6, rdorectangle, txtimagecounter, Description, UserCapacity, UserCapacityChecked, CreatedWhen})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyCoolStuffReportProjectRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ID As Integer,  _
                    ByVal PROJECTID As String,  _
                    ByVal REVISION As Integer,  _
                    ByVal Ambient As String,  _
                    ByVal ExtWB As String,  _
                    ByVal RmTemp As String,  _
                    ByVal RMWB As String,  _
                    ByVal roomVolume As String,  _
                    ByVal roomArea As String,  _
                    ByVal Height As String,  _
                    ByVal ExtTempW1 As String,  _
                    ByVal ExtTempW2 As String,  _
                    ByVal ExtTempW3 As String,  _
                    ByVal ExtTempW4 As String,  _
                    ByVal ExtTempW5 As String,  _
                    ByVal ExtTempW6 As String,  _
                    ByVal InsulW1 As String,  _
                    ByVal InsulW2 As String,  _
                    ByVal InsulW3 As String,  _
                    ByVal InsulW4 As String,  _
                    ByVal InsulW5 As String,  _
                    ByVal InsulW6 As String,  _
                    ByVal ThickW1 As String,  _
                    ByVal ThickW2 As String,  _
                    ByVal ThickW3 As String,  _
                    ByVal ThickW4 As String,  _
                    ByVal ThickW5 As String,  _
                    ByVal ThickW6 As String,  _
                    ByVal KFactorW1 As String,  _
                    ByVal KFactorW2 As String,  _
                    ByVal KFactorW3 As String,  _
                    ByVal KFactorW4 As String,  _
                    ByVal KFactorW5 As String,  _
                    ByVal KFactorW6 As String,  _
                    ByVal Walltot As String,  _
                    ByVal FExtTemp As String,  _
                    ByVal InsulF As String,  _
                    ByVal ThickF As String,  _
                    ByVal KFactorF As String,  _
                    ByVal FloorTot As String,  _
                    ByVal CExtTemp As String,  _
                    ByVal InsulC As String,  _
                    ByVal ThickC As String,  _
                    ByVal KFactorC As String,  _
                    ByVal CeilingTot As String,  _
                    ByVal TransTot As String,  _
                    ByVal IVolume As String,  _
                    ByVal InfWB As String,  _
                    ByVal InfDB As String,  _
                    ByVal IFactor As String,  _
                    ByVal IAirChg As String,  _
                    ByVal IHeatRem As String,  _
                    ByVal TotInfil As String,  _
                    ByVal Product As String,  _
                    ByVal Type As String,  _
                    ByVal FreezePt As String,  _
                    ByVal CHeat As String,  _
                    ByVal CFHeat As String,  _
                    ByVal FLatent As String,  _
                    ByVal CIbs As String,  _
                    ByVal CLoad As String,  _
                    ByVal CPull As String,  _
                    ByVal CEnter As String,  _
                    ByVal CFinal As String,  _
                    ByVal CTot As String,  _
                    ByVal FTot As String,  _
                    ByVal CFPTot As String,  _
                    ByVal CFTot As String,  _
                    ByVal RIbs As String,  _
                    ByVal RHeat As String,  _
                    ByVal RTot As String,  _
                    ByVal ProdTot As String,  _
                    ByVal WattL As String,  _
                    ByVal TotOL As String,  _
                    ByVal MotorHP As String,  _
                    ByVal TotOM As String,  _
                    ByVal People As String,  _
                    ByVal TotOP As String,  _
                    ByVal OtherType As String,  _
                    ByVal OtherBTU As String,  _
                    ByVal TotOO As String,  _
                    ByVal OtherTot As String,  _
                    ByVal SumTran As String,  _
                    ByVal SumINf As String,  _
                    ByVal SumProd As String,  _
                    ByVal SumOther As String,  _
                    ByVal SumTot As String,  _
                    ByVal Safety As String,  _
                    ByVal SafetyTot As String,  _
                    ByVal RunVar As String,  _
                    ByVal RunVarTot As String,  _
                    ByVal LoadTot As String,  _
                    ByVal btnAllWallsy As Boolean,  _
                    ByVal btnallwallsN As Boolean,  _
                    ByVal chkFreezept As Boolean,  _
                    ByVal chkfreezetoCore As Boolean,  _
                    ByVal mystate As String,  _
                    ByVal mycity As String,  _
                    ByVal rw1 As Decimal,  _
                    ByVal rw2 As Decimal,  _
                    ByVal rw3 As Decimal,  _
                    ByVal rw4 As Decimal,  _
                    ByVal rw5 As Decimal,  _
                    ByVal rw6 As Decimal,  _
                    ByVal rwfloor As Decimal,  _
                    ByVal rwceiling As Decimal,  _
                    ByVal kfactors As Boolean,  _
                    ByVal forklift As String,  _
                    ByVal totforklift As String,  _
                    ByVal dockdoors As String,  _
                    ByVal totdockdoors As String,  _
                    ByVal wall1 As String,  _
                    ByVal wall2 As String,  _
                    ByVal wall3 As String,  _
                    ByVal wall4 As String,  _
                    ByVal wall5 As String,  _
                    ByVal wall6 As String,  _
                    ByVal height1 As String,  _
                    ByVal height2 As String,  _
                    ByVal height3 As String,  _
                    ByVal height4 As String,  _
                    ByVal height5 As String,  _
                    ByVal height6 As String,  _
                    ByVal rdorectangle As Boolean,  _
                    ByVal txtimagecounter As String,  _
                    ByVal Description As String,  _
                    ByVal UserCapacity As String,  _
                    ByVal UserCapacityChecked As Boolean,  _
                    ByVal CreatedWhen As Date,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyCoolStuffReportProjectRecord", New Object() {CloudID, ID, PROJECTID, REVISION, Ambient, ExtWB, RmTemp, RMWB, roomVolume, roomArea, Height, ExtTempW1, ExtTempW2, ExtTempW3, ExtTempW4, ExtTempW5, ExtTempW6, InsulW1, InsulW2, InsulW3, InsulW4, InsulW5, InsulW6, ThickW1, ThickW2, ThickW3, ThickW4, ThickW5, ThickW6, KFactorW1, KFactorW2, KFactorW3, KFactorW4, KFactorW5, KFactorW6, Walltot, FExtTemp, InsulF, ThickF, KFactorF, FloorTot, CExtTemp, InsulC, ThickC, KFactorC, CeilingTot, TransTot, IVolume, InfWB, InfDB, IFactor, IAirChg, IHeatRem, TotInfil, Product, Type, FreezePt, CHeat, CFHeat, FLatent, CIbs, CLoad, CPull, CEnter, CFinal, CTot, FTot, CFPTot, CFTot, RIbs, RHeat, RTot, ProdTot, WattL, TotOL, MotorHP, TotOM, People, TotOP, OtherType, OtherBTU, TotOO, OtherTot, SumTran, SumINf, SumProd, SumOther, SumTot, Safety, SafetyTot, RunVar, RunVarTot, LoadTot, btnAllWallsy, btnallwallsN, chkFreezept, chkfreezetoCore, mystate, mycity, rw1, rw2, rw3, rw4, rw5, rw6, rwfloor, rwceiling, kfactors, forklift, totforklift, dockdoors, totdockdoors, wall1, wall2, wall3, wall4, wall5, wall6, height1, height2, height3, height4, height5, height6, rdorectangle, txtimagecounter, Description, UserCapacity, UserCapacityChecked, CreatedWhen}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyCoolStuffReportProjectRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCoolStuffReportProjectRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ID As Integer,  _
                    ByVal PROJECTID As String,  _
                    ByVal REVISION As Integer,  _
                    ByVal Ambient As String,  _
                    ByVal ExtWB As String,  _
                    ByVal RmTemp As String,  _
                    ByVal RMWB As String,  _
                    ByVal roomVolume As String,  _
                    ByVal roomArea As String,  _
                    ByVal Height As String,  _
                    ByVal ExtTempW1 As String,  _
                    ByVal ExtTempW2 As String,  _
                    ByVal ExtTempW3 As String,  _
                    ByVal ExtTempW4 As String,  _
                    ByVal ExtTempW5 As String,  _
                    ByVal ExtTempW6 As String,  _
                    ByVal InsulW1 As String,  _
                    ByVal InsulW2 As String,  _
                    ByVal InsulW3 As String,  _
                    ByVal InsulW4 As String,  _
                    ByVal InsulW5 As String,  _
                    ByVal InsulW6 As String,  _
                    ByVal ThickW1 As String,  _
                    ByVal ThickW2 As String,  _
                    ByVal ThickW3 As String,  _
                    ByVal ThickW4 As String,  _
                    ByVal ThickW5 As String,  _
                    ByVal ThickW6 As String,  _
                    ByVal KFactorW1 As String,  _
                    ByVal KFactorW2 As String,  _
                    ByVal KFactorW3 As String,  _
                    ByVal KFactorW4 As String,  _
                    ByVal KFactorW5 As String,  _
                    ByVal KFactorW6 As String,  _
                    ByVal Walltot As String,  _
                    ByVal FExtTemp As String,  _
                    ByVal InsulF As String,  _
                    ByVal ThickF As String,  _
                    ByVal KFactorF As String,  _
                    ByVal FloorTot As String,  _
                    ByVal CExtTemp As String,  _
                    ByVal InsulC As String,  _
                    ByVal ThickC As String,  _
                    ByVal KFactorC As String,  _
                    ByVal CeilingTot As String,  _
                    ByVal TransTot As String,  _
                    ByVal IVolume As String,  _
                    ByVal InfWB As String,  _
                    ByVal InfDB As String,  _
                    ByVal IFactor As String,  _
                    ByVal IAirChg As String,  _
                    ByVal IHeatRem As String,  _
                    ByVal TotInfil As String,  _
                    ByVal Product As String,  _
                    ByVal Type As String,  _
                    ByVal FreezePt As String,  _
                    ByVal CHeat As String,  _
                    ByVal CFHeat As String,  _
                    ByVal FLatent As String,  _
                    ByVal CIbs As String,  _
                    ByVal CLoad As String,  _
                    ByVal CPull As String,  _
                    ByVal CEnter As String,  _
                    ByVal CFinal As String,  _
                    ByVal CTot As String,  _
                    ByVal FTot As String,  _
                    ByVal CFPTot As String,  _
                    ByVal CFTot As String,  _
                    ByVal RIbs As String,  _
                    ByVal RHeat As String,  _
                    ByVal RTot As String,  _
                    ByVal ProdTot As String,  _
                    ByVal WattL As String,  _
                    ByVal TotOL As String,  _
                    ByVal MotorHP As String,  _
                    ByVal TotOM As String,  _
                    ByVal People As String,  _
                    ByVal TotOP As String,  _
                    ByVal OtherType As String,  _
                    ByVal OtherBTU As String,  _
                    ByVal TotOO As String,  _
                    ByVal OtherTot As String,  _
                    ByVal SumTran As String,  _
                    ByVal SumINf As String,  _
                    ByVal SumProd As String,  _
                    ByVal SumOther As String,  _
                    ByVal SumTot As String,  _
                    ByVal Safety As String,  _
                    ByVal SafetyTot As String,  _
                    ByVal RunVar As String,  _
                    ByVal RunVarTot As String,  _
                    ByVal LoadTot As String,  _
                    ByVal btnAllWallsy As Boolean,  _
                    ByVal btnallwallsN As Boolean,  _
                    ByVal chkFreezept As Boolean,  _
                    ByVal chkfreezetoCore As Boolean,  _
                    ByVal mystate As String,  _
                    ByVal mycity As String,  _
                    ByVal rw1 As Decimal,  _
                    ByVal rw2 As Decimal,  _
                    ByVal rw3 As Decimal,  _
                    ByVal rw4 As Decimal,  _
                    ByVal rw5 As Decimal,  _
                    ByVal rw6 As Decimal,  _
                    ByVal rwfloor As Decimal,  _
                    ByVal rwceiling As Decimal,  _
                    ByVal kfactors As Boolean,  _
                    ByVal forklift As String,  _
                    ByVal totforklift As String,  _
                    ByVal dockdoors As String,  _
                    ByVal totdockdoors As String,  _
                    ByVal wall1 As String,  _
                    ByVal wall2 As String,  _
                    ByVal wall3 As String,  _
                    ByVal wall4 As String,  _
                    ByVal wall5 As String,  _
                    ByVal wall6 As String,  _
                    ByVal height1 As String,  _
                    ByVal height2 As String,  _
                    ByVal height3 As String,  _
                    ByVal height4 As String,  _
                    ByVal height5 As String,  _
                    ByVal height6 As String,  _
                    ByVal rdorectangle As Boolean,  _
                    ByVal txtimagecounter As String,  _
                    ByVal Description As String,  _
                    ByVal UserCapacity As String,  _
                    ByVal UserCapacityChecked As Boolean,  _
                    ByVal CreatedWhen As Date)
            Me.CopyCoolStuffReportProjectRecordAsync(CloudID, ID, PROJECTID, REVISION, Ambient, ExtWB, RmTemp, RMWB, roomVolume, roomArea, Height, ExtTempW1, ExtTempW2, ExtTempW3, ExtTempW4, ExtTempW5, ExtTempW6, InsulW1, InsulW2, InsulW3, InsulW4, InsulW5, InsulW6, ThickW1, ThickW2, ThickW3, ThickW4, ThickW5, ThickW6, KFactorW1, KFactorW2, KFactorW3, KFactorW4, KFactorW5, KFactorW6, Walltot, FExtTemp, InsulF, ThickF, KFactorF, FloorTot, CExtTemp, InsulC, ThickC, KFactorC, CeilingTot, TransTot, IVolume, InfWB, InfDB, IFactor, IAirChg, IHeatRem, TotInfil, Product, Type, FreezePt, CHeat, CFHeat, FLatent, CIbs, CLoad, CPull, CEnter, CFinal, CTot, FTot, CFPTot, CFTot, RIbs, RHeat, RTot, ProdTot, WattL, TotOL, MotorHP, TotOM, People, TotOP, OtherType, OtherBTU, TotOO, OtherTot, SumTran, SumINf, SumProd, SumOther, SumTot, Safety, SafetyTot, RunVar, RunVarTot, LoadTot, btnAllWallsy, btnallwallsN, chkFreezept, chkfreezetoCore, mystate, mycity, rw1, rw2, rw3, rw4, rw5, rw6, rwfloor, rwceiling, kfactors, forklift, totforklift, dockdoors, totdockdoors, wall1, wall2, wall3, wall4, wall5, wall6, height1, height2, height3, height4, height5, height6, rdorectangle, txtimagecounter, Description, UserCapacity, UserCapacityChecked, CreatedWhen, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCoolStuffReportProjectRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ID As Integer,  _
                    ByVal PROJECTID As String,  _
                    ByVal REVISION As Integer,  _
                    ByVal Ambient As String,  _
                    ByVal ExtWB As String,  _
                    ByVal RmTemp As String,  _
                    ByVal RMWB As String,  _
                    ByVal roomVolume As String,  _
                    ByVal roomArea As String,  _
                    ByVal Height As String,  _
                    ByVal ExtTempW1 As String,  _
                    ByVal ExtTempW2 As String,  _
                    ByVal ExtTempW3 As String,  _
                    ByVal ExtTempW4 As String,  _
                    ByVal ExtTempW5 As String,  _
                    ByVal ExtTempW6 As String,  _
                    ByVal InsulW1 As String,  _
                    ByVal InsulW2 As String,  _
                    ByVal InsulW3 As String,  _
                    ByVal InsulW4 As String,  _
                    ByVal InsulW5 As String,  _
                    ByVal InsulW6 As String,  _
                    ByVal ThickW1 As String,  _
                    ByVal ThickW2 As String,  _
                    ByVal ThickW3 As String,  _
                    ByVal ThickW4 As String,  _
                    ByVal ThickW5 As String,  _
                    ByVal ThickW6 As String,  _
                    ByVal KFactorW1 As String,  _
                    ByVal KFactorW2 As String,  _
                    ByVal KFactorW3 As String,  _
                    ByVal KFactorW4 As String,  _
                    ByVal KFactorW5 As String,  _
                    ByVal KFactorW6 As String,  _
                    ByVal Walltot As String,  _
                    ByVal FExtTemp As String,  _
                    ByVal InsulF As String,  _
                    ByVal ThickF As String,  _
                    ByVal KFactorF As String,  _
                    ByVal FloorTot As String,  _
                    ByVal CExtTemp As String,  _
                    ByVal InsulC As String,  _
                    ByVal ThickC As String,  _
                    ByVal KFactorC As String,  _
                    ByVal CeilingTot As String,  _
                    ByVal TransTot As String,  _
                    ByVal IVolume As String,  _
                    ByVal InfWB As String,  _
                    ByVal InfDB As String,  _
                    ByVal IFactor As String,  _
                    ByVal IAirChg As String,  _
                    ByVal IHeatRem As String,  _
                    ByVal TotInfil As String,  _
                    ByVal Product As String,  _
                    ByVal Type As String,  _
                    ByVal FreezePt As String,  _
                    ByVal CHeat As String,  _
                    ByVal CFHeat As String,  _
                    ByVal FLatent As String,  _
                    ByVal CIbs As String,  _
                    ByVal CLoad As String,  _
                    ByVal CPull As String,  _
                    ByVal CEnter As String,  _
                    ByVal CFinal As String,  _
                    ByVal CTot As String,  _
                    ByVal FTot As String,  _
                    ByVal CFPTot As String,  _
                    ByVal CFTot As String,  _
                    ByVal RIbs As String,  _
                    ByVal RHeat As String,  _
                    ByVal RTot As String,  _
                    ByVal ProdTot As String,  _
                    ByVal WattL As String,  _
                    ByVal TotOL As String,  _
                    ByVal MotorHP As String,  _
                    ByVal TotOM As String,  _
                    ByVal People As String,  _
                    ByVal TotOP As String,  _
                    ByVal OtherType As String,  _
                    ByVal OtherBTU As String,  _
                    ByVal TotOO As String,  _
                    ByVal OtherTot As String,  _
                    ByVal SumTran As String,  _
                    ByVal SumINf As String,  _
                    ByVal SumProd As String,  _
                    ByVal SumOther As String,  _
                    ByVal SumTot As String,  _
                    ByVal Safety As String,  _
                    ByVal SafetyTot As String,  _
                    ByVal RunVar As String,  _
                    ByVal RunVarTot As String,  _
                    ByVal LoadTot As String,  _
                    ByVal btnAllWallsy As Boolean,  _
                    ByVal btnallwallsN As Boolean,  _
                    ByVal chkFreezept As Boolean,  _
                    ByVal chkfreezetoCore As Boolean,  _
                    ByVal mystate As String,  _
                    ByVal mycity As String,  _
                    ByVal rw1 As Decimal,  _
                    ByVal rw2 As Decimal,  _
                    ByVal rw3 As Decimal,  _
                    ByVal rw4 As Decimal,  _
                    ByVal rw5 As Decimal,  _
                    ByVal rw6 As Decimal,  _
                    ByVal rwfloor As Decimal,  _
                    ByVal rwceiling As Decimal,  _
                    ByVal kfactors As Boolean,  _
                    ByVal forklift As String,  _
                    ByVal totforklift As String,  _
                    ByVal dockdoors As String,  _
                    ByVal totdockdoors As String,  _
                    ByVal wall1 As String,  _
                    ByVal wall2 As String,  _
                    ByVal wall3 As String,  _
                    ByVal wall4 As String,  _
                    ByVal wall5 As String,  _
                    ByVal wall6 As String,  _
                    ByVal height1 As String,  _
                    ByVal height2 As String,  _
                    ByVal height3 As String,  _
                    ByVal height4 As String,  _
                    ByVal height5 As String,  _
                    ByVal height6 As String,  _
                    ByVal rdorectangle As Boolean,  _
                    ByVal txtimagecounter As String,  _
                    ByVal Description As String,  _
                    ByVal UserCapacity As String,  _
                    ByVal UserCapacityChecked As Boolean,  _
                    ByVal CreatedWhen As Date,  _
                    ByVal userState As Object)
            If (Me.CopyCoolStuffReportProjectRecordOperationCompleted Is Nothing) Then
                Me.CopyCoolStuffReportProjectRecordOperationCompleted = AddressOf Me.OnCopyCoolStuffReportProjectRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyCoolStuffReportProjectRecord", New Object() {CloudID, ID, PROJECTID, REVISION, Ambient, ExtWB, RmTemp, RMWB, roomVolume, roomArea, Height, ExtTempW1, ExtTempW2, ExtTempW3, ExtTempW4, ExtTempW5, ExtTempW6, InsulW1, InsulW2, InsulW3, InsulW4, InsulW5, InsulW6, ThickW1, ThickW2, ThickW3, ThickW4, ThickW5, ThickW6, KFactorW1, KFactorW2, KFactorW3, KFactorW4, KFactorW5, KFactorW6, Walltot, FExtTemp, InsulF, ThickF, KFactorF, FloorTot, CExtTemp, InsulC, ThickC, KFactorC, CeilingTot, TransTot, IVolume, InfWB, InfDB, IFactor, IAirChg, IHeatRem, TotInfil, Product, Type, FreezePt, CHeat, CFHeat, FLatent, CIbs, CLoad, CPull, CEnter, CFinal, CTot, FTot, CFPTot, CFTot, RIbs, RHeat, RTot, ProdTot, WattL, TotOL, MotorHP, TotOM, People, TotOP, OtherType, OtherBTU, TotOO, OtherTot, SumTran, SumINf, SumProd, SumOther, SumTot, Safety, SafetyTot, RunVar, RunVarTot, LoadTot, btnAllWallsy, btnallwallsN, chkFreezept, chkfreezetoCore, mystate, mycity, rw1, rw2, rw3, rw4, rw5, rw6, rwfloor, rwceiling, kfactors, forklift, totforklift, dockdoors, totdockdoors, wall1, wall2, wall3, wall4, wall5, wall6, height1, height2, height3, height4, height5, height6, rdorectangle, txtimagecounter, Description, UserCapacity, UserCapacityChecked, CreatedWhen}, Me.CopyCoolStuffReportProjectRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyCoolStuffReportProjectRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyCoolStuffReportProjectRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyCoolStuffReportProjectRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyCoolStuffProjectsRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyCoolStuffProjectsRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ID As Integer,  _
                    ByVal Ambient As String,  _
                    ByVal ExtWB As String,  _
                    ByVal RmTemp As String,  _
                    ByVal RMWB As String,  _
                    ByVal roomVolume As String,  _
                    ByVal roomArea As String,  _
                    ByVal ExtTempW1 As String,  _
                    ByVal ExtTempW2 As String,  _
                    ByVal ExtTempW3 As String,  _
                    ByVal ExtTempW4 As String,  _
                    ByVal ExtTempW5 As String,  _
                    ByVal ExtTempW6 As String,  _
                    ByVal InsulW1 As String,  _
                    ByVal InsulW2 As String,  _
                    ByVal InsulW3 As String,  _
                    ByVal InsulW4 As String,  _
                    ByVal InsulW5 As String,  _
                    ByVal InsulW6 As String,  _
                    ByVal ThickW1 As String,  _
                    ByVal ThickW2 As String,  _
                    ByVal ThickW3 As String,  _
                    ByVal ThickW4 As String,  _
                    ByVal ThickW5 As String,  _
                    ByVal ThickW6 As String,  _
                    ByVal KFactorW1 As String,  _
                    ByVal KFactorW2 As String,  _
                    ByVal KFactorW3 As String,  _
                    ByVal KFactorW4 As String,  _
                    ByVal KFactorW5 As String,  _
                    ByVal KFactorW6 As String,  _
                    ByVal Walltot As String,  _
                    ByVal FExtTemp As String,  _
                    ByVal InsulF As String,  _
                    ByVal ThickF As String,  _
                    ByVal KFactorF As String,  _
                    ByVal FloorTot As String,  _
                    ByVal CExtTemp As String,  _
                    ByVal InsulC As String,  _
                    ByVal ThickC As String,  _
                    ByVal KFactorC As String,  _
                    ByVal CeilingTot As String,  _
                    ByVal TransTot As String,  _
                    ByVal IVolume As String,  _
                    ByVal InfWB As String,  _
                    ByVal InfDB As String,  _
                    ByVal IFactor As String,  _
                    ByVal IAirChg As String,  _
                    ByVal TotInfil As String,  _
                    ByVal WattL As String,  _
                    ByVal TotOL As String,  _
                    ByVal MotorHP As String,  _
                    ByVal TotOM As String,  _
                    ByVal People As String,  _
                    ByVal TotOP As String,  _
                    ByVal OtherType As String,  _
                    ByVal OtherBTU As String,  _
                    ByVal TotOO As String,  _
                    ByVal OtherTot As String,  _
                    ByVal SumTran As String,  _
                    ByVal SumINf As String,  _
                    ByVal SumProd As String,  _
                    ByVal SumOther As String,  _
                    ByVal SumTot As String,  _
                    ByVal Safety As String,  _
                    ByVal SafetyTot As String,  _
                    ByVal RunVar As String,  _
                    ByVal RunVarTot As String,  _
                    ByVal LoadTot As String,  _
                    ByVal btnAllWallsy As Boolean,  _
                    ByVal btnallwallsN As Boolean,  _
                    ByVal chkFreezept As Boolean,  _
                    ByVal chkfreezetoCore As Boolean,  _
                    ByVal mystate As String,  _
                    ByVal mycity As String,  _
                    ByVal rw1 As Decimal,  _
                    ByVal rw2 As Decimal,  _
                    ByVal rw3 As Decimal,  _
                    ByVal rw4 As Decimal,  _
                    ByVal rw5 As Decimal,  _
                    ByVal rw6 As Decimal,  _
                    ByVal rwfloor As Decimal,  _
                    ByVal rwceiling As Decimal,  _
                    ByVal kfactors As Boolean,  _
                    ByVal forklift As String,  _
                    ByVal totforklift As String,  _
                    ByVal dockdoors As String,  _
                    ByVal totdockdoors As String,  _
                    ByVal wall1 As String,  _
                    ByVal wall2 As String,  _
                    ByVal wall3 As String,  _
                    ByVal wall4 As String,  _
                    ByVal wall5 As String,  _
                    ByVal wall6 As String,  _
                    ByVal height1 As String,  _
                    ByVal height2 As String,  _
                    ByVal height3 As String,  _
                    ByVal height4 As String,  _
                    ByVal height5 As String,  _
                    ByVal height6 As String,  _
                    ByVal rdorectangle As Boolean,  _
                    ByVal txtimagecounter As String,  _
                    ByVal Description As String,  _
                    ByVal UserCapacity As String,  _
                    ByVal UserCapacityChecked As Boolean,  _
                    ByVal CreatedWhen As Date,  _
                    ByVal RoomNumber As String,  _
                    ByVal BLName As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ItemRevision As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ItemId As String,  _
                    ByVal LinkedItemId As String,  _
                    ByVal LinkedItemRevision As Decimal,  _
                    ByVal Contact1 As Integer,  _
                    ByVal Contact2 As Integer)
            Me.Invoke("CopyCoolStuffProjectsRecord", New Object() {CloudID, ID, Ambient, ExtWB, RmTemp, RMWB, roomVolume, roomArea, ExtTempW1, ExtTempW2, ExtTempW3, ExtTempW4, ExtTempW5, ExtTempW6, InsulW1, InsulW2, InsulW3, InsulW4, InsulW5, InsulW6, ThickW1, ThickW2, ThickW3, ThickW4, ThickW5, ThickW6, KFactorW1, KFactorW2, KFactorW3, KFactorW4, KFactorW5, KFactorW6, Walltot, FExtTemp, InsulF, ThickF, KFactorF, FloorTot, CExtTemp, InsulC, ThickC, KFactorC, CeilingTot, TransTot, IVolume, InfWB, InfDB, IFactor, IAirChg, TotInfil, WattL, TotOL, MotorHP, TotOM, People, TotOP, OtherType, OtherBTU, TotOO, OtherTot, SumTran, SumINf, SumProd, SumOther, SumTot, Safety, SafetyTot, RunVar, RunVarTot, LoadTot, btnAllWallsy, btnallwallsN, chkFreezept, chkfreezetoCore, mystate, mycity, rw1, rw2, rw3, rw4, rw5, rw6, rwfloor, rwceiling, kfactors, forklift, totforklift, dockdoors, totdockdoors, wall1, wall2, wall3, wall4, wall5, wall6, height1, height2, height3, height4, height5, height6, rdorectangle, txtimagecounter, Description, UserCapacity, UserCapacityChecked, CreatedWhen, RoomNumber, BLName, ProjectRevision, ItemRevision, ProjectId, ItemId, LinkedItemId, LinkedItemRevision, Contact1, Contact2})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyCoolStuffProjectsRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ID As Integer,  _
                    ByVal Ambient As String,  _
                    ByVal ExtWB As String,  _
                    ByVal RmTemp As String,  _
                    ByVal RMWB As String,  _
                    ByVal roomVolume As String,  _
                    ByVal roomArea As String,  _
                    ByVal ExtTempW1 As String,  _
                    ByVal ExtTempW2 As String,  _
                    ByVal ExtTempW3 As String,  _
                    ByVal ExtTempW4 As String,  _
                    ByVal ExtTempW5 As String,  _
                    ByVal ExtTempW6 As String,  _
                    ByVal InsulW1 As String,  _
                    ByVal InsulW2 As String,  _
                    ByVal InsulW3 As String,  _
                    ByVal InsulW4 As String,  _
                    ByVal InsulW5 As String,  _
                    ByVal InsulW6 As String,  _
                    ByVal ThickW1 As String,  _
                    ByVal ThickW2 As String,  _
                    ByVal ThickW3 As String,  _
                    ByVal ThickW4 As String,  _
                    ByVal ThickW5 As String,  _
                    ByVal ThickW6 As String,  _
                    ByVal KFactorW1 As String,  _
                    ByVal KFactorW2 As String,  _
                    ByVal KFactorW3 As String,  _
                    ByVal KFactorW4 As String,  _
                    ByVal KFactorW5 As String,  _
                    ByVal KFactorW6 As String,  _
                    ByVal Walltot As String,  _
                    ByVal FExtTemp As String,  _
                    ByVal InsulF As String,  _
                    ByVal ThickF As String,  _
                    ByVal KFactorF As String,  _
                    ByVal FloorTot As String,  _
                    ByVal CExtTemp As String,  _
                    ByVal InsulC As String,  _
                    ByVal ThickC As String,  _
                    ByVal KFactorC As String,  _
                    ByVal CeilingTot As String,  _
                    ByVal TransTot As String,  _
                    ByVal IVolume As String,  _
                    ByVal InfWB As String,  _
                    ByVal InfDB As String,  _
                    ByVal IFactor As String,  _
                    ByVal IAirChg As String,  _
                    ByVal TotInfil As String,  _
                    ByVal WattL As String,  _
                    ByVal TotOL As String,  _
                    ByVal MotorHP As String,  _
                    ByVal TotOM As String,  _
                    ByVal People As String,  _
                    ByVal TotOP As String,  _
                    ByVal OtherType As String,  _
                    ByVal OtherBTU As String,  _
                    ByVal TotOO As String,  _
                    ByVal OtherTot As String,  _
                    ByVal SumTran As String,  _
                    ByVal SumINf As String,  _
                    ByVal SumProd As String,  _
                    ByVal SumOther As String,  _
                    ByVal SumTot As String,  _
                    ByVal Safety As String,  _
                    ByVal SafetyTot As String,  _
                    ByVal RunVar As String,  _
                    ByVal RunVarTot As String,  _
                    ByVal LoadTot As String,  _
                    ByVal btnAllWallsy As Boolean,  _
                    ByVal btnallwallsN As Boolean,  _
                    ByVal chkFreezept As Boolean,  _
                    ByVal chkfreezetoCore As Boolean,  _
                    ByVal mystate As String,  _
                    ByVal mycity As String,  _
                    ByVal rw1 As Decimal,  _
                    ByVal rw2 As Decimal,  _
                    ByVal rw3 As Decimal,  _
                    ByVal rw4 As Decimal,  _
                    ByVal rw5 As Decimal,  _
                    ByVal rw6 As Decimal,  _
                    ByVal rwfloor As Decimal,  _
                    ByVal rwceiling As Decimal,  _
                    ByVal kfactors As Boolean,  _
                    ByVal forklift As String,  _
                    ByVal totforklift As String,  _
                    ByVal dockdoors As String,  _
                    ByVal totdockdoors As String,  _
                    ByVal wall1 As String,  _
                    ByVal wall2 As String,  _
                    ByVal wall3 As String,  _
                    ByVal wall4 As String,  _
                    ByVal wall5 As String,  _
                    ByVal wall6 As String,  _
                    ByVal height1 As String,  _
                    ByVal height2 As String,  _
                    ByVal height3 As String,  _
                    ByVal height4 As String,  _
                    ByVal height5 As String,  _
                    ByVal height6 As String,  _
                    ByVal rdorectangle As Boolean,  _
                    ByVal txtimagecounter As String,  _
                    ByVal Description As String,  _
                    ByVal UserCapacity As String,  _
                    ByVal UserCapacityChecked As Boolean,  _
                    ByVal CreatedWhen As Date,  _
                    ByVal RoomNumber As String,  _
                    ByVal BLName As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ItemRevision As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ItemId As String,  _
                    ByVal LinkedItemId As String,  _
                    ByVal LinkedItemRevision As Decimal,  _
                    ByVal Contact1 As Integer,  _
                    ByVal Contact2 As Integer,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyCoolStuffProjectsRecord", New Object() {CloudID, ID, Ambient, ExtWB, RmTemp, RMWB, roomVolume, roomArea, ExtTempW1, ExtTempW2, ExtTempW3, ExtTempW4, ExtTempW5, ExtTempW6, InsulW1, InsulW2, InsulW3, InsulW4, InsulW5, InsulW6, ThickW1, ThickW2, ThickW3, ThickW4, ThickW5, ThickW6, KFactorW1, KFactorW2, KFactorW3, KFactorW4, KFactorW5, KFactorW6, Walltot, FExtTemp, InsulF, ThickF, KFactorF, FloorTot, CExtTemp, InsulC, ThickC, KFactorC, CeilingTot, TransTot, IVolume, InfWB, InfDB, IFactor, IAirChg, TotInfil, WattL, TotOL, MotorHP, TotOM, People, TotOP, OtherType, OtherBTU, TotOO, OtherTot, SumTran, SumINf, SumProd, SumOther, SumTot, Safety, SafetyTot, RunVar, RunVarTot, LoadTot, btnAllWallsy, btnallwallsN, chkFreezept, chkfreezetoCore, mystate, mycity, rw1, rw2, rw3, rw4, rw5, rw6, rwfloor, rwceiling, kfactors, forklift, totforklift, dockdoors, totdockdoors, wall1, wall2, wall3, wall4, wall5, wall6, height1, height2, height3, height4, height5, height6, rdorectangle, txtimagecounter, Description, UserCapacity, UserCapacityChecked, CreatedWhen, RoomNumber, BLName, ProjectRevision, ItemRevision, ProjectId, ItemId, LinkedItemId, LinkedItemRevision, Contact1, Contact2}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyCoolStuffProjectsRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCoolStuffProjectsRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ID As Integer,  _
                    ByVal Ambient As String,  _
                    ByVal ExtWB As String,  _
                    ByVal RmTemp As String,  _
                    ByVal RMWB As String,  _
                    ByVal roomVolume As String,  _
                    ByVal roomArea As String,  _
                    ByVal ExtTempW1 As String,  _
                    ByVal ExtTempW2 As String,  _
                    ByVal ExtTempW3 As String,  _
                    ByVal ExtTempW4 As String,  _
                    ByVal ExtTempW5 As String,  _
                    ByVal ExtTempW6 As String,  _
                    ByVal InsulW1 As String,  _
                    ByVal InsulW2 As String,  _
                    ByVal InsulW3 As String,  _
                    ByVal InsulW4 As String,  _
                    ByVal InsulW5 As String,  _
                    ByVal InsulW6 As String,  _
                    ByVal ThickW1 As String,  _
                    ByVal ThickW2 As String,  _
                    ByVal ThickW3 As String,  _
                    ByVal ThickW4 As String,  _
                    ByVal ThickW5 As String,  _
                    ByVal ThickW6 As String,  _
                    ByVal KFactorW1 As String,  _
                    ByVal KFactorW2 As String,  _
                    ByVal KFactorW3 As String,  _
                    ByVal KFactorW4 As String,  _
                    ByVal KFactorW5 As String,  _
                    ByVal KFactorW6 As String,  _
                    ByVal Walltot As String,  _
                    ByVal FExtTemp As String,  _
                    ByVal InsulF As String,  _
                    ByVal ThickF As String,  _
                    ByVal KFactorF As String,  _
                    ByVal FloorTot As String,  _
                    ByVal CExtTemp As String,  _
                    ByVal InsulC As String,  _
                    ByVal ThickC As String,  _
                    ByVal KFactorC As String,  _
                    ByVal CeilingTot As String,  _
                    ByVal TransTot As String,  _
                    ByVal IVolume As String,  _
                    ByVal InfWB As String,  _
                    ByVal InfDB As String,  _
                    ByVal IFactor As String,  _
                    ByVal IAirChg As String,  _
                    ByVal TotInfil As String,  _
                    ByVal WattL As String,  _
                    ByVal TotOL As String,  _
                    ByVal MotorHP As String,  _
                    ByVal TotOM As String,  _
                    ByVal People As String,  _
                    ByVal TotOP As String,  _
                    ByVal OtherType As String,  _
                    ByVal OtherBTU As String,  _
                    ByVal TotOO As String,  _
                    ByVal OtherTot As String,  _
                    ByVal SumTran As String,  _
                    ByVal SumINf As String,  _
                    ByVal SumProd As String,  _
                    ByVal SumOther As String,  _
                    ByVal SumTot As String,  _
                    ByVal Safety As String,  _
                    ByVal SafetyTot As String,  _
                    ByVal RunVar As String,  _
                    ByVal RunVarTot As String,  _
                    ByVal LoadTot As String,  _
                    ByVal btnAllWallsy As Boolean,  _
                    ByVal btnallwallsN As Boolean,  _
                    ByVal chkFreezept As Boolean,  _
                    ByVal chkfreezetoCore As Boolean,  _
                    ByVal mystate As String,  _
                    ByVal mycity As String,  _
                    ByVal rw1 As Decimal,  _
                    ByVal rw2 As Decimal,  _
                    ByVal rw3 As Decimal,  _
                    ByVal rw4 As Decimal,  _
                    ByVal rw5 As Decimal,  _
                    ByVal rw6 As Decimal,  _
                    ByVal rwfloor As Decimal,  _
                    ByVal rwceiling As Decimal,  _
                    ByVal kfactors As Boolean,  _
                    ByVal forklift As String,  _
                    ByVal totforklift As String,  _
                    ByVal dockdoors As String,  _
                    ByVal totdockdoors As String,  _
                    ByVal wall1 As String,  _
                    ByVal wall2 As String,  _
                    ByVal wall3 As String,  _
                    ByVal wall4 As String,  _
                    ByVal wall5 As String,  _
                    ByVal wall6 As String,  _
                    ByVal height1 As String,  _
                    ByVal height2 As String,  _
                    ByVal height3 As String,  _
                    ByVal height4 As String,  _
                    ByVal height5 As String,  _
                    ByVal height6 As String,  _
                    ByVal rdorectangle As Boolean,  _
                    ByVal txtimagecounter As String,  _
                    ByVal Description As String,  _
                    ByVal UserCapacity As String,  _
                    ByVal UserCapacityChecked As Boolean,  _
                    ByVal CreatedWhen As Date,  _
                    ByVal RoomNumber As String,  _
                    ByVal BLName As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ItemRevision As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ItemId As String,  _
                    ByVal LinkedItemId As String,  _
                    ByVal LinkedItemRevision As Decimal,  _
                    ByVal Contact1 As Integer,  _
                    ByVal Contact2 As Integer)
            Me.CopyCoolStuffProjectsRecordAsync(CloudID, ID, Ambient, ExtWB, RmTemp, RMWB, roomVolume, roomArea, ExtTempW1, ExtTempW2, ExtTempW3, ExtTempW4, ExtTempW5, ExtTempW6, InsulW1, InsulW2, InsulW3, InsulW4, InsulW5, InsulW6, ThickW1, ThickW2, ThickW3, ThickW4, ThickW5, ThickW6, KFactorW1, KFactorW2, KFactorW3, KFactorW4, KFactorW5, KFactorW6, Walltot, FExtTemp, InsulF, ThickF, KFactorF, FloorTot, CExtTemp, InsulC, ThickC, KFactorC, CeilingTot, TransTot, IVolume, InfWB, InfDB, IFactor, IAirChg, TotInfil, WattL, TotOL, MotorHP, TotOM, People, TotOP, OtherType, OtherBTU, TotOO, OtherTot, SumTran, SumINf, SumProd, SumOther, SumTot, Safety, SafetyTot, RunVar, RunVarTot, LoadTot, btnAllWallsy, btnallwallsN, chkFreezept, chkfreezetoCore, mystate, mycity, rw1, rw2, rw3, rw4, rw5, rw6, rwfloor, rwceiling, kfactors, forklift, totforklift, dockdoors, totdockdoors, wall1, wall2, wall3, wall4, wall5, wall6, height1, height2, height3, height4, height5, height6, rdorectangle, txtimagecounter, Description, UserCapacity, UserCapacityChecked, CreatedWhen, RoomNumber, BLName, ProjectRevision, ItemRevision, ProjectId, ItemId, LinkedItemId, LinkedItemRevision, Contact1, Contact2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCoolStuffProjectsRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ID As Integer,  _
                    ByVal Ambient As String,  _
                    ByVal ExtWB As String,  _
                    ByVal RmTemp As String,  _
                    ByVal RMWB As String,  _
                    ByVal roomVolume As String,  _
                    ByVal roomArea As String,  _
                    ByVal ExtTempW1 As String,  _
                    ByVal ExtTempW2 As String,  _
                    ByVal ExtTempW3 As String,  _
                    ByVal ExtTempW4 As String,  _
                    ByVal ExtTempW5 As String,  _
                    ByVal ExtTempW6 As String,  _
                    ByVal InsulW1 As String,  _
                    ByVal InsulW2 As String,  _
                    ByVal InsulW3 As String,  _
                    ByVal InsulW4 As String,  _
                    ByVal InsulW5 As String,  _
                    ByVal InsulW6 As String,  _
                    ByVal ThickW1 As String,  _
                    ByVal ThickW2 As String,  _
                    ByVal ThickW3 As String,  _
                    ByVal ThickW4 As String,  _
                    ByVal ThickW5 As String,  _
                    ByVal ThickW6 As String,  _
                    ByVal KFactorW1 As String,  _
                    ByVal KFactorW2 As String,  _
                    ByVal KFactorW3 As String,  _
                    ByVal KFactorW4 As String,  _
                    ByVal KFactorW5 As String,  _
                    ByVal KFactorW6 As String,  _
                    ByVal Walltot As String,  _
                    ByVal FExtTemp As String,  _
                    ByVal InsulF As String,  _
                    ByVal ThickF As String,  _
                    ByVal KFactorF As String,  _
                    ByVal FloorTot As String,  _
                    ByVal CExtTemp As String,  _
                    ByVal InsulC As String,  _
                    ByVal ThickC As String,  _
                    ByVal KFactorC As String,  _
                    ByVal CeilingTot As String,  _
                    ByVal TransTot As String,  _
                    ByVal IVolume As String,  _
                    ByVal InfWB As String,  _
                    ByVal InfDB As String,  _
                    ByVal IFactor As String,  _
                    ByVal IAirChg As String,  _
                    ByVal TotInfil As String,  _
                    ByVal WattL As String,  _
                    ByVal TotOL As String,  _
                    ByVal MotorHP As String,  _
                    ByVal TotOM As String,  _
                    ByVal People As String,  _
                    ByVal TotOP As String,  _
                    ByVal OtherType As String,  _
                    ByVal OtherBTU As String,  _
                    ByVal TotOO As String,  _
                    ByVal OtherTot As String,  _
                    ByVal SumTran As String,  _
                    ByVal SumINf As String,  _
                    ByVal SumProd As String,  _
                    ByVal SumOther As String,  _
                    ByVal SumTot As String,  _
                    ByVal Safety As String,  _
                    ByVal SafetyTot As String,  _
                    ByVal RunVar As String,  _
                    ByVal RunVarTot As String,  _
                    ByVal LoadTot As String,  _
                    ByVal btnAllWallsy As Boolean,  _
                    ByVal btnallwallsN As Boolean,  _
                    ByVal chkFreezept As Boolean,  _
                    ByVal chkfreezetoCore As Boolean,  _
                    ByVal mystate As String,  _
                    ByVal mycity As String,  _
                    ByVal rw1 As Decimal,  _
                    ByVal rw2 As Decimal,  _
                    ByVal rw3 As Decimal,  _
                    ByVal rw4 As Decimal,  _
                    ByVal rw5 As Decimal,  _
                    ByVal rw6 As Decimal,  _
                    ByVal rwfloor As Decimal,  _
                    ByVal rwceiling As Decimal,  _
                    ByVal kfactors As Boolean,  _
                    ByVal forklift As String,  _
                    ByVal totforklift As String,  _
                    ByVal dockdoors As String,  _
                    ByVal totdockdoors As String,  _
                    ByVal wall1 As String,  _
                    ByVal wall2 As String,  _
                    ByVal wall3 As String,  _
                    ByVal wall4 As String,  _
                    ByVal wall5 As String,  _
                    ByVal wall6 As String,  _
                    ByVal height1 As String,  _
                    ByVal height2 As String,  _
                    ByVal height3 As String,  _
                    ByVal height4 As String,  _
                    ByVal height5 As String,  _
                    ByVal height6 As String,  _
                    ByVal rdorectangle As Boolean,  _
                    ByVal txtimagecounter As String,  _
                    ByVal Description As String,  _
                    ByVal UserCapacity As String,  _
                    ByVal UserCapacityChecked As Boolean,  _
                    ByVal CreatedWhen As Date,  _
                    ByVal RoomNumber As String,  _
                    ByVal BLName As String,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ItemRevision As Integer,  _
                    ByVal ProjectId As String,  _
                    ByVal ItemId As String,  _
                    ByVal LinkedItemId As String,  _
                    ByVal LinkedItemRevision As Decimal,  _
                    ByVal Contact1 As Integer,  _
                    ByVal Contact2 As Integer,  _
                    ByVal userState As Object)
            If (Me.CopyCoolStuffProjectsRecordOperationCompleted Is Nothing) Then
                Me.CopyCoolStuffProjectsRecordOperationCompleted = AddressOf Me.OnCopyCoolStuffProjectsRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyCoolStuffProjectsRecord", New Object() {CloudID, ID, Ambient, ExtWB, RmTemp, RMWB, roomVolume, roomArea, ExtTempW1, ExtTempW2, ExtTempW3, ExtTempW4, ExtTempW5, ExtTempW6, InsulW1, InsulW2, InsulW3, InsulW4, InsulW5, InsulW6, ThickW1, ThickW2, ThickW3, ThickW4, ThickW5, ThickW6, KFactorW1, KFactorW2, KFactorW3, KFactorW4, KFactorW5, KFactorW6, Walltot, FExtTemp, InsulF, ThickF, KFactorF, FloorTot, CExtTemp, InsulC, ThickC, KFactorC, CeilingTot, TransTot, IVolume, InfWB, InfDB, IFactor, IAirChg, TotInfil, WattL, TotOL, MotorHP, TotOM, People, TotOP, OtherType, OtherBTU, TotOO, OtherTot, SumTran, SumINf, SumProd, SumOther, SumTot, Safety, SafetyTot, RunVar, RunVarTot, LoadTot, btnAllWallsy, btnallwallsN, chkFreezept, chkfreezetoCore, mystate, mycity, rw1, rw2, rw3, rw4, rw5, rw6, rwfloor, rwceiling, kfactors, forklift, totforklift, dockdoors, totdockdoors, wall1, wall2, wall3, wall4, wall5, wall6, height1, height2, height3, height4, height5, height6, rdorectangle, txtimagecounter, Description, UserCapacity, UserCapacityChecked, CreatedWhen, RoomNumber, BLName, ProjectRevision, ItemRevision, ProjectId, ItemId, LinkedItemId, LinkedItemRevision, Contact1, Contact2}, Me.CopyCoolStuffProjectsRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyCoolStuffProjectsRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyCoolStuffProjectsRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyCoolStuffProjectsRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyCoolStuffProductSelectionsReportRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyCoolStuffProductSelectionsReportRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ID As Integer,  _
                    ByVal ProjectID As Integer,  _
                    ByVal MYID As Integer,  _
                    ByVal Product As String,  _
                    ByVal Type As String,  _
                    ByVal FreezePt As String,  _
                    ByVal CHeat As String,  _
                    ByVal CFHeat As String,  _
                    ByVal FLatent As String,  _
                    ByVal CIbs As String,  _
                    ByVal CLoad As String,  _
                    ByVal CPull As String,  _
                    ByVal CEnter As String,  _
                    ByVal CFinal As String,  _
                    ByVal CTot As String,  _
                    ByVal FTot As String,  _
                    ByVal CFPTot As String,  _
                    ByVal CFTot As String,  _
                    ByVal RIbs As String,  _
                    ByVal RHeat As String,  _
                    ByVal RTot As String,  _
                    ByVal ProdTot As String,  _
                    ByVal chkfreezept As Boolean,  _
                    ByVal chkfreezetocore As Boolean,  _
                    ByVal fromrep As Boolean)
            Me.Invoke("CopyCoolStuffProductSelectionsReportRecord", New Object() {CloudID, ID, ProjectID, MYID, Product, Type, FreezePt, CHeat, CFHeat, FLatent, CIbs, CLoad, CPull, CEnter, CFinal, CTot, FTot, CFPTot, CFTot, RIbs, RHeat, RTot, ProdTot, chkfreezept, chkfreezetocore, fromrep})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyCoolStuffProductSelectionsReportRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ID As Integer,  _
                    ByVal ProjectID As Integer,  _
                    ByVal MYID As Integer,  _
                    ByVal Product As String,  _
                    ByVal Type As String,  _
                    ByVal FreezePt As String,  _
                    ByVal CHeat As String,  _
                    ByVal CFHeat As String,  _
                    ByVal FLatent As String,  _
                    ByVal CIbs As String,  _
                    ByVal CLoad As String,  _
                    ByVal CPull As String,  _
                    ByVal CEnter As String,  _
                    ByVal CFinal As String,  _
                    ByVal CTot As String,  _
                    ByVal FTot As String,  _
                    ByVal CFPTot As String,  _
                    ByVal CFTot As String,  _
                    ByVal RIbs As String,  _
                    ByVal RHeat As String,  _
                    ByVal RTot As String,  _
                    ByVal ProdTot As String,  _
                    ByVal chkfreezept As Boolean,  _
                    ByVal chkfreezetocore As Boolean,  _
                    ByVal fromrep As Boolean,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyCoolStuffProductSelectionsReportRecord", New Object() {CloudID, ID, ProjectID, MYID, Product, Type, FreezePt, CHeat, CFHeat, FLatent, CIbs, CLoad, CPull, CEnter, CFinal, CTot, FTot, CFPTot, CFTot, RIbs, RHeat, RTot, ProdTot, chkfreezept, chkfreezetocore, fromrep}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyCoolStuffProductSelectionsReportRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCoolStuffProductSelectionsReportRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ID As Integer,  _
                    ByVal ProjectID As Integer,  _
                    ByVal MYID As Integer,  _
                    ByVal Product As String,  _
                    ByVal Type As String,  _
                    ByVal FreezePt As String,  _
                    ByVal CHeat As String,  _
                    ByVal CFHeat As String,  _
                    ByVal FLatent As String,  _
                    ByVal CIbs As String,  _
                    ByVal CLoad As String,  _
                    ByVal CPull As String,  _
                    ByVal CEnter As String,  _
                    ByVal CFinal As String,  _
                    ByVal CTot As String,  _
                    ByVal FTot As String,  _
                    ByVal CFPTot As String,  _
                    ByVal CFTot As String,  _
                    ByVal RIbs As String,  _
                    ByVal RHeat As String,  _
                    ByVal RTot As String,  _
                    ByVal ProdTot As String,  _
                    ByVal chkfreezept As Boolean,  _
                    ByVal chkfreezetocore As Boolean,  _
                    ByVal fromrep As Boolean)
            Me.CopyCoolStuffProductSelectionsReportRecordAsync(CloudID, ID, ProjectID, MYID, Product, Type, FreezePt, CHeat, CFHeat, FLatent, CIbs, CLoad, CPull, CEnter, CFinal, CTot, FTot, CFPTot, CFTot, RIbs, RHeat, RTot, ProdTot, chkfreezept, chkfreezetocore, fromrep, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCoolStuffProductSelectionsReportRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ID As Integer,  _
                    ByVal ProjectID As Integer,  _
                    ByVal MYID As Integer,  _
                    ByVal Product As String,  _
                    ByVal Type As String,  _
                    ByVal FreezePt As String,  _
                    ByVal CHeat As String,  _
                    ByVal CFHeat As String,  _
                    ByVal FLatent As String,  _
                    ByVal CIbs As String,  _
                    ByVal CLoad As String,  _
                    ByVal CPull As String,  _
                    ByVal CEnter As String,  _
                    ByVal CFinal As String,  _
                    ByVal CTot As String,  _
                    ByVal FTot As String,  _
                    ByVal CFPTot As String,  _
                    ByVal CFTot As String,  _
                    ByVal RIbs As String,  _
                    ByVal RHeat As String,  _
                    ByVal RTot As String,  _
                    ByVal ProdTot As String,  _
                    ByVal chkfreezept As Boolean,  _
                    ByVal chkfreezetocore As Boolean,  _
                    ByVal fromrep As Boolean,  _
                    ByVal userState As Object)
            If (Me.CopyCoolStuffProductSelectionsReportRecordOperationCompleted Is Nothing) Then
                Me.CopyCoolStuffProductSelectionsReportRecordOperationCompleted = AddressOf Me.OnCopyCoolStuffProductSelectionsReportRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyCoolStuffProductSelectionsReportRecord", New Object() {CloudID, ID, ProjectID, MYID, Product, Type, FreezePt, CHeat, CFHeat, FLatent, CIbs, CLoad, CPull, CEnter, CFinal, CTot, FTot, CFPTot, CFTot, RIbs, RHeat, RTot, ProdTot, chkfreezept, chkfreezetocore, fromrep}, Me.CopyCoolStuffProductSelectionsReportRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyCoolStuffProductSelectionsReportRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyCoolStuffProductSelectionsReportRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyCoolStuffProductSelectionsReportRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyCoolStuffProductSelectionsRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyCoolStuffProductSelectionsRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ID As Integer,  _
                    ByVal ProjectID As Integer,  _
                    ByVal Product As String,  _
                    ByVal Type As String,  _
                    ByVal FreezePt As String,  _
                    ByVal CHeat As String,  _
                    ByVal CFHeat As String,  _
                    ByVal FLatent As String,  _
                    ByVal CIbs As String,  _
                    ByVal CLoad As String,  _
                    ByVal CPull As String,  _
                    ByVal CEnter As String,  _
                    ByVal CFinal As String,  _
                    ByVal CTot As String,  _
                    ByVal FTot As String,  _
                    ByVal CFPTot As String,  _
                    ByVal CFTot As String,  _
                    ByVal RIbs As String,  _
                    ByVal RHeat As String,  _
                    ByVal RTot As String,  _
                    ByVal ProdTot As String,  _
                    ByVal chkfreezept As Boolean,  _
                    ByVal chkfreezetocore As Boolean,  _
                    ByVal fromRep As Boolean)
            Me.Invoke("CopyCoolStuffProductSelectionsRecord", New Object() {CloudID, ID, ProjectID, Product, Type, FreezePt, CHeat, CFHeat, FLatent, CIbs, CLoad, CPull, CEnter, CFinal, CTot, FTot, CFPTot, CFTot, RIbs, RHeat, RTot, ProdTot, chkfreezept, chkfreezetocore, fromRep})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyCoolStuffProductSelectionsRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ID As Integer,  _
                    ByVal ProjectID As Integer,  _
                    ByVal Product As String,  _
                    ByVal Type As String,  _
                    ByVal FreezePt As String,  _
                    ByVal CHeat As String,  _
                    ByVal CFHeat As String,  _
                    ByVal FLatent As String,  _
                    ByVal CIbs As String,  _
                    ByVal CLoad As String,  _
                    ByVal CPull As String,  _
                    ByVal CEnter As String,  _
                    ByVal CFinal As String,  _
                    ByVal CTot As String,  _
                    ByVal FTot As String,  _
                    ByVal CFPTot As String,  _
                    ByVal CFTot As String,  _
                    ByVal RIbs As String,  _
                    ByVal RHeat As String,  _
                    ByVal RTot As String,  _
                    ByVal ProdTot As String,  _
                    ByVal chkfreezept As Boolean,  _
                    ByVal chkfreezetocore As Boolean,  _
                    ByVal fromRep As Boolean,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyCoolStuffProductSelectionsRecord", New Object() {CloudID, ID, ProjectID, Product, Type, FreezePt, CHeat, CFHeat, FLatent, CIbs, CLoad, CPull, CEnter, CFinal, CTot, FTot, CFPTot, CFTot, RIbs, RHeat, RTot, ProdTot, chkfreezept, chkfreezetocore, fromRep}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyCoolStuffProductSelectionsRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCoolStuffProductSelectionsRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ID As Integer,  _
                    ByVal ProjectID As Integer,  _
                    ByVal Product As String,  _
                    ByVal Type As String,  _
                    ByVal FreezePt As String,  _
                    ByVal CHeat As String,  _
                    ByVal CFHeat As String,  _
                    ByVal FLatent As String,  _
                    ByVal CIbs As String,  _
                    ByVal CLoad As String,  _
                    ByVal CPull As String,  _
                    ByVal CEnter As String,  _
                    ByVal CFinal As String,  _
                    ByVal CTot As String,  _
                    ByVal FTot As String,  _
                    ByVal CFPTot As String,  _
                    ByVal CFTot As String,  _
                    ByVal RIbs As String,  _
                    ByVal RHeat As String,  _
                    ByVal RTot As String,  _
                    ByVal ProdTot As String,  _
                    ByVal chkfreezept As Boolean,  _
                    ByVal chkfreezetocore As Boolean,  _
                    ByVal fromRep As Boolean)
            Me.CopyCoolStuffProductSelectionsRecordAsync(CloudID, ID, ProjectID, Product, Type, FreezePt, CHeat, CFHeat, FLatent, CIbs, CLoad, CPull, CEnter, CFinal, CTot, FTot, CFPTot, CFTot, RIbs, RHeat, RTot, ProdTot, chkfreezept, chkfreezetocore, fromRep, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCoolStuffProductSelectionsRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ID As Integer,  _
                    ByVal ProjectID As Integer,  _
                    ByVal Product As String,  _
                    ByVal Type As String,  _
                    ByVal FreezePt As String,  _
                    ByVal CHeat As String,  _
                    ByVal CFHeat As String,  _
                    ByVal FLatent As String,  _
                    ByVal CIbs As String,  _
                    ByVal CLoad As String,  _
                    ByVal CPull As String,  _
                    ByVal CEnter As String,  _
                    ByVal CFinal As String,  _
                    ByVal CTot As String,  _
                    ByVal FTot As String,  _
                    ByVal CFPTot As String,  _
                    ByVal CFTot As String,  _
                    ByVal RIbs As String,  _
                    ByVal RHeat As String,  _
                    ByVal RTot As String,  _
                    ByVal ProdTot As String,  _
                    ByVal chkfreezept As Boolean,  _
                    ByVal chkfreezetocore As Boolean,  _
                    ByVal fromRep As Boolean,  _
                    ByVal userState As Object)
            If (Me.CopyCoolStuffProductSelectionsRecordOperationCompleted Is Nothing) Then
                Me.CopyCoolStuffProductSelectionsRecordOperationCompleted = AddressOf Me.OnCopyCoolStuffProductSelectionsRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyCoolStuffProductSelectionsRecord", New Object() {CloudID, ID, ProjectID, Product, Type, FreezePt, CHeat, CFHeat, FLatent, CIbs, CLoad, CPull, CEnter, CFinal, CTot, FTot, CFPTot, CFTot, RIbs, RHeat, RTot, ProdTot, chkfreezept, chkfreezetocore, fromRep}, Me.CopyCoolStuffProductSelectionsRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyCoolStuffProductSelectionsRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyCoolStuffProductSelectionsRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyCoolStuffProductSelectionsRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyWCChillerProcessesRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyWCChillerProcessesRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal Series As String,  _
                    ByVal NewCoefficients As Boolean,  _
                    ByVal Model As String,  _
                    ByVal ModelDesc As String,  _
                    ByVal Fluid As String,  _
                    ByVal GlycolPercentage As Single,  _
                    ByVal CoolingMedia As String,  _
                    ByVal SpecificHeat As Single,  _
                    ByVal SpecificGravity As Single,  _
                    ByVal SubCooling As Boolean,  _
                    ByVal Refrigerant As String,  _
                    ByVal TempRange As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal System As String,  _
                    ByVal Hertz As Single,  _
                    ByVal Volts As Single,  _
                    ByVal Approach As String,  _
                    ByVal SafetyOverride As Boolean,  _
                    ByVal Circuit1 As Boolean,  _
                    ByVal Circuit2 As Boolean,  _
                    ByVal NumCompressors1 As Single,  _
                    ByVal NumCompressors2 As Single,  _
                    ByVal Compressors1 As String,  _
                    ByVal Compressors2 As String,  _
                    ByVal NumCoils1 As Single,  _
                    ByVal NumCoils2 As Single,  _
                    ByVal Condenser1 As String,  _
                    ByVal Condenser2 As String,  _
                    ByVal CondenserTD1 As Single,  _
                    ByVal CondenserTD2 As Single,  _
                    ByVal DischargeLineLoss As Single,  _
                    ByVal SuctionLineLoss As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal CfmOverride As Single,  _
                    ByVal CondenserCapacity1 As Single,  _
                    ByVal CondenserCapacity2 As Single,  _
                    ByVal EvaporatorModel As String,  _
                    ByVal EvaporatorModelDesc As String,  _
                    ByVal NumEvap As Single,  _
                    ByVal FoulingFactor As Single,  _
                    ByVal CapacityType As String,  _
                    ByVal EvaporatorCapacity As Single,  _
                    ByVal CatalogRating As Boolean,  _
                    ByVal ApproachRange As String,  _
                    ByVal Evap8Degr1 As Single,  _
                    ByVal Evap8Degr2 As Single,  _
                    ByVal Evap10Degr1 As Single,  _
                    ByVal Evap10Degr2 As Single,  _
                    ByVal Division As String)
            Me.Invoke("CopyWCChillerProcessesRecord", New Object() {CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Name, Series, NewCoefficients, Model, ModelDesc, Fluid, GlycolPercentage, CoolingMedia, SpecificHeat, SpecificGravity, SubCooling, Refrigerant, TempRange, AmbientTemp, LeavingFluidTemp, System, Hertz, Volts, Approach, SafetyOverride, Circuit1, Circuit2, NumCompressors1, NumCompressors2, Compressors1, Compressors2, NumCoils1, NumCoils2, Condenser1, Condenser2, CondenserTD1, CondenserTD2, DischargeLineLoss, SuctionLineLoss, Altitude, CfmOverride, CondenserCapacity1, CondenserCapacity2, EvaporatorModel, EvaporatorModelDesc, NumEvap, FoulingFactor, CapacityType, EvaporatorCapacity, CatalogRating, ApproachRange, Evap8Degr1, Evap8Degr2, Evap10Degr1, Evap10Degr2, Division})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyWCChillerProcessesRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal Series As String,  _
                    ByVal NewCoefficients As Boolean,  _
                    ByVal Model As String,  _
                    ByVal ModelDesc As String,  _
                    ByVal Fluid As String,  _
                    ByVal GlycolPercentage As Single,  _
                    ByVal CoolingMedia As String,  _
                    ByVal SpecificHeat As Single,  _
                    ByVal SpecificGravity As Single,  _
                    ByVal SubCooling As Boolean,  _
                    ByVal Refrigerant As String,  _
                    ByVal TempRange As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal System As String,  _
                    ByVal Hertz As Single,  _
                    ByVal Volts As Single,  _
                    ByVal Approach As String,  _
                    ByVal SafetyOverride As Boolean,  _
                    ByVal Circuit1 As Boolean,  _
                    ByVal Circuit2 As Boolean,  _
                    ByVal NumCompressors1 As Single,  _
                    ByVal NumCompressors2 As Single,  _
                    ByVal Compressors1 As String,  _
                    ByVal Compressors2 As String,  _
                    ByVal NumCoils1 As Single,  _
                    ByVal NumCoils2 As Single,  _
                    ByVal Condenser1 As String,  _
                    ByVal Condenser2 As String,  _
                    ByVal CondenserTD1 As Single,  _
                    ByVal CondenserTD2 As Single,  _
                    ByVal DischargeLineLoss As Single,  _
                    ByVal SuctionLineLoss As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal CfmOverride As Single,  _
                    ByVal CondenserCapacity1 As Single,  _
                    ByVal CondenserCapacity2 As Single,  _
                    ByVal EvaporatorModel As String,  _
                    ByVal EvaporatorModelDesc As String,  _
                    ByVal NumEvap As Single,  _
                    ByVal FoulingFactor As Single,  _
                    ByVal CapacityType As String,  _
                    ByVal EvaporatorCapacity As Single,  _
                    ByVal CatalogRating As Boolean,  _
                    ByVal ApproachRange As String,  _
                    ByVal Evap8Degr1 As Single,  _
                    ByVal Evap8Degr2 As Single,  _
                    ByVal Evap10Degr1 As Single,  _
                    ByVal Evap10Degr2 As Single,  _
                    ByVal Division As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyWCChillerProcessesRecord", New Object() {CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Name, Series, NewCoefficients, Model, ModelDesc, Fluid, GlycolPercentage, CoolingMedia, SpecificHeat, SpecificGravity, SubCooling, Refrigerant, TempRange, AmbientTemp, LeavingFluidTemp, System, Hertz, Volts, Approach, SafetyOverride, Circuit1, Circuit2, NumCompressors1, NumCompressors2, Compressors1, Compressors2, NumCoils1, NumCoils2, Condenser1, Condenser2, CondenserTD1, CondenserTD2, DischargeLineLoss, SuctionLineLoss, Altitude, CfmOverride, CondenserCapacity1, CondenserCapacity2, EvaporatorModel, EvaporatorModelDesc, NumEvap, FoulingFactor, CapacityType, EvaporatorCapacity, CatalogRating, ApproachRange, Evap8Degr1, Evap8Degr2, Evap10Degr1, Evap10Degr2, Division}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyWCChillerProcessesRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyWCChillerProcessesRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal Series As String,  _
                    ByVal NewCoefficients As Boolean,  _
                    ByVal Model As String,  _
                    ByVal ModelDesc As String,  _
                    ByVal Fluid As String,  _
                    ByVal GlycolPercentage As Single,  _
                    ByVal CoolingMedia As String,  _
                    ByVal SpecificHeat As Single,  _
                    ByVal SpecificGravity As Single,  _
                    ByVal SubCooling As Boolean,  _
                    ByVal Refrigerant As String,  _
                    ByVal TempRange As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal System As String,  _
                    ByVal Hertz As Single,  _
                    ByVal Volts As Single,  _
                    ByVal Approach As String,  _
                    ByVal SafetyOverride As Boolean,  _
                    ByVal Circuit1 As Boolean,  _
                    ByVal Circuit2 As Boolean,  _
                    ByVal NumCompressors1 As Single,  _
                    ByVal NumCompressors2 As Single,  _
                    ByVal Compressors1 As String,  _
                    ByVal Compressors2 As String,  _
                    ByVal NumCoils1 As Single,  _
                    ByVal NumCoils2 As Single,  _
                    ByVal Condenser1 As String,  _
                    ByVal Condenser2 As String,  _
                    ByVal CondenserTD1 As Single,  _
                    ByVal CondenserTD2 As Single,  _
                    ByVal DischargeLineLoss As Single,  _
                    ByVal SuctionLineLoss As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal CfmOverride As Single,  _
                    ByVal CondenserCapacity1 As Single,  _
                    ByVal CondenserCapacity2 As Single,  _
                    ByVal EvaporatorModel As String,  _
                    ByVal EvaporatorModelDesc As String,  _
                    ByVal NumEvap As Single,  _
                    ByVal FoulingFactor As Single,  _
                    ByVal CapacityType As String,  _
                    ByVal EvaporatorCapacity As Single,  _
                    ByVal CatalogRating As Boolean,  _
                    ByVal ApproachRange As String,  _
                    ByVal Evap8Degr1 As Single,  _
                    ByVal Evap8Degr2 As Single,  _
                    ByVal Evap10Degr1 As Single,  _
                    ByVal Evap10Degr2 As Single,  _
                    ByVal Division As String)
            Me.CopyWCChillerProcessesRecordAsync(CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Name, Series, NewCoefficients, Model, ModelDesc, Fluid, GlycolPercentage, CoolingMedia, SpecificHeat, SpecificGravity, SubCooling, Refrigerant, TempRange, AmbientTemp, LeavingFluidTemp, System, Hertz, Volts, Approach, SafetyOverride, Circuit1, Circuit2, NumCompressors1, NumCompressors2, Compressors1, Compressors2, NumCoils1, NumCoils2, Condenser1, Condenser2, CondenserTD1, CondenserTD2, DischargeLineLoss, SuctionLineLoss, Altitude, CfmOverride, CondenserCapacity1, CondenserCapacity2, EvaporatorModel, EvaporatorModelDesc, NumEvap, FoulingFactor, CapacityType, EvaporatorCapacity, CatalogRating, ApproachRange, Evap8Degr1, Evap8Degr2, Evap10Degr1, Evap10Degr2, Division, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyWCChillerProcessesRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal Series As String,  _
                    ByVal NewCoefficients As Boolean,  _
                    ByVal Model As String,  _
                    ByVal ModelDesc As String,  _
                    ByVal Fluid As String,  _
                    ByVal GlycolPercentage As Single,  _
                    ByVal CoolingMedia As String,  _
                    ByVal SpecificHeat As Single,  _
                    ByVal SpecificGravity As Single,  _
                    ByVal SubCooling As Boolean,  _
                    ByVal Refrigerant As String,  _
                    ByVal TempRange As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal System As String,  _
                    ByVal Hertz As Single,  _
                    ByVal Volts As Single,  _
                    ByVal Approach As String,  _
                    ByVal SafetyOverride As Boolean,  _
                    ByVal Circuit1 As Boolean,  _
                    ByVal Circuit2 As Boolean,  _
                    ByVal NumCompressors1 As Single,  _
                    ByVal NumCompressors2 As Single,  _
                    ByVal Compressors1 As String,  _
                    ByVal Compressors2 As String,  _
                    ByVal NumCoils1 As Single,  _
                    ByVal NumCoils2 As Single,  _
                    ByVal Condenser1 As String,  _
                    ByVal Condenser2 As String,  _
                    ByVal CondenserTD1 As Single,  _
                    ByVal CondenserTD2 As Single,  _
                    ByVal DischargeLineLoss As Single,  _
                    ByVal SuctionLineLoss As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal CfmOverride As Single,  _
                    ByVal CondenserCapacity1 As Single,  _
                    ByVal CondenserCapacity2 As Single,  _
                    ByVal EvaporatorModel As String,  _
                    ByVal EvaporatorModelDesc As String,  _
                    ByVal NumEvap As Single,  _
                    ByVal FoulingFactor As Single,  _
                    ByVal CapacityType As String,  _
                    ByVal EvaporatorCapacity As Single,  _
                    ByVal CatalogRating As Boolean,  _
                    ByVal ApproachRange As String,  _
                    ByVal Evap8Degr1 As Single,  _
                    ByVal Evap8Degr2 As Single,  _
                    ByVal Evap10Degr1 As Single,  _
                    ByVal Evap10Degr2 As Single,  _
                    ByVal Division As String,  _
                    ByVal userState As Object)
            If (Me.CopyWCChillerProcessesRecordOperationCompleted Is Nothing) Then
                Me.CopyWCChillerProcessesRecordOperationCompleted = AddressOf Me.OnCopyWCChillerProcessesRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyWCChillerProcessesRecord", New Object() {CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Name, Series, NewCoefficients, Model, ModelDesc, Fluid, GlycolPercentage, CoolingMedia, SpecificHeat, SpecificGravity, SubCooling, Refrigerant, TempRange, AmbientTemp, LeavingFluidTemp, System, Hertz, Volts, Approach, SafetyOverride, Circuit1, Circuit2, NumCompressors1, NumCompressors2, Compressors1, Compressors2, NumCoils1, NumCoils2, Condenser1, Condenser2, CondenserTD1, CondenserTD2, DischargeLineLoss, SuctionLineLoss, Altitude, CfmOverride, CondenserCapacity1, CondenserCapacity2, EvaporatorModel, EvaporatorModelDesc, NumEvap, FoulingFactor, CapacityType, EvaporatorCapacity, CatalogRating, ApproachRange, Evap8Degr1, Evap8Degr2, Evap10Degr1, Evap10Degr2, Division}, Me.CopyWCChillerProcessesRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyWCChillerProcessesRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyWCChillerProcessesRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyWCChillerProcessesRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyUnitCoolerProcessesRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyUnitCoolerProcessesRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal RevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal CondensingUnitSeries As String,  _
                    ByVal ShouldAdjustCapacityForRunTime As Boolean,  _
                    ByVal NumRunTimeHours As Single,  _
                    ByVal CompressorType As String,  _
                    ByVal Refrigerant As String,  _
                    ByVal NumCompressorsPerUnit As Integer,  _
                    ByVal NumCircuitsPerUnit As Integer,  _
                    ByVal CapacityRequired As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal NumCondensingUnitsRequired As Integer,  _
                    ByVal SuctionTemperature As Integer,  _
                    ByVal NumRooms As Integer,  _
                    ByVal AmbientTemperature As Single,  _
                    ByVal AmbientMinTemperature As Single,  _
                    ByVal AmbientMaxTemperature As Single,  _
                    ByVal AmbientTemperatureIncrement As Single,  _
                    ByVal RoomTemperature As Single,  _
                    ByVal RoomMinTemperature As Single,  _
                    ByVal RoomMaxTemperature As Single,  _
                    ByVal RoomTemperatureIncrement As Single,  _
                    ByVal CondenserCapacityPerDegree As Single,  _
                    ByVal CondensingUnitModel As String,  _
                    ByVal Series As String,  _
                    ByVal SuctionLineLoss As Integer,  _
                    ByVal ShouldOverrideUnitCoolerCapacityCriteria As Boolean,  _
                    ByVal SelectedUnitCoolerIndex As Integer,  _
                    ByVal UnitCooler1Model As String,  _
                    ByVal UnitCooler2Model As String,  _
                    ByVal UnitCooler3Model As String,  _
                    ByVal UnitCooler1Capacity As Single,  _
                    ByVal UnitCooler2Capacity As Single,  _
                    ByVal UnitCooler3Capacity As Single,  _
                    ByVal UnitCooler1Quantity As Integer,  _
                    ByVal UnitCooler2Quantity As Integer,  _
                    ByVal UnitCooler3Quantity As Integer,  _
                    ByVal Evaporator1CapacityPerDegree As Single,  _
                    ByVal Evaporator2CapacityPerDegree As Single,  _
                    ByVal Evaporator3CapacityPerDegree As Single,  _
                    ByVal IsThereAUnitCooler1 As Boolean,  _
                    ByVal IsThereAUnitCooler2 As Boolean,  _
                    ByVal IsThereAUnitCooler3 As Boolean,  _
                    ByVal IsThereACustomUnitCooler As Boolean,  _
                    ByVal CustomUnitCoolerModel As String,  _
                    ByVal CustomUnitCoolerCapacity As Single,  _
                    ByVal CustomUnitCoolerQuantity As Integer,  _
                    ByVal CustomUnitCoolerCapacityPerDegree As Single,  _
                    ByVal Balance As Single,  _
                    ByVal EvaporatorTemperature As Single,  _
                    ByVal AirTemperature As Single,  _
                    ByVal CondenserTemperature As Single,  _
                    ByVal Capacity As Single,  _
                    ByVal RunTime As Single,  _
                    ByVal UnitKw As Single,  _
                    ByVal CondenserCapacity As Single,  _
                    ByVal UnitAmps230 As Single,  _
                    ByVal UnitAmps460 As Single,  _
                    ByVal UnitEer As Single,  _
                    ByVal TemperatureDifference As Single,  _
                    ByVal UnitMca230 As Single,  _
                    ByVal UnitMca460 As Single,  _
                    ByVal Dimensions As String,  _
                    ByVal BaseListPrice As Integer,  _
                    ByVal CustomCondensingUnit As String,  _
                    ByVal Division As String,  _
                    ByVal ObjectLinkXML As String,  _
                    ByVal ObjectLinkType As String,  _
                    ByVal static_pressure_1 As Single,  _
                    ByVal static_pressure_2 As Single,  _
                    ByVal static_pressure_3 As Single,  _
                    ByVal DOEModel As String)
            Me.Invoke("CopyUnitCoolerProcessesRecord", New Object() {CloudID, ProcessId, Revision, RevisionDate, ProjectRevision, RevisionDescription, CreatedBy, Version, Notes, Name, CondensingUnitSeries, ShouldAdjustCapacityForRunTime, NumRunTimeHours, CompressorType, Refrigerant, NumCompressorsPerUnit, NumCircuitsPerUnit, CapacityRequired, Altitude, NumCondensingUnitsRequired, SuctionTemperature, NumRooms, AmbientTemperature, AmbientMinTemperature, AmbientMaxTemperature, AmbientTemperatureIncrement, RoomTemperature, RoomMinTemperature, RoomMaxTemperature, RoomTemperatureIncrement, CondenserCapacityPerDegree, CondensingUnitModel, Series, SuctionLineLoss, ShouldOverrideUnitCoolerCapacityCriteria, SelectedUnitCoolerIndex, UnitCooler1Model, UnitCooler2Model, UnitCooler3Model, UnitCooler1Capacity, UnitCooler2Capacity, UnitCooler3Capacity, UnitCooler1Quantity, UnitCooler2Quantity, UnitCooler3Quantity, Evaporator1CapacityPerDegree, Evaporator2CapacityPerDegree, Evaporator3CapacityPerDegree, IsThereAUnitCooler1, IsThereAUnitCooler2, IsThereAUnitCooler3, IsThereACustomUnitCooler, CustomUnitCoolerModel, CustomUnitCoolerCapacity, CustomUnitCoolerQuantity, CustomUnitCoolerCapacityPerDegree, Balance, EvaporatorTemperature, AirTemperature, CondenserTemperature, Capacity, RunTime, UnitKw, CondenserCapacity, UnitAmps230, UnitAmps460, UnitEer, TemperatureDifference, UnitMca230, UnitMca460, Dimensions, BaseListPrice, CustomCondensingUnit, Division, ObjectLinkXML, ObjectLinkType, static_pressure_1, static_pressure_2, static_pressure_3, DOEModel})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyUnitCoolerProcessesRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal RevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal CondensingUnitSeries As String,  _
                    ByVal ShouldAdjustCapacityForRunTime As Boolean,  _
                    ByVal NumRunTimeHours As Single,  _
                    ByVal CompressorType As String,  _
                    ByVal Refrigerant As String,  _
                    ByVal NumCompressorsPerUnit As Integer,  _
                    ByVal NumCircuitsPerUnit As Integer,  _
                    ByVal CapacityRequired As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal NumCondensingUnitsRequired As Integer,  _
                    ByVal SuctionTemperature As Integer,  _
                    ByVal NumRooms As Integer,  _
                    ByVal AmbientTemperature As Single,  _
                    ByVal AmbientMinTemperature As Single,  _
                    ByVal AmbientMaxTemperature As Single,  _
                    ByVal AmbientTemperatureIncrement As Single,  _
                    ByVal RoomTemperature As Single,  _
                    ByVal RoomMinTemperature As Single,  _
                    ByVal RoomMaxTemperature As Single,  _
                    ByVal RoomTemperatureIncrement As Single,  _
                    ByVal CondenserCapacityPerDegree As Single,  _
                    ByVal CondensingUnitModel As String,  _
                    ByVal Series As String,  _
                    ByVal SuctionLineLoss As Integer,  _
                    ByVal ShouldOverrideUnitCoolerCapacityCriteria As Boolean,  _
                    ByVal SelectedUnitCoolerIndex As Integer,  _
                    ByVal UnitCooler1Model As String,  _
                    ByVal UnitCooler2Model As String,  _
                    ByVal UnitCooler3Model As String,  _
                    ByVal UnitCooler1Capacity As Single,  _
                    ByVal UnitCooler2Capacity As Single,  _
                    ByVal UnitCooler3Capacity As Single,  _
                    ByVal UnitCooler1Quantity As Integer,  _
                    ByVal UnitCooler2Quantity As Integer,  _
                    ByVal UnitCooler3Quantity As Integer,  _
                    ByVal Evaporator1CapacityPerDegree As Single,  _
                    ByVal Evaporator2CapacityPerDegree As Single,  _
                    ByVal Evaporator3CapacityPerDegree As Single,  _
                    ByVal IsThereAUnitCooler1 As Boolean,  _
                    ByVal IsThereAUnitCooler2 As Boolean,  _
                    ByVal IsThereAUnitCooler3 As Boolean,  _
                    ByVal IsThereACustomUnitCooler As Boolean,  _
                    ByVal CustomUnitCoolerModel As String,  _
                    ByVal CustomUnitCoolerCapacity As Single,  _
                    ByVal CustomUnitCoolerQuantity As Integer,  _
                    ByVal CustomUnitCoolerCapacityPerDegree As Single,  _
                    ByVal Balance As Single,  _
                    ByVal EvaporatorTemperature As Single,  _
                    ByVal AirTemperature As Single,  _
                    ByVal CondenserTemperature As Single,  _
                    ByVal Capacity As Single,  _
                    ByVal RunTime As Single,  _
                    ByVal UnitKw As Single,  _
                    ByVal CondenserCapacity As Single,  _
                    ByVal UnitAmps230 As Single,  _
                    ByVal UnitAmps460 As Single,  _
                    ByVal UnitEer As Single,  _
                    ByVal TemperatureDifference As Single,  _
                    ByVal UnitMca230 As Single,  _
                    ByVal UnitMca460 As Single,  _
                    ByVal Dimensions As String,  _
                    ByVal BaseListPrice As Integer,  _
                    ByVal CustomCondensingUnit As String,  _
                    ByVal Division As String,  _
                    ByVal ObjectLinkXML As String,  _
                    ByVal ObjectLinkType As String,  _
                    ByVal static_pressure_1 As Single,  _
                    ByVal static_pressure_2 As Single,  _
                    ByVal static_pressure_3 As Single,  _
                    ByVal DOEModel As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyUnitCoolerProcessesRecord", New Object() {CloudID, ProcessId, Revision, RevisionDate, ProjectRevision, RevisionDescription, CreatedBy, Version, Notes, Name, CondensingUnitSeries, ShouldAdjustCapacityForRunTime, NumRunTimeHours, CompressorType, Refrigerant, NumCompressorsPerUnit, NumCircuitsPerUnit, CapacityRequired, Altitude, NumCondensingUnitsRequired, SuctionTemperature, NumRooms, AmbientTemperature, AmbientMinTemperature, AmbientMaxTemperature, AmbientTemperatureIncrement, RoomTemperature, RoomMinTemperature, RoomMaxTemperature, RoomTemperatureIncrement, CondenserCapacityPerDegree, CondensingUnitModel, Series, SuctionLineLoss, ShouldOverrideUnitCoolerCapacityCriteria, SelectedUnitCoolerIndex, UnitCooler1Model, UnitCooler2Model, UnitCooler3Model, UnitCooler1Capacity, UnitCooler2Capacity, UnitCooler3Capacity, UnitCooler1Quantity, UnitCooler2Quantity, UnitCooler3Quantity, Evaporator1CapacityPerDegree, Evaporator2CapacityPerDegree, Evaporator3CapacityPerDegree, IsThereAUnitCooler1, IsThereAUnitCooler2, IsThereAUnitCooler3, IsThereACustomUnitCooler, CustomUnitCoolerModel, CustomUnitCoolerCapacity, CustomUnitCoolerQuantity, CustomUnitCoolerCapacityPerDegree, Balance, EvaporatorTemperature, AirTemperature, CondenserTemperature, Capacity, RunTime, UnitKw, CondenserCapacity, UnitAmps230, UnitAmps460, UnitEer, TemperatureDifference, UnitMca230, UnitMca460, Dimensions, BaseListPrice, CustomCondensingUnit, Division, ObjectLinkXML, ObjectLinkType, static_pressure_1, static_pressure_2, static_pressure_3, DOEModel}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyUnitCoolerProcessesRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyUnitCoolerProcessesRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal RevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal CondensingUnitSeries As String,  _
                    ByVal ShouldAdjustCapacityForRunTime As Boolean,  _
                    ByVal NumRunTimeHours As Single,  _
                    ByVal CompressorType As String,  _
                    ByVal Refrigerant As String,  _
                    ByVal NumCompressorsPerUnit As Integer,  _
                    ByVal NumCircuitsPerUnit As Integer,  _
                    ByVal CapacityRequired As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal NumCondensingUnitsRequired As Integer,  _
                    ByVal SuctionTemperature As Integer,  _
                    ByVal NumRooms As Integer,  _
                    ByVal AmbientTemperature As Single,  _
                    ByVal AmbientMinTemperature As Single,  _
                    ByVal AmbientMaxTemperature As Single,  _
                    ByVal AmbientTemperatureIncrement As Single,  _
                    ByVal RoomTemperature As Single,  _
                    ByVal RoomMinTemperature As Single,  _
                    ByVal RoomMaxTemperature As Single,  _
                    ByVal RoomTemperatureIncrement As Single,  _
                    ByVal CondenserCapacityPerDegree As Single,  _
                    ByVal CondensingUnitModel As String,  _
                    ByVal Series As String,  _
                    ByVal SuctionLineLoss As Integer,  _
                    ByVal ShouldOverrideUnitCoolerCapacityCriteria As Boolean,  _
                    ByVal SelectedUnitCoolerIndex As Integer,  _
                    ByVal UnitCooler1Model As String,  _
                    ByVal UnitCooler2Model As String,  _
                    ByVal UnitCooler3Model As String,  _
                    ByVal UnitCooler1Capacity As Single,  _
                    ByVal UnitCooler2Capacity As Single,  _
                    ByVal UnitCooler3Capacity As Single,  _
                    ByVal UnitCooler1Quantity As Integer,  _
                    ByVal UnitCooler2Quantity As Integer,  _
                    ByVal UnitCooler3Quantity As Integer,  _
                    ByVal Evaporator1CapacityPerDegree As Single,  _
                    ByVal Evaporator2CapacityPerDegree As Single,  _
                    ByVal Evaporator3CapacityPerDegree As Single,  _
                    ByVal IsThereAUnitCooler1 As Boolean,  _
                    ByVal IsThereAUnitCooler2 As Boolean,  _
                    ByVal IsThereAUnitCooler3 As Boolean,  _
                    ByVal IsThereACustomUnitCooler As Boolean,  _
                    ByVal CustomUnitCoolerModel As String,  _
                    ByVal CustomUnitCoolerCapacity As Single,  _
                    ByVal CustomUnitCoolerQuantity As Integer,  _
                    ByVal CustomUnitCoolerCapacityPerDegree As Single,  _
                    ByVal Balance As Single,  _
                    ByVal EvaporatorTemperature As Single,  _
                    ByVal AirTemperature As Single,  _
                    ByVal CondenserTemperature As Single,  _
                    ByVal Capacity As Single,  _
                    ByVal RunTime As Single,  _
                    ByVal UnitKw As Single,  _
                    ByVal CondenserCapacity As Single,  _
                    ByVal UnitAmps230 As Single,  _
                    ByVal UnitAmps460 As Single,  _
                    ByVal UnitEer As Single,  _
                    ByVal TemperatureDifference As Single,  _
                    ByVal UnitMca230 As Single,  _
                    ByVal UnitMca460 As Single,  _
                    ByVal Dimensions As String,  _
                    ByVal BaseListPrice As Integer,  _
                    ByVal CustomCondensingUnit As String,  _
                    ByVal Division As String,  _
                    ByVal ObjectLinkXML As String,  _
                    ByVal ObjectLinkType As String,  _
                    ByVal static_pressure_1 As Single,  _
                    ByVal static_pressure_2 As Single,  _
                    ByVal static_pressure_3 As Single,  _
                    ByVal DOEModel As String)
            Me.CopyUnitCoolerProcessesRecordAsync(CloudID, ProcessId, Revision, RevisionDate, ProjectRevision, RevisionDescription, CreatedBy, Version, Notes, Name, CondensingUnitSeries, ShouldAdjustCapacityForRunTime, NumRunTimeHours, CompressorType, Refrigerant, NumCompressorsPerUnit, NumCircuitsPerUnit, CapacityRequired, Altitude, NumCondensingUnitsRequired, SuctionTemperature, NumRooms, AmbientTemperature, AmbientMinTemperature, AmbientMaxTemperature, AmbientTemperatureIncrement, RoomTemperature, RoomMinTemperature, RoomMaxTemperature, RoomTemperatureIncrement, CondenserCapacityPerDegree, CondensingUnitModel, Series, SuctionLineLoss, ShouldOverrideUnitCoolerCapacityCriteria, SelectedUnitCoolerIndex, UnitCooler1Model, UnitCooler2Model, UnitCooler3Model, UnitCooler1Capacity, UnitCooler2Capacity, UnitCooler3Capacity, UnitCooler1Quantity, UnitCooler2Quantity, UnitCooler3Quantity, Evaporator1CapacityPerDegree, Evaporator2CapacityPerDegree, Evaporator3CapacityPerDegree, IsThereAUnitCooler1, IsThereAUnitCooler2, IsThereAUnitCooler3, IsThereACustomUnitCooler, CustomUnitCoolerModel, CustomUnitCoolerCapacity, CustomUnitCoolerQuantity, CustomUnitCoolerCapacityPerDegree, Balance, EvaporatorTemperature, AirTemperature, CondenserTemperature, Capacity, RunTime, UnitKw, CondenserCapacity, UnitAmps230, UnitAmps460, UnitEer, TemperatureDifference, UnitMca230, UnitMca460, Dimensions, BaseListPrice, CustomCondensingUnit, Division, ObjectLinkXML, ObjectLinkType, static_pressure_1, static_pressure_2, static_pressure_3, DOEModel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyUnitCoolerProcessesRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessId As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal RevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal CondensingUnitSeries As String,  _
                    ByVal ShouldAdjustCapacityForRunTime As Boolean,  _
                    ByVal NumRunTimeHours As Single,  _
                    ByVal CompressorType As String,  _
                    ByVal Refrigerant As String,  _
                    ByVal NumCompressorsPerUnit As Integer,  _
                    ByVal NumCircuitsPerUnit As Integer,  _
                    ByVal CapacityRequired As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal NumCondensingUnitsRequired As Integer,  _
                    ByVal SuctionTemperature As Integer,  _
                    ByVal NumRooms As Integer,  _
                    ByVal AmbientTemperature As Single,  _
                    ByVal AmbientMinTemperature As Single,  _
                    ByVal AmbientMaxTemperature As Single,  _
                    ByVal AmbientTemperatureIncrement As Single,  _
                    ByVal RoomTemperature As Single,  _
                    ByVal RoomMinTemperature As Single,  _
                    ByVal RoomMaxTemperature As Single,  _
                    ByVal RoomTemperatureIncrement As Single,  _
                    ByVal CondenserCapacityPerDegree As Single,  _
                    ByVal CondensingUnitModel As String,  _
                    ByVal Series As String,  _
                    ByVal SuctionLineLoss As Integer,  _
                    ByVal ShouldOverrideUnitCoolerCapacityCriteria As Boolean,  _
                    ByVal SelectedUnitCoolerIndex As Integer,  _
                    ByVal UnitCooler1Model As String,  _
                    ByVal UnitCooler2Model As String,  _
                    ByVal UnitCooler3Model As String,  _
                    ByVal UnitCooler1Capacity As Single,  _
                    ByVal UnitCooler2Capacity As Single,  _
                    ByVal UnitCooler3Capacity As Single,  _
                    ByVal UnitCooler1Quantity As Integer,  _
                    ByVal UnitCooler2Quantity As Integer,  _
                    ByVal UnitCooler3Quantity As Integer,  _
                    ByVal Evaporator1CapacityPerDegree As Single,  _
                    ByVal Evaporator2CapacityPerDegree As Single,  _
                    ByVal Evaporator3CapacityPerDegree As Single,  _
                    ByVal IsThereAUnitCooler1 As Boolean,  _
                    ByVal IsThereAUnitCooler2 As Boolean,  _
                    ByVal IsThereAUnitCooler3 As Boolean,  _
                    ByVal IsThereACustomUnitCooler As Boolean,  _
                    ByVal CustomUnitCoolerModel As String,  _
                    ByVal CustomUnitCoolerCapacity As Single,  _
                    ByVal CustomUnitCoolerQuantity As Integer,  _
                    ByVal CustomUnitCoolerCapacityPerDegree As Single,  _
                    ByVal Balance As Single,  _
                    ByVal EvaporatorTemperature As Single,  _
                    ByVal AirTemperature As Single,  _
                    ByVal CondenserTemperature As Single,  _
                    ByVal Capacity As Single,  _
                    ByVal RunTime As Single,  _
                    ByVal UnitKw As Single,  _
                    ByVal CondenserCapacity As Single,  _
                    ByVal UnitAmps230 As Single,  _
                    ByVal UnitAmps460 As Single,  _
                    ByVal UnitEer As Single,  _
                    ByVal TemperatureDifference As Single,  _
                    ByVal UnitMca230 As Single,  _
                    ByVal UnitMca460 As Single,  _
                    ByVal Dimensions As String,  _
                    ByVal BaseListPrice As Integer,  _
                    ByVal CustomCondensingUnit As String,  _
                    ByVal Division As String,  _
                    ByVal ObjectLinkXML As String,  _
                    ByVal ObjectLinkType As String,  _
                    ByVal static_pressure_1 As Single,  _
                    ByVal static_pressure_2 As Single,  _
                    ByVal static_pressure_3 As Single,  _
                    ByVal DOEModel As String,  _
                    ByVal userState As Object)
            If (Me.CopyUnitCoolerProcessesRecordOperationCompleted Is Nothing) Then
                Me.CopyUnitCoolerProcessesRecordOperationCompleted = AddressOf Me.OnCopyUnitCoolerProcessesRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyUnitCoolerProcessesRecord", New Object() {CloudID, ProcessId, Revision, RevisionDate, ProjectRevision, RevisionDescription, CreatedBy, Version, Notes, Name, CondensingUnitSeries, ShouldAdjustCapacityForRunTime, NumRunTimeHours, CompressorType, Refrigerant, NumCompressorsPerUnit, NumCircuitsPerUnit, CapacityRequired, Altitude, NumCondensingUnitsRequired, SuctionTemperature, NumRooms, AmbientTemperature, AmbientMinTemperature, AmbientMaxTemperature, AmbientTemperatureIncrement, RoomTemperature, RoomMinTemperature, RoomMaxTemperature, RoomTemperatureIncrement, CondenserCapacityPerDegree, CondensingUnitModel, Series, SuctionLineLoss, ShouldOverrideUnitCoolerCapacityCriteria, SelectedUnitCoolerIndex, UnitCooler1Model, UnitCooler2Model, UnitCooler3Model, UnitCooler1Capacity, UnitCooler2Capacity, UnitCooler3Capacity, UnitCooler1Quantity, UnitCooler2Quantity, UnitCooler3Quantity, Evaporator1CapacityPerDegree, Evaporator2CapacityPerDegree, Evaporator3CapacityPerDegree, IsThereAUnitCooler1, IsThereAUnitCooler2, IsThereAUnitCooler3, IsThereACustomUnitCooler, CustomUnitCoolerModel, CustomUnitCoolerCapacity, CustomUnitCoolerQuantity, CustomUnitCoolerCapacityPerDegree, Balance, EvaporatorTemperature, AirTemperature, CondenserTemperature, Capacity, RunTime, UnitKw, CondenserCapacity, UnitAmps230, UnitAmps460, UnitEer, TemperatureDifference, UnitMca230, UnitMca460, Dimensions, BaseListPrice, CustomCondensingUnit, Division, ObjectLinkXML, ObjectLinkType, static_pressure_1, static_pressure_2, static_pressure_3, DOEModel}, Me.CopyUnitCoolerProcessesRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyUnitCoolerProcessesRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyUnitCoolerProcessesRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyUnitCoolerProcessesRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyUnitCoolerRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyUnitCoolerRecord(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal EvaporatorTemp As Single, ByVal BoxTemp As Single, ByVal CondensingTemp As Single, ByVal TempDifference As Single, ByVal LiquidTemp As Single, ByVal Capacity As Single, ByVal Refrigerant As String, ByVal Revision As Decimal, ByVal DefrostVoltage As String, ByVal FanVoltage As String, ByVal UnitCoolerType As String)
            Me.Invoke("CopyUnitCoolerRecord", New Object() {CloudID, EquipmentId, EvaporatorTemp, BoxTemp, CondensingTemp, TempDifference, LiquidTemp, Capacity, Refrigerant, Revision, DefrostVoltage, FanVoltage, UnitCoolerType})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyUnitCoolerRecord(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal EvaporatorTemp As Single, ByVal BoxTemp As Single, ByVal CondensingTemp As Single, ByVal TempDifference As Single, ByVal LiquidTemp As Single, ByVal Capacity As Single, ByVal Refrigerant As String, ByVal Revision As Decimal, ByVal DefrostVoltage As String, ByVal FanVoltage As String, ByVal UnitCoolerType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyUnitCoolerRecord", New Object() {CloudID, EquipmentId, EvaporatorTemp, BoxTemp, CondensingTemp, TempDifference, LiquidTemp, Capacity, Refrigerant, Revision, DefrostVoltage, FanVoltage, UnitCoolerType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyUnitCoolerRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyUnitCoolerRecordAsync(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal EvaporatorTemp As Single, ByVal BoxTemp As Single, ByVal CondensingTemp As Single, ByVal TempDifference As Single, ByVal LiquidTemp As Single, ByVal Capacity As Single, ByVal Refrigerant As String, ByVal Revision As Decimal, ByVal DefrostVoltage As String, ByVal FanVoltage As String, ByVal UnitCoolerType As String)
            Me.CopyUnitCoolerRecordAsync(CloudID, EquipmentId, EvaporatorTemp, BoxTemp, CondensingTemp, TempDifference, LiquidTemp, Capacity, Refrigerant, Revision, DefrostVoltage, FanVoltage, UnitCoolerType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyUnitCoolerRecordAsync(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal EvaporatorTemp As Single, ByVal BoxTemp As Single, ByVal CondensingTemp As Single, ByVal TempDifference As Single, ByVal LiquidTemp As Single, ByVal Capacity As Single, ByVal Refrigerant As String, ByVal Revision As Decimal, ByVal DefrostVoltage As String, ByVal FanVoltage As String, ByVal UnitCoolerType As String, ByVal userState As Object)
            If (Me.CopyUnitCoolerRecordOperationCompleted Is Nothing) Then
                Me.CopyUnitCoolerRecordOperationCompleted = AddressOf Me.OnCopyUnitCoolerRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyUnitCoolerRecord", New Object() {CloudID, EquipmentId, EvaporatorTemp, BoxTemp, CondensingTemp, TempDifference, LiquidTemp, Capacity, Refrigerant, Revision, DefrostVoltage, FanVoltage, UnitCoolerType}, Me.CopyUnitCoolerRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyUnitCoolerRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyUnitCoolerRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyUnitCoolerRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopySpecialOptionsRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopySpecialOptionsRecord(ByVal CloudID As Integer, ByVal Id As Integer, ByVal Revision As Decimal, ByVal EquipmentId As String, ByVal Code As String, ByVal Description As String, ByVal Quantity As Integer, ByVal Price As Single, ByVal AuthorizedFor As String, ByVal AuthorizedBy As String)
            Me.Invoke("CopySpecialOptionsRecord", New Object() {CloudID, Id, Revision, EquipmentId, Code, Description, Quantity, Price, AuthorizedFor, AuthorizedBy})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopySpecialOptionsRecord(ByVal CloudID As Integer, ByVal Id As Integer, ByVal Revision As Decimal, ByVal EquipmentId As String, ByVal Code As String, ByVal Description As String, ByVal Quantity As Integer, ByVal Price As Single, ByVal AuthorizedFor As String, ByVal AuthorizedBy As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopySpecialOptionsRecord", New Object() {CloudID, Id, Revision, EquipmentId, Code, Description, Quantity, Price, AuthorizedFor, AuthorizedBy}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopySpecialOptionsRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopySpecialOptionsRecordAsync(ByVal CloudID As Integer, ByVal Id As Integer, ByVal Revision As Decimal, ByVal EquipmentId As String, ByVal Code As String, ByVal Description As String, ByVal Quantity As Integer, ByVal Price As Single, ByVal AuthorizedFor As String, ByVal AuthorizedBy As String)
            Me.CopySpecialOptionsRecordAsync(CloudID, Id, Revision, EquipmentId, Code, Description, Quantity, Price, AuthorizedFor, AuthorizedBy, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopySpecialOptionsRecordAsync(ByVal CloudID As Integer, ByVal Id As Integer, ByVal Revision As Decimal, ByVal EquipmentId As String, ByVal Code As String, ByVal Description As String, ByVal Quantity As Integer, ByVal Price As Single, ByVal AuthorizedFor As String, ByVal AuthorizedBy As String, ByVal userState As Object)
            If (Me.CopySpecialOptionsRecordOperationCompleted Is Nothing) Then
                Me.CopySpecialOptionsRecordOperationCompleted = AddressOf Me.OnCopySpecialOptionsRecordOperationCompleted
            End If
            Me.InvokeAsync("CopySpecialOptionsRecord", New Object() {CloudID, Id, Revision, EquipmentId, Code, Description, Quantity, Price, AuthorizedFor, AuthorizedBy}, Me.CopySpecialOptionsRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopySpecialOptionsRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopySpecialOptionsRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopySpecialOptionsRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyRatingEquipmentRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyRatingEquipmentRecord(ByVal CloudID As Integer, ByVal ProjectID As String, ByVal ProjectRevision As Integer, ByVal EquipmentID As String, ByVal Revision As Decimal, ByVal RatingEquipmentXML As String)
            Me.Invoke("CopyRatingEquipmentRecord", New Object() {CloudID, ProjectID, ProjectRevision, EquipmentID, Revision, RatingEquipmentXML})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyRatingEquipmentRecord(ByVal CloudID As Integer, ByVal ProjectID As String, ByVal ProjectRevision As Integer, ByVal EquipmentID As String, ByVal Revision As Decimal, ByVal RatingEquipmentXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyRatingEquipmentRecord", New Object() {CloudID, ProjectID, ProjectRevision, EquipmentID, Revision, RatingEquipmentXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyRatingEquipmentRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyRatingEquipmentRecordAsync(ByVal CloudID As Integer, ByVal ProjectID As String, ByVal ProjectRevision As Integer, ByVal EquipmentID As String, ByVal Revision As Decimal, ByVal RatingEquipmentXML As String)
            Me.CopyRatingEquipmentRecordAsync(CloudID, ProjectID, ProjectRevision, EquipmentID, Revision, RatingEquipmentXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyRatingEquipmentRecordAsync(ByVal CloudID As Integer, ByVal ProjectID As String, ByVal ProjectRevision As Integer, ByVal EquipmentID As String, ByVal Revision As Decimal, ByVal RatingEquipmentXML As String, ByVal userState As Object)
            If (Me.CopyRatingEquipmentRecordOperationCompleted Is Nothing) Then
                Me.CopyRatingEquipmentRecordOperationCompleted = AddressOf Me.OnCopyRatingEquipmentRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyRatingEquipmentRecord", New Object() {CloudID, ProjectID, ProjectRevision, EquipmentID, Revision, RatingEquipmentXML}, Me.CopyRatingEquipmentRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyRatingEquipmentRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyRatingEquipmentRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyRatingEquipmentRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyPumpPackageRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyPumpPackageRecord(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal Manufacturer As String, ByVal Flow As Single, ByVal Head As Single, ByVal System As String, ByVal ChillerId As String)
            Me.Invoke("CopyPumpPackageRecord", New Object() {CloudID, EquipmentId, Revision, Manufacturer, Flow, Head, System, ChillerId})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyPumpPackageRecord(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal Manufacturer As String, ByVal Flow As Single, ByVal Head As Single, ByVal System As String, ByVal ChillerId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyPumpPackageRecord", New Object() {CloudID, EquipmentId, Revision, Manufacturer, Flow, Head, System, ChillerId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyPumpPackageRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyPumpPackageRecordAsync(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal Manufacturer As String, ByVal Flow As Single, ByVal Head As Single, ByVal System As String, ByVal ChillerId As String)
            Me.CopyPumpPackageRecordAsync(CloudID, EquipmentId, Revision, Manufacturer, Flow, Head, System, ChillerId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyPumpPackageRecordAsync(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal Manufacturer As String, ByVal Flow As Single, ByVal Head As Single, ByVal System As String, ByVal ChillerId As String, ByVal userState As Object)
            If (Me.CopyPumpPackageRecordOperationCompleted Is Nothing) Then
                Me.CopyPumpPackageRecordOperationCompleted = AddressOf Me.OnCopyPumpPackageRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyPumpPackageRecord", New Object() {CloudID, EquipmentId, Revision, Manufacturer, Flow, Head, System, ChillerId}, Me.CopyPumpPackageRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyPumpPackageRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyPumpPackageRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyPumpPackageRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyOrderEntryContacts", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyOrderEntryContacts(ByVal ProjectId As String, ByVal Name As String, ByVal Address1 As String, ByVal Address2 As String, ByVal Phone As String, ByVal State As String, ByVal Zip As String, ByVal City As String, ByVal ContactType As String, ByVal ImportedFromCloud As String, ByVal cloudID As String)
            Me.Invoke("CopyOrderEntryContacts", New Object() {ProjectId, Name, Address1, Address2, Phone, State, Zip, City, ContactType, ImportedFromCloud, cloudID})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyOrderEntryContacts(ByVal ProjectId As String, ByVal Name As String, ByVal Address1 As String, ByVal Address2 As String, ByVal Phone As String, ByVal State As String, ByVal Zip As String, ByVal City As String, ByVal ContactType As String, ByVal ImportedFromCloud As String, ByVal cloudID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyOrderEntryContacts", New Object() {ProjectId, Name, Address1, Address2, Phone, State, Zip, City, ContactType, ImportedFromCloud, cloudID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyOrderEntryContacts(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyOrderEntryContactsAsync(ByVal ProjectId As String, ByVal Name As String, ByVal Address1 As String, ByVal Address2 As String, ByVal Phone As String, ByVal State As String, ByVal Zip As String, ByVal City As String, ByVal ContactType As String, ByVal ImportedFromCloud As String, ByVal cloudID As String)
            Me.CopyOrderEntryContactsAsync(ProjectId, Name, Address1, Address2, Phone, State, Zip, City, ContactType, ImportedFromCloud, cloudID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyOrderEntryContactsAsync(ByVal ProjectId As String, ByVal Name As String, ByVal Address1 As String, ByVal Address2 As String, ByVal Phone As String, ByVal State As String, ByVal Zip As String, ByVal City As String, ByVal ContactType As String, ByVal ImportedFromCloud As String, ByVal cloudID As String, ByVal userState As Object)
            If (Me.CopyOrderEntryContactsOperationCompleted Is Nothing) Then
                Me.CopyOrderEntryContactsOperationCompleted = AddressOf Me.OnCopyOrderEntryContactsOperationCompleted
            End If
            Me.InvokeAsync("CopyOrderEntryContacts", New Object() {ProjectId, Name, Address1, Address2, Phone, State, Zip, City, ContactType, ImportedFromCloud, cloudID}, Me.CopyOrderEntryContactsOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyOrderEntryContactsOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyOrderEntryContactsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyOrderEntryContactsCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyProjectContactsRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyProjectContactsRecord(ByVal CloudID As Integer, ByVal ProjectId As String, ByVal ContactId As Integer)
            Me.Invoke("CopyProjectContactsRecord", New Object() {CloudID, ProjectId, ContactId})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyProjectContactsRecord(ByVal CloudID As Integer, ByVal ProjectId As String, ByVal ContactId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyProjectContactsRecord", New Object() {CloudID, ProjectId, ContactId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyProjectContactsRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyProjectContactsRecordAsync(ByVal CloudID As Integer, ByVal ProjectId As String, ByVal ContactId As Integer)
            Me.CopyProjectContactsRecordAsync(CloudID, ProjectId, ContactId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyProjectContactsRecordAsync(ByVal CloudID As Integer, ByVal ProjectId As String, ByVal ContactId As Integer, ByVal userState As Object)
            If (Me.CopyProjectContactsRecordOperationCompleted Is Nothing) Then
                Me.CopyProjectContactsRecordOperationCompleted = AddressOf Me.OnCopyProjectContactsRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyProjectContactsRecord", New Object() {CloudID, ProjectId, ContactId}, Me.CopyProjectContactsRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyProjectContactsRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyProjectContactsRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyProjectContactsRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyProductCoolerRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyProductCoolerRecord(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal Capacity As Single, ByVal EvaporatorTemp As Single, ByVal BoxTemp As Single, ByVal TempDifference As Single, ByVal CondensingTemp As Single, ByVal LiquidTemp As Single, ByVal Refrigerant As String)
            Me.Invoke("CopyProductCoolerRecord", New Object() {CloudID, EquipmentId, Revision, Capacity, EvaporatorTemp, BoxTemp, TempDifference, CondensingTemp, LiquidTemp, Refrigerant})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyProductCoolerRecord(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal Capacity As Single, ByVal EvaporatorTemp As Single, ByVal BoxTemp As Single, ByVal TempDifference As Single, ByVal CondensingTemp As Single, ByVal LiquidTemp As Single, ByVal Refrigerant As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyProductCoolerRecord", New Object() {CloudID, EquipmentId, Revision, Capacity, EvaporatorTemp, BoxTemp, TempDifference, CondensingTemp, LiquidTemp, Refrigerant}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyProductCoolerRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyProductCoolerRecordAsync(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal Capacity As Single, ByVal EvaporatorTemp As Single, ByVal BoxTemp As Single, ByVal TempDifference As Single, ByVal CondensingTemp As Single, ByVal LiquidTemp As Single, ByVal Refrigerant As String)
            Me.CopyProductCoolerRecordAsync(CloudID, EquipmentId, Revision, Capacity, EvaporatorTemp, BoxTemp, TempDifference, CondensingTemp, LiquidTemp, Refrigerant, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyProductCoolerRecordAsync(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal Capacity As Single, ByVal EvaporatorTemp As Single, ByVal BoxTemp As Single, ByVal TempDifference As Single, ByVal CondensingTemp As Single, ByVal LiquidTemp As Single, ByVal Refrigerant As String, ByVal userState As Object)
            If (Me.CopyProductCoolerRecordOperationCompleted Is Nothing) Then
                Me.CopyProductCoolerRecordOperationCompleted = AddressOf Me.OnCopyProductCoolerRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyProductCoolerRecord", New Object() {CloudID, EquipmentId, Revision, Capacity, EvaporatorTemp, BoxTemp, TempDifference, CondensingTemp, LiquidTemp, Refrigerant}, Me.CopyProductCoolerRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyProductCoolerRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyProductCoolerRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyProductCoolerRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyProcessSpecificRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyProcessSpecificRecord(ByVal CloudID As Integer, ByVal ProcessID As String, ByVal ControlName As String, ByVal ControlValue As String, ByVal LoadOrder As String, ByVal FireProcedure As String)
            Me.Invoke("CopyProcessSpecificRecord", New Object() {CloudID, ProcessID, ControlName, ControlValue, LoadOrder, FireProcedure})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyProcessSpecificRecord(ByVal CloudID As Integer, ByVal ProcessID As String, ByVal ControlName As String, ByVal ControlValue As String, ByVal LoadOrder As String, ByVal FireProcedure As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyProcessSpecificRecord", New Object() {CloudID, ProcessID, ControlName, ControlValue, LoadOrder, FireProcedure}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyProcessSpecificRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyProcessSpecificRecordAsync(ByVal CloudID As Integer, ByVal ProcessID As String, ByVal ControlName As String, ByVal ControlValue As String, ByVal LoadOrder As String, ByVal FireProcedure As String)
            Me.CopyProcessSpecificRecordAsync(CloudID, ProcessID, ControlName, ControlValue, LoadOrder, FireProcedure, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyProcessSpecificRecordAsync(ByVal CloudID As Integer, ByVal ProcessID As String, ByVal ControlName As String, ByVal ControlValue As String, ByVal LoadOrder As String, ByVal FireProcedure As String, ByVal userState As Object)
            If (Me.CopyProcessSpecificRecordOperationCompleted Is Nothing) Then
                Me.CopyProcessSpecificRecordOperationCompleted = AddressOf Me.OnCopyProcessSpecificRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyProcessSpecificRecord", New Object() {CloudID, ProcessID, ControlName, ControlValue, LoadOrder, FireProcedure}, Me.CopyProcessSpecificRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyProcessSpecificRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyProcessSpecificRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyProcessSpecificRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyProcessEquipRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyProcessEquipRecord(ByVal CloudID As Integer, ByVal ID As String, ByVal ProcessID As String, ByVal EquipmentID As String)
            Me.Invoke("CopyProcessEquipRecord", New Object() {CloudID, ID, ProcessID, EquipmentID})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyProcessEquipRecord(ByVal CloudID As Integer, ByVal ID As String, ByVal ProcessID As String, ByVal EquipmentID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyProcessEquipRecord", New Object() {CloudID, ID, ProcessID, EquipmentID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyProcessEquipRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyProcessEquipRecordAsync(ByVal CloudID As Integer, ByVal ID As String, ByVal ProcessID As String, ByVal EquipmentID As String)
            Me.CopyProcessEquipRecordAsync(CloudID, ID, ProcessID, EquipmentID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyProcessEquipRecordAsync(ByVal CloudID As Integer, ByVal ID As String, ByVal ProcessID As String, ByVal EquipmentID As String, ByVal userState As Object)
            If (Me.CopyProcessEquipRecordOperationCompleted Is Nothing) Then
                Me.CopyProcessEquipRecordOperationCompleted = AddressOf Me.OnCopyProcessEquipRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyProcessEquipRecord", New Object() {CloudID, ID, ProcessID, EquipmentID}, Me.CopyProcessEquipRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyProcessEquipRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyProcessEquipRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyProcessEquipRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyOtherEquipmentCostsRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyOtherEquipmentCostsRecord(ByVal CloudID As Integer, ByVal Id As Integer, ByVal Revision As Decimal, ByVal EquipmentId As String, ByVal Price As Single, ByVal Description As String)
            Me.Invoke("CopyOtherEquipmentCostsRecord", New Object() {CloudID, Id, Revision, EquipmentId, Price, Description})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyOtherEquipmentCostsRecord(ByVal CloudID As Integer, ByVal Id As Integer, ByVal Revision As Decimal, ByVal EquipmentId As String, ByVal Price As Single, ByVal Description As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyOtherEquipmentCostsRecord", New Object() {CloudID, Id, Revision, EquipmentId, Price, Description}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyOtherEquipmentCostsRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyOtherEquipmentCostsRecordAsync(ByVal CloudID As Integer, ByVal Id As Integer, ByVal Revision As Decimal, ByVal EquipmentId As String, ByVal Price As Single, ByVal Description As String)
            Me.CopyOtherEquipmentCostsRecordAsync(CloudID, Id, Revision, EquipmentId, Price, Description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyOtherEquipmentCostsRecordAsync(ByVal CloudID As Integer, ByVal Id As Integer, ByVal Revision As Decimal, ByVal EquipmentId As String, ByVal Price As Single, ByVal Description As String, ByVal userState As Object)
            If (Me.CopyOtherEquipmentCostsRecordOperationCompleted Is Nothing) Then
                Me.CopyOtherEquipmentCostsRecordOperationCompleted = AddressOf Me.OnCopyOtherEquipmentCostsRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyOtherEquipmentCostsRecord", New Object() {CloudID, Id, Revision, EquipmentId, Price, Description}, Me.CopyOtherEquipmentCostsRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyOtherEquipmentCostsRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyOtherEquipmentCostsRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyOtherEquipmentCostsRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyFluidCoolerProcessesRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyFluidCoolerProcessesRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Name As String,  _
                    ByVal Altitude As Single,  _
                    ByVal Capacity As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal EnteringFluidTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal GlycolPercent As Single,  _
                    ByVal Fluid As String,  _
                    ByVal Flow As Single,  _
                    ByVal FluidCoolerXML As String)
            Me.Invoke("CopyFluidCoolerProcessesRecord", New Object() {CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Name, Altitude, Capacity, AmbientTemp, EnteringFluidTemp, LeavingFluidTemp, GlycolPercent, Fluid, Flow, FluidCoolerXML})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyFluidCoolerProcessesRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Name As String,  _
                    ByVal Altitude As Single,  _
                    ByVal Capacity As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal EnteringFluidTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal GlycolPercent As Single,  _
                    ByVal Fluid As String,  _
                    ByVal Flow As Single,  _
                    ByVal FluidCoolerXML As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyFluidCoolerProcessesRecord", New Object() {CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Name, Altitude, Capacity, AmbientTemp, EnteringFluidTemp, LeavingFluidTemp, GlycolPercent, Fluid, Flow, FluidCoolerXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyFluidCoolerProcessesRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyFluidCoolerProcessesRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Name As String,  _
                    ByVal Altitude As Single,  _
                    ByVal Capacity As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal EnteringFluidTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal GlycolPercent As Single,  _
                    ByVal Fluid As String,  _
                    ByVal Flow As Single,  _
                    ByVal FluidCoolerXML As String)
            Me.CopyFluidCoolerProcessesRecordAsync(CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Name, Altitude, Capacity, AmbientTemp, EnteringFluidTemp, LeavingFluidTemp, GlycolPercent, Fluid, Flow, FluidCoolerXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyFluidCoolerProcessesRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Name As String,  _
                    ByVal Altitude As Single,  _
                    ByVal Capacity As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal EnteringFluidTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal GlycolPercent As Single,  _
                    ByVal Fluid As String,  _
                    ByVal Flow As Single,  _
                    ByVal FluidCoolerXML As String,  _
                    ByVal userState As Object)
            If (Me.CopyFluidCoolerProcessesRecordOperationCompleted Is Nothing) Then
                Me.CopyFluidCoolerProcessesRecordOperationCompleted = AddressOf Me.OnCopyFluidCoolerProcessesRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyFluidCoolerProcessesRecord", New Object() {CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Name, Altitude, Capacity, AmbientTemp, EnteringFluidTemp, LeavingFluidTemp, GlycolPercent, Fluid, Flow, FluidCoolerXML}, Me.CopyFluidCoolerProcessesRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyFluidCoolerProcessesRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyFluidCoolerProcessesRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyFluidCoolerProcessesRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyEquipmentOptionsRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyEquipmentOptionsRecord(ByVal CloudID As Integer, ByVal Id As Integer, ByVal Revision As Decimal, ByVal PricingId As Integer, ByVal EquipmentId As String, ByVal Quantity As Integer)
            Me.Invoke("CopyEquipmentOptionsRecord", New Object() {CloudID, Id, Revision, PricingId, EquipmentId, Quantity})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyEquipmentOptionsRecord(ByVal CloudID As Integer, ByVal Id As Integer, ByVal Revision As Decimal, ByVal PricingId As Integer, ByVal EquipmentId As String, ByVal Quantity As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyEquipmentOptionsRecord", New Object() {CloudID, Id, Revision, PricingId, EquipmentId, Quantity}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyEquipmentOptionsRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyEquipmentOptionsRecordAsync(ByVal CloudID As Integer, ByVal Id As Integer, ByVal Revision As Decimal, ByVal PricingId As Integer, ByVal EquipmentId As String, ByVal Quantity As Integer)
            Me.CopyEquipmentOptionsRecordAsync(CloudID, Id, Revision, PricingId, EquipmentId, Quantity, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyEquipmentOptionsRecordAsync(ByVal CloudID As Integer, ByVal Id As Integer, ByVal Revision As Decimal, ByVal PricingId As Integer, ByVal EquipmentId As String, ByVal Quantity As Integer, ByVal userState As Object)
            If (Me.CopyEquipmentOptionsRecordOperationCompleted Is Nothing) Then
                Me.CopyEquipmentOptionsRecordOperationCompleted = AddressOf Me.OnCopyEquipmentOptionsRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyEquipmentOptionsRecord", New Object() {CloudID, Id, Revision, PricingId, EquipmentId, Quantity}, Me.CopyEquipmentOptionsRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyEquipmentOptionsRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyEquipmentOptionsRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyEquipmentOptionsRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyEvapChillerProcessesRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyEvapChillerProcessesRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal Series As String,  _
                    ByVal NewCoefficients As Boolean,  _
                    ByVal Model As String,  _
                    ByVal ModelDesc As String,  _
                    ByVal Fluid As String,  _
                    ByVal GlycolPercentage As Single,  _
                    ByVal CoolingMedia As String,  _
                    ByVal SpecificHeat As Single,  _
                    ByVal SpecificGravity As Single,  _
                    ByVal SubCooling As Single,  _
                    ByVal Refrigerant As String,  _
                    ByVal TempRange As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal System As String,  _
                    ByVal Hertz As Single,  _
                    ByVal Volts As Single,  _
                    ByVal Approach As String,  _
                    ByVal TEMin As Single,  _
                    ByVal TEMax As Single,  _
                    ByVal TEIncrement As Single,  _
                    ByVal ATMin As Single,  _
                    ByVal ATMax As Single,  _
                    ByVal ATIncrement As Single,  _
                    ByVal SafetyOverride As Boolean,  _
                    ByVal Circuit1 As Boolean,  _
                    ByVal Circuit2 As Boolean,  _
                    ByVal NumCompressors1 As Integer,  _
                    ByVal NumCompressors2 As Integer,  _
                    ByVal Compressors1 As String,  _
                    ByVal Compressors2 As String,  _
                    ByVal NumCoils1 As Single,  _
                    ByVal NumCoils2 As Single,  _
                    ByVal Condenser1 As String,  _
                    ByVal Condenser2 As String,  _
                    ByVal DischargeLineLoss As Single,  _
                    ByVal SuctionLineLoss As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal PumpWatts As Single,  _
                    ByVal FanWatts As Single,  _
                    ByVal CondenserCapacity1 As Single,  _
                    ByVal CondenserCapacity2 As Single,  _
                    ByVal EvaporatorModel As String,  _
                    ByVal EvaporatorModelDesc As String,  _
                    ByVal NumEvap As Integer,  _
                    ByVal FoulingFactor As Single,  _
                    ByVal CapacityType As String,  _
                    ByVal EvaporatorCapacity As Single,  _
                    ByVal CatalogRating As Boolean,  _
                    ByVal ApproachRange As String,  _
                    ByVal Evap8Degr1 As Single,  _
                    ByVal Evap8Degr2 As Single,  _
                    ByVal Evap10Degr1 As Single,  _
                    ByVal Evap10Degr2 As Single,  _
                    ByVal Division As String,  _
                    ByVal SubcoolingCoilOption As Boolean,  _
                    ByVal SoundAttenuationOption As Boolean,  _
                    ByVal CustomCondenserModel As String,  _
                    ByVal FanMotorHp As Single,  _
                    ByVal PumpMotorHp As Single)
            Me.Invoke("CopyEvapChillerProcessesRecord", New Object() {CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Name, Series, NewCoefficients, Model, ModelDesc, Fluid, GlycolPercentage, CoolingMedia, SpecificHeat, SpecificGravity, SubCooling, Refrigerant, TempRange, AmbientTemp, LeavingFluidTemp, System, Hertz, Volts, Approach, TEMin, TEMax, TEIncrement, ATMin, ATMax, ATIncrement, SafetyOverride, Circuit1, Circuit2, NumCompressors1, NumCompressors2, Compressors1, Compressors2, NumCoils1, NumCoils2, Condenser1, Condenser2, DischargeLineLoss, SuctionLineLoss, Altitude, PumpWatts, FanWatts, CondenserCapacity1, CondenserCapacity2, EvaporatorModel, EvaporatorModelDesc, NumEvap, FoulingFactor, CapacityType, EvaporatorCapacity, CatalogRating, ApproachRange, Evap8Degr1, Evap8Degr2, Evap10Degr1, Evap10Degr2, Division, SubcoolingCoilOption, SoundAttenuationOption, CustomCondenserModel, FanMotorHp, PumpMotorHp})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyEvapChillerProcessesRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal Series As String,  _
                    ByVal NewCoefficients As Boolean,  _
                    ByVal Model As String,  _
                    ByVal ModelDesc As String,  _
                    ByVal Fluid As String,  _
                    ByVal GlycolPercentage As Single,  _
                    ByVal CoolingMedia As String,  _
                    ByVal SpecificHeat As Single,  _
                    ByVal SpecificGravity As Single,  _
                    ByVal SubCooling As Single,  _
                    ByVal Refrigerant As String,  _
                    ByVal TempRange As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal System As String,  _
                    ByVal Hertz As Single,  _
                    ByVal Volts As Single,  _
                    ByVal Approach As String,  _
                    ByVal TEMin As Single,  _
                    ByVal TEMax As Single,  _
                    ByVal TEIncrement As Single,  _
                    ByVal ATMin As Single,  _
                    ByVal ATMax As Single,  _
                    ByVal ATIncrement As Single,  _
                    ByVal SafetyOverride As Boolean,  _
                    ByVal Circuit1 As Boolean,  _
                    ByVal Circuit2 As Boolean,  _
                    ByVal NumCompressors1 As Integer,  _
                    ByVal NumCompressors2 As Integer,  _
                    ByVal Compressors1 As String,  _
                    ByVal Compressors2 As String,  _
                    ByVal NumCoils1 As Single,  _
                    ByVal NumCoils2 As Single,  _
                    ByVal Condenser1 As String,  _
                    ByVal Condenser2 As String,  _
                    ByVal DischargeLineLoss As Single,  _
                    ByVal SuctionLineLoss As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal PumpWatts As Single,  _
                    ByVal FanWatts As Single,  _
                    ByVal CondenserCapacity1 As Single,  _
                    ByVal CondenserCapacity2 As Single,  _
                    ByVal EvaporatorModel As String,  _
                    ByVal EvaporatorModelDesc As String,  _
                    ByVal NumEvap As Integer,  _
                    ByVal FoulingFactor As Single,  _
                    ByVal CapacityType As String,  _
                    ByVal EvaporatorCapacity As Single,  _
                    ByVal CatalogRating As Boolean,  _
                    ByVal ApproachRange As String,  _
                    ByVal Evap8Degr1 As Single,  _
                    ByVal Evap8Degr2 As Single,  _
                    ByVal Evap10Degr1 As Single,  _
                    ByVal Evap10Degr2 As Single,  _
                    ByVal Division As String,  _
                    ByVal SubcoolingCoilOption As Boolean,  _
                    ByVal SoundAttenuationOption As Boolean,  _
                    ByVal CustomCondenserModel As String,  _
                    ByVal FanMotorHp As Single,  _
                    ByVal PumpMotorHp As Single,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyEvapChillerProcessesRecord", New Object() {CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Name, Series, NewCoefficients, Model, ModelDesc, Fluid, GlycolPercentage, CoolingMedia, SpecificHeat, SpecificGravity, SubCooling, Refrigerant, TempRange, AmbientTemp, LeavingFluidTemp, System, Hertz, Volts, Approach, TEMin, TEMax, TEIncrement, ATMin, ATMax, ATIncrement, SafetyOverride, Circuit1, Circuit2, NumCompressors1, NumCompressors2, Compressors1, Compressors2, NumCoils1, NumCoils2, Condenser1, Condenser2, DischargeLineLoss, SuctionLineLoss, Altitude, PumpWatts, FanWatts, CondenserCapacity1, CondenserCapacity2, EvaporatorModel, EvaporatorModelDesc, NumEvap, FoulingFactor, CapacityType, EvaporatorCapacity, CatalogRating, ApproachRange, Evap8Degr1, Evap8Degr2, Evap10Degr1, Evap10Degr2, Division, SubcoolingCoilOption, SoundAttenuationOption, CustomCondenserModel, FanMotorHp, PumpMotorHp}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyEvapChillerProcessesRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyEvapChillerProcessesRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal Series As String,  _
                    ByVal NewCoefficients As Boolean,  _
                    ByVal Model As String,  _
                    ByVal ModelDesc As String,  _
                    ByVal Fluid As String,  _
                    ByVal GlycolPercentage As Single,  _
                    ByVal CoolingMedia As String,  _
                    ByVal SpecificHeat As Single,  _
                    ByVal SpecificGravity As Single,  _
                    ByVal SubCooling As Single,  _
                    ByVal Refrigerant As String,  _
                    ByVal TempRange As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal System As String,  _
                    ByVal Hertz As Single,  _
                    ByVal Volts As Single,  _
                    ByVal Approach As String,  _
                    ByVal TEMin As Single,  _
                    ByVal TEMax As Single,  _
                    ByVal TEIncrement As Single,  _
                    ByVal ATMin As Single,  _
                    ByVal ATMax As Single,  _
                    ByVal ATIncrement As Single,  _
                    ByVal SafetyOverride As Boolean,  _
                    ByVal Circuit1 As Boolean,  _
                    ByVal Circuit2 As Boolean,  _
                    ByVal NumCompressors1 As Integer,  _
                    ByVal NumCompressors2 As Integer,  _
                    ByVal Compressors1 As String,  _
                    ByVal Compressors2 As String,  _
                    ByVal NumCoils1 As Single,  _
                    ByVal NumCoils2 As Single,  _
                    ByVal Condenser1 As String,  _
                    ByVal Condenser2 As String,  _
                    ByVal DischargeLineLoss As Single,  _
                    ByVal SuctionLineLoss As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal PumpWatts As Single,  _
                    ByVal FanWatts As Single,  _
                    ByVal CondenserCapacity1 As Single,  _
                    ByVal CondenserCapacity2 As Single,  _
                    ByVal EvaporatorModel As String,  _
                    ByVal EvaporatorModelDesc As String,  _
                    ByVal NumEvap As Integer,  _
                    ByVal FoulingFactor As Single,  _
                    ByVal CapacityType As String,  _
                    ByVal EvaporatorCapacity As Single,  _
                    ByVal CatalogRating As Boolean,  _
                    ByVal ApproachRange As String,  _
                    ByVal Evap8Degr1 As Single,  _
                    ByVal Evap8Degr2 As Single,  _
                    ByVal Evap10Degr1 As Single,  _
                    ByVal Evap10Degr2 As Single,  _
                    ByVal Division As String,  _
                    ByVal SubcoolingCoilOption As Boolean,  _
                    ByVal SoundAttenuationOption As Boolean,  _
                    ByVal CustomCondenserModel As String,  _
                    ByVal FanMotorHp As Single,  _
                    ByVal PumpMotorHp As Single)
            Me.CopyEvapChillerProcessesRecordAsync(CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Name, Series, NewCoefficients, Model, ModelDesc, Fluid, GlycolPercentage, CoolingMedia, SpecificHeat, SpecificGravity, SubCooling, Refrigerant, TempRange, AmbientTemp, LeavingFluidTemp, System, Hertz, Volts, Approach, TEMin, TEMax, TEIncrement, ATMin, ATMax, ATIncrement, SafetyOverride, Circuit1, Circuit2, NumCompressors1, NumCompressors2, Compressors1, Compressors2, NumCoils1, NumCoils2, Condenser1, Condenser2, DischargeLineLoss, SuctionLineLoss, Altitude, PumpWatts, FanWatts, CondenserCapacity1, CondenserCapacity2, EvaporatorModel, EvaporatorModelDesc, NumEvap, FoulingFactor, CapacityType, EvaporatorCapacity, CatalogRating, ApproachRange, Evap8Degr1, Evap8Degr2, Evap10Degr1, Evap10Degr2, Division, SubcoolingCoilOption, SoundAttenuationOption, CustomCondenserModel, FanMotorHp, PumpMotorHp, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyEvapChillerProcessesRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal ProcessID As String,  _
                    ByVal Revision As Decimal,  _
                    ByVal RevisionDate As Date,  _
                    ByVal ProjectRevision As Integer,  _
                    ByVal ProcessRevisionDescription As String,  _
                    ByVal CreatedBy As String,  _
                    ByVal Version As String,  _
                    ByVal Notes As String,  _
                    ByVal Name As String,  _
                    ByVal Series As String,  _
                    ByVal NewCoefficients As Boolean,  _
                    ByVal Model As String,  _
                    ByVal ModelDesc As String,  _
                    ByVal Fluid As String,  _
                    ByVal GlycolPercentage As Single,  _
                    ByVal CoolingMedia As String,  _
                    ByVal SpecificHeat As Single,  _
                    ByVal SpecificGravity As Single,  _
                    ByVal SubCooling As Single,  _
                    ByVal Refrigerant As String,  _
                    ByVal TempRange As Single,  _
                    ByVal AmbientTemp As Single,  _
                    ByVal LeavingFluidTemp As Single,  _
                    ByVal System As String,  _
                    ByVal Hertz As Single,  _
                    ByVal Volts As Single,  _
                    ByVal Approach As String,  _
                    ByVal TEMin As Single,  _
                    ByVal TEMax As Single,  _
                    ByVal TEIncrement As Single,  _
                    ByVal ATMin As Single,  _
                    ByVal ATMax As Single,  _
                    ByVal ATIncrement As Single,  _
                    ByVal SafetyOverride As Boolean,  _
                    ByVal Circuit1 As Boolean,  _
                    ByVal Circuit2 As Boolean,  _
                    ByVal NumCompressors1 As Integer,  _
                    ByVal NumCompressors2 As Integer,  _
                    ByVal Compressors1 As String,  _
                    ByVal Compressors2 As String,  _
                    ByVal NumCoils1 As Single,  _
                    ByVal NumCoils2 As Single,  _
                    ByVal Condenser1 As String,  _
                    ByVal Condenser2 As String,  _
                    ByVal DischargeLineLoss As Single,  _
                    ByVal SuctionLineLoss As Single,  _
                    ByVal Altitude As Single,  _
                    ByVal PumpWatts As Single,  _
                    ByVal FanWatts As Single,  _
                    ByVal CondenserCapacity1 As Single,  _
                    ByVal CondenserCapacity2 As Single,  _
                    ByVal EvaporatorModel As String,  _
                    ByVal EvaporatorModelDesc As String,  _
                    ByVal NumEvap As Integer,  _
                    ByVal FoulingFactor As Single,  _
                    ByVal CapacityType As String,  _
                    ByVal EvaporatorCapacity As Single,  _
                    ByVal CatalogRating As Boolean,  _
                    ByVal ApproachRange As String,  _
                    ByVal Evap8Degr1 As Single,  _
                    ByVal Evap8Degr2 As Single,  _
                    ByVal Evap10Degr1 As Single,  _
                    ByVal Evap10Degr2 As Single,  _
                    ByVal Division As String,  _
                    ByVal SubcoolingCoilOption As Boolean,  _
                    ByVal SoundAttenuationOption As Boolean,  _
                    ByVal CustomCondenserModel As String,  _
                    ByVal FanMotorHp As Single,  _
                    ByVal PumpMotorHp As Single,  _
                    ByVal userState As Object)
            If (Me.CopyEvapChillerProcessesRecordOperationCompleted Is Nothing) Then
                Me.CopyEvapChillerProcessesRecordOperationCompleted = AddressOf Me.OnCopyEvapChillerProcessesRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyEvapChillerProcessesRecord", New Object() {CloudID, ProcessID, Revision, RevisionDate, ProjectRevision, ProcessRevisionDescription, CreatedBy, Version, Notes, Name, Series, NewCoefficients, Model, ModelDesc, Fluid, GlycolPercentage, CoolingMedia, SpecificHeat, SpecificGravity, SubCooling, Refrigerant, TempRange, AmbientTemp, LeavingFluidTemp, System, Hertz, Volts, Approach, TEMin, TEMax, TEIncrement, ATMin, ATMax, ATIncrement, SafetyOverride, Circuit1, Circuit2, NumCompressors1, NumCompressors2, Compressors1, Compressors2, NumCoils1, NumCoils2, Condenser1, Condenser2, DischargeLineLoss, SuctionLineLoss, Altitude, PumpWatts, FanWatts, CondenserCapacity1, CondenserCapacity2, EvaporatorModel, EvaporatorModelDesc, NumEvap, FoulingFactor, CapacityType, EvaporatorCapacity, CatalogRating, ApproachRange, Evap8Degr1, Evap8Degr2, Evap10Degr1, Evap10Degr2, Division, SubcoolingCoilOption, SoundAttenuationOption, CustomCondenserModel, FanMotorHp, PumpMotorHp}, Me.CopyEvapChillerProcessesRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyEvapChillerProcessesRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyEvapChillerProcessesRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyEvapChillerProcessesRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyFluidCoolerRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyFluidCoolerRecord(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal Capacity As Single, ByVal AmbientTemp As Single, ByVal EnteringFluidTemp As Single, ByVal LeavingFluidTemp As Single, ByVal GlycolPercent As Single, ByVal Fluid As String, ByVal Flow As Integer, ByVal Refrigerant As String)
            Me.Invoke("CopyFluidCoolerRecord", New Object() {CloudID, EquipmentId, Revision, Capacity, AmbientTemp, EnteringFluidTemp, LeavingFluidTemp, GlycolPercent, Fluid, Flow, Refrigerant})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyFluidCoolerRecord(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal Capacity As Single, ByVal AmbientTemp As Single, ByVal EnteringFluidTemp As Single, ByVal LeavingFluidTemp As Single, ByVal GlycolPercent As Single, ByVal Fluid As String, ByVal Flow As Integer, ByVal Refrigerant As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyFluidCoolerRecord", New Object() {CloudID, EquipmentId, Revision, Capacity, AmbientTemp, EnteringFluidTemp, LeavingFluidTemp, GlycolPercent, Fluid, Flow, Refrigerant}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyFluidCoolerRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyFluidCoolerRecordAsync(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal Capacity As Single, ByVal AmbientTemp As Single, ByVal EnteringFluidTemp As Single, ByVal LeavingFluidTemp As Single, ByVal GlycolPercent As Single, ByVal Fluid As String, ByVal Flow As Integer, ByVal Refrigerant As String)
            Me.CopyFluidCoolerRecordAsync(CloudID, EquipmentId, Revision, Capacity, AmbientTemp, EnteringFluidTemp, LeavingFluidTemp, GlycolPercent, Fluid, Flow, Refrigerant, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyFluidCoolerRecordAsync(ByVal CloudID As Integer, ByVal EquipmentId As String, ByVal Revision As Decimal, ByVal Capacity As Single, ByVal AmbientTemp As Single, ByVal EnteringFluidTemp As Single, ByVal LeavingFluidTemp As Single, ByVal GlycolPercent As Single, ByVal Fluid As String, ByVal Flow As Integer, ByVal Refrigerant As String, ByVal userState As Object)
            If (Me.CopyFluidCoolerRecordOperationCompleted Is Nothing) Then
                Me.CopyFluidCoolerRecordOperationCompleted = AddressOf Me.OnCopyFluidCoolerRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyFluidCoolerRecord", New Object() {CloudID, EquipmentId, Revision, Capacity, AmbientTemp, EnteringFluidTemp, LeavingFluidTemp, GlycolPercent, Fluid, Flow, Refrigerant}, Me.CopyFluidCoolerRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyFluidCoolerRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyFluidCoolerRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyFluidCoolerRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyContactsRecord", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyContactsRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal Id As Integer,  _
                    ByVal CustomerNum As Integer,  _
                    ByVal RepNum As Integer,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal CompanyId As Integer,  _
                    ByVal Email As String,  _
                    ByVal Description As String,  _
                    ByVal Line1 As String,  _
                    ByVal Line2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal ZipCode5 As Integer,  _
                    ByVal ZipCode4 As Integer,  _
                    ByVal PhoneNumAreaCode As Integer,  _
                    ByVal PhoneNum As Integer,  _
                    ByVal PhoneNumExtension As Integer,  _
                    ByVal FaxNum As Integer,  _
                    ByVal FaxNumAreaCode As Integer)
            Me.Invoke("CopyContactsRecord", New Object() {CloudID, Id, CustomerNum, RepNum, FirstName, LastName, CompanyId, Email, Description, Line1, Line2, City, State, ZipCode5, ZipCode4, PhoneNumAreaCode, PhoneNum, PhoneNumExtension, FaxNum, FaxNumAreaCode})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyContactsRecord( _
                    ByVal CloudID As Integer,  _
                    ByVal Id As Integer,  _
                    ByVal CustomerNum As Integer,  _
                    ByVal RepNum As Integer,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal CompanyId As Integer,  _
                    ByVal Email As String,  _
                    ByVal Description As String,  _
                    ByVal Line1 As String,  _
                    ByVal Line2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal ZipCode5 As Integer,  _
                    ByVal ZipCode4 As Integer,  _
                    ByVal PhoneNumAreaCode As Integer,  _
                    ByVal PhoneNum As Integer,  _
                    ByVal PhoneNumExtension As Integer,  _
                    ByVal FaxNum As Integer,  _
                    ByVal FaxNumAreaCode As Integer,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyContactsRecord", New Object() {CloudID, Id, CustomerNum, RepNum, FirstName, LastName, CompanyId, Email, Description, Line1, Line2, City, State, ZipCode5, ZipCode4, PhoneNumAreaCode, PhoneNum, PhoneNumExtension, FaxNum, FaxNumAreaCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyContactsRecord(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyContactsRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal Id As Integer,  _
                    ByVal CustomerNum As Integer,  _
                    ByVal RepNum As Integer,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal CompanyId As Integer,  _
                    ByVal Email As String,  _
                    ByVal Description As String,  _
                    ByVal Line1 As String,  _
                    ByVal Line2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal ZipCode5 As Integer,  _
                    ByVal ZipCode4 As Integer,  _
                    ByVal PhoneNumAreaCode As Integer,  _
                    ByVal PhoneNum As Integer,  _
                    ByVal PhoneNumExtension As Integer,  _
                    ByVal FaxNum As Integer,  _
                    ByVal FaxNumAreaCode As Integer)
            Me.CopyContactsRecordAsync(CloudID, Id, CustomerNum, RepNum, FirstName, LastName, CompanyId, Email, Description, Line1, Line2, City, State, ZipCode5, ZipCode4, PhoneNumAreaCode, PhoneNum, PhoneNumExtension, FaxNum, FaxNumAreaCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyContactsRecordAsync( _
                    ByVal CloudID As Integer,  _
                    ByVal Id As Integer,  _
                    ByVal CustomerNum As Integer,  _
                    ByVal RepNum As Integer,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal CompanyId As Integer,  _
                    ByVal Email As String,  _
                    ByVal Description As String,  _
                    ByVal Line1 As String,  _
                    ByVal Line2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal ZipCode5 As Integer,  _
                    ByVal ZipCode4 As Integer,  _
                    ByVal PhoneNumAreaCode As Integer,  _
                    ByVal PhoneNum As Integer,  _
                    ByVal PhoneNumExtension As Integer,  _
                    ByVal FaxNum As Integer,  _
                    ByVal FaxNumAreaCode As Integer,  _
                    ByVal userState As Object)
            If (Me.CopyContactsRecordOperationCompleted Is Nothing) Then
                Me.CopyContactsRecordOperationCompleted = AddressOf Me.OnCopyContactsRecordOperationCompleted
            End If
            Me.InvokeAsync("CopyContactsRecord", New Object() {CloudID, Id, CustomerNum, RepNum, FirstName, LastName, CompanyId, Email, Description, Line1, Line2, City, State, ZipCode5, ZipCode4, PhoneNumAreaCode, PhoneNum, PhoneNumExtension, FaxNum, FaxNumAreaCode}, Me.CopyContactsRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyContactsRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyContactsRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyContactsRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/CopyContactsRecord1", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CopyContactsRecord1( _
                    ByVal CloudID As Integer,  _
                    ByVal Id As Integer,  _
                    ByVal CustomerNum As Integer,  _
                    ByVal RepNum As Integer,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal CompanyId As Integer,  _
                    ByVal Email As String,  _
                    ByVal Description As String,  _
                    ByVal Line1 As String,  _
                    ByVal Line2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal ZipCode5 As Integer,  _
                    ByVal ZipCode4 As Integer,  _
                    ByVal PhoneNumAreaCode As Integer,  _
                    ByVal PhoneNum As Integer,  _
                    ByVal PhoneNumExtension As Integer,  _
                    ByVal FaxNum As Integer,  _
                    ByVal FaxNumAreaCode As Integer,  _
                    ByVal ProjectID As String)
            Me.Invoke("CopyContactsRecord1", New Object() {CloudID, Id, CustomerNum, RepNum, FirstName, LastName, CompanyId, Email, Description, Line1, Line2, City, State, ZipCode5, ZipCode4, PhoneNumAreaCode, PhoneNum, PhoneNumExtension, FaxNum, FaxNumAreaCode, ProjectID})
        End Sub
        
        '''<remarks/>
        Public Function BeginCopyContactsRecord1( _
                    ByVal CloudID As Integer,  _
                    ByVal Id As Integer,  _
                    ByVal CustomerNum As Integer,  _
                    ByVal RepNum As Integer,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal CompanyId As Integer,  _
                    ByVal Email As String,  _
                    ByVal Description As String,  _
                    ByVal Line1 As String,  _
                    ByVal Line2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal ZipCode5 As Integer,  _
                    ByVal ZipCode4 As Integer,  _
                    ByVal PhoneNumAreaCode As Integer,  _
                    ByVal PhoneNum As Integer,  _
                    ByVal PhoneNumExtension As Integer,  _
                    ByVal FaxNum As Integer,  _
                    ByVal FaxNumAreaCode As Integer,  _
                    ByVal ProjectID As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CopyContactsRecord1", New Object() {CloudID, Id, CustomerNum, RepNum, FirstName, LastName, CompanyId, Email, Description, Line1, Line2, City, State, ZipCode5, ZipCode4, PhoneNumAreaCode, PhoneNum, PhoneNumExtension, FaxNum, FaxNumAreaCode, ProjectID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndCopyContactsRecord1(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyContactsRecord1Async( _
                    ByVal CloudID As Integer,  _
                    ByVal Id As Integer,  _
                    ByVal CustomerNum As Integer,  _
                    ByVal RepNum As Integer,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal CompanyId As Integer,  _
                    ByVal Email As String,  _
                    ByVal Description As String,  _
                    ByVal Line1 As String,  _
                    ByVal Line2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal ZipCode5 As Integer,  _
                    ByVal ZipCode4 As Integer,  _
                    ByVal PhoneNumAreaCode As Integer,  _
                    ByVal PhoneNum As Integer,  _
                    ByVal PhoneNumExtension As Integer,  _
                    ByVal FaxNum As Integer,  _
                    ByVal FaxNumAreaCode As Integer,  _
                    ByVal ProjectID As String)
            Me.CopyContactsRecord1Async(CloudID, Id, CustomerNum, RepNum, FirstName, LastName, CompanyId, Email, Description, Line1, Line2, City, State, ZipCode5, ZipCode4, PhoneNumAreaCode, PhoneNum, PhoneNumExtension, FaxNum, FaxNumAreaCode, ProjectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyContactsRecord1Async( _
                    ByVal CloudID As Integer,  _
                    ByVal Id As Integer,  _
                    ByVal CustomerNum As Integer,  _
                    ByVal RepNum As Integer,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal CompanyId As Integer,  _
                    ByVal Email As String,  _
                    ByVal Description As String,  _
                    ByVal Line1 As String,  _
                    ByVal Line2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal ZipCode5 As Integer,  _
                    ByVal ZipCode4 As Integer,  _
                    ByVal PhoneNumAreaCode As Integer,  _
                    ByVal PhoneNum As Integer,  _
                    ByVal PhoneNumExtension As Integer,  _
                    ByVal FaxNum As Integer,  _
                    ByVal FaxNumAreaCode As Integer,  _
                    ByVal ProjectID As String,  _
                    ByVal userState As Object)
            If (Me.CopyContactsRecord1OperationCompleted Is Nothing) Then
                Me.CopyContactsRecord1OperationCompleted = AddressOf Me.OnCopyContactsRecord1OperationCompleted
            End If
            Me.InvokeAsync("CopyContactsRecord1", New Object() {CloudID, Id, CustomerNum, RepNum, FirstName, LastName, CompanyId, Email, Description, Line1, Line2, City, State, ZipCode5, ZipCode4, PhoneNumAreaCode, PhoneNum, PhoneNumExtension, FaxNum, FaxNumAreaCode, ProjectID}, Me.CopyContactsRecord1OperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyContactsRecord1OperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyContactsRecord1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyContactsRecord1Completed(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadACChillerProcesses", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadACChillerProcesses(ByVal CloudID As Integer, ByVal UniqueCode As String) As ACChillerProcesses()
            Dim results() As Object = Me.Invoke("LoadACChillerProcesses", New Object() {CloudID, UniqueCode})
            Return CType(results(0),ACChillerProcesses())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadACChillerProcesses(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadACChillerProcesses", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadACChillerProcesses(ByVal asyncResult As System.IAsyncResult) As ACChillerProcesses()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),ACChillerProcesses())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadACChillerProcessesAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadACChillerProcessesAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadACChillerProcessesAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadACChillerProcessesOperationCompleted Is Nothing) Then
                Me.LoadACChillerProcessesOperationCompleted = AddressOf Me.OnLoadACChillerProcessesOperationCompleted
            End If
            Me.InvokeAsync("LoadACChillerProcesses", New Object() {CloudID, UniqueCode}, Me.LoadACChillerProcessesOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadACChillerProcessesOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadACChillerProcessesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadACChillerProcessesCompleted(Me, New LoadACChillerProcessesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadWCChillerProcesses", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadWCChillerProcesses(ByVal CloudID As Integer, ByVal UniqueCode As String) As WCChillerProcesses()
            Dim results() As Object = Me.Invoke("LoadWCChillerProcesses", New Object() {CloudID, UniqueCode})
            Return CType(results(0),WCChillerProcesses())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadWCChillerProcesses(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadWCChillerProcesses", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadWCChillerProcesses(ByVal asyncResult As System.IAsyncResult) As WCChillerProcesses()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),WCChillerProcesses())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadWCChillerProcessesAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadWCChillerProcessesAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadWCChillerProcessesAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadWCChillerProcessesOperationCompleted Is Nothing) Then
                Me.LoadWCChillerProcessesOperationCompleted = AddressOf Me.OnLoadWCChillerProcessesOperationCompleted
            End If
            Me.InvokeAsync("LoadWCChillerProcesses", New Object() {CloudID, UniqueCode}, Me.LoadWCChillerProcessesOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadWCChillerProcessesOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadWCChillerProcessesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadWCChillerProcessesCompleted(Me, New LoadWCChillerProcessesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadUnitCoolerProcesses", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadUnitCoolerProcesses(ByVal CloudID As Integer, ByVal UniqueCode As String) As UnitCoolerProcesses()
            Dim results() As Object = Me.Invoke("LoadUnitCoolerProcesses", New Object() {CloudID, UniqueCode})
            Return CType(results(0),UnitCoolerProcesses())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadUnitCoolerProcesses(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadUnitCoolerProcesses", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadUnitCoolerProcesses(ByVal asyncResult As System.IAsyncResult) As UnitCoolerProcesses()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),UnitCoolerProcesses())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadUnitCoolerProcessesAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadUnitCoolerProcessesAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadUnitCoolerProcessesAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadUnitCoolerProcessesOperationCompleted Is Nothing) Then
                Me.LoadUnitCoolerProcessesOperationCompleted = AddressOf Me.OnLoadUnitCoolerProcessesOperationCompleted
            End If
            Me.InvokeAsync("LoadUnitCoolerProcesses", New Object() {CloudID, UniqueCode}, Me.LoadUnitCoolerProcessesOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadUnitCoolerProcessesOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadUnitCoolerProcessesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadUnitCoolerProcessesCompleted(Me, New LoadUnitCoolerProcessesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadUnitCooler", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadUnitCooler(ByVal CloudID As Integer, ByVal UniqueCode As String) As UnitCooler()
            Dim results() As Object = Me.Invoke("LoadUnitCooler", New Object() {CloudID, UniqueCode})
            Return CType(results(0),UnitCooler())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadUnitCooler(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadUnitCooler", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadUnitCooler(ByVal asyncResult As System.IAsyncResult) As UnitCooler()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),UnitCooler())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadUnitCoolerAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadUnitCoolerAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadUnitCoolerAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadUnitCoolerOperationCompleted Is Nothing) Then
                Me.LoadUnitCoolerOperationCompleted = AddressOf Me.OnLoadUnitCoolerOperationCompleted
            End If
            Me.InvokeAsync("LoadUnitCooler", New Object() {CloudID, UniqueCode}, Me.LoadUnitCoolerOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadUnitCoolerOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadUnitCoolerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadUnitCoolerCompleted(Me, New LoadUnitCoolerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadCompaniesRecords", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadCompaniesRecords(ByVal CloudID As Integer, ByVal UniqueCode As String) As Companies()
            Dim results() As Object = Me.Invoke("LoadCompaniesRecords", New Object() {CloudID, UniqueCode})
            Return CType(results(0),Companies())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadCompaniesRecords(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadCompaniesRecords", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadCompaniesRecords(ByVal asyncResult As System.IAsyncResult) As Companies()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Companies())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadCompaniesRecordsAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadCompaniesRecordsAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadCompaniesRecordsAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadCompaniesRecordsOperationCompleted Is Nothing) Then
                Me.LoadCompaniesRecordsOperationCompleted = AddressOf Me.OnLoadCompaniesRecordsOperationCompleted
            End If
            Me.InvokeAsync("LoadCompaniesRecords", New Object() {CloudID, UniqueCode}, Me.LoadCompaniesRecordsOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadCompaniesRecordsOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadCompaniesRecordsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadCompaniesRecordsCompleted(Me, New LoadCompaniesRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadContactsRecords", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadContactsRecords(ByVal CloudID As Integer, ByVal UniqueCode As String) As Contacts()
            Dim results() As Object = Me.Invoke("LoadContactsRecords", New Object() {CloudID, UniqueCode})
            Return CType(results(0),Contacts())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadContactsRecords(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadContactsRecords", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadContactsRecords(ByVal asyncResult As System.IAsyncResult) As Contacts()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Contacts())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadContactsRecordsAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadContactsRecordsAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadContactsRecordsAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadContactsRecordsOperationCompleted Is Nothing) Then
                Me.LoadContactsRecordsOperationCompleted = AddressOf Me.OnLoadContactsRecordsOperationCompleted
            End If
            Me.InvokeAsync("LoadContactsRecords", New Object() {CloudID, UniqueCode}, Me.LoadContactsRecordsOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadContactsRecordsOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadContactsRecordsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadContactsRecordsCompleted(Me, New LoadContactsRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadContactsRecords1", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadContactsRecords1(ByVal CloudID As Integer, ByVal UniqueCode As String) As Contacts1()
            Dim results() As Object = Me.Invoke("LoadContactsRecords1", New Object() {CloudID, UniqueCode})
            Return CType(results(0),Contacts1())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadContactsRecords1(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadContactsRecords1", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadContactsRecords1(ByVal asyncResult As System.IAsyncResult) As Contacts1()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Contacts1())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadContactsRecords1Async(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadContactsRecords1Async(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadContactsRecords1Async(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadContactsRecords1OperationCompleted Is Nothing) Then
                Me.LoadContactsRecords1OperationCompleted = AddressOf Me.OnLoadContactsRecords1OperationCompleted
            End If
            Me.InvokeAsync("LoadContactsRecords1", New Object() {CloudID, UniqueCode}, Me.LoadContactsRecords1OperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadContactsRecords1OperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadContactsRecords1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadContactsRecords1Completed(Me, New LoadContactsRecords1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadProjectContactsRecords", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadProjectContactsRecords(ByVal CloudID As Integer, ByVal UniqueCode As String) As ProjectContacts()
            Dim results() As Object = Me.Invoke("LoadProjectContactsRecords", New Object() {CloudID, UniqueCode})
            Return CType(results(0),ProjectContacts())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadProjectContactsRecords(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadProjectContactsRecords", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadProjectContactsRecords(ByVal asyncResult As System.IAsyncResult) As ProjectContacts()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),ProjectContacts())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadProjectContactsRecordsAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadProjectContactsRecordsAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadProjectContactsRecordsAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadProjectContactsRecordsOperationCompleted Is Nothing) Then
                Me.LoadProjectContactsRecordsOperationCompleted = AddressOf Me.OnLoadProjectContactsRecordsOperationCompleted
            End If
            Me.InvokeAsync("LoadProjectContactsRecords", New Object() {CloudID, UniqueCode}, Me.LoadProjectContactsRecordsOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadProjectContactsRecordsOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadProjectContactsRecordsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadProjectContactsRecordsCompleted(Me, New LoadProjectContactsRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadOrderEntryContacts", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadOrderEntryContacts(ByVal CloudID As String, ByVal UniqueCode As String) As OrderEntryContacts()
            Dim results() As Object = Me.Invoke("LoadOrderEntryContacts", New Object() {CloudID, UniqueCode})
            Return CType(results(0),OrderEntryContacts())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadOrderEntryContacts(ByVal CloudID As String, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadOrderEntryContacts", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadOrderEntryContacts(ByVal asyncResult As System.IAsyncResult) As OrderEntryContacts()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),OrderEntryContacts())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadOrderEntryContactsAsync(ByVal CloudID As String, ByVal UniqueCode As String)
            Me.LoadOrderEntryContactsAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadOrderEntryContactsAsync(ByVal CloudID As String, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadOrderEntryContactsOperationCompleted Is Nothing) Then
                Me.LoadOrderEntryContactsOperationCompleted = AddressOf Me.OnLoadOrderEntryContactsOperationCompleted
            End If
            Me.InvokeAsync("LoadOrderEntryContacts", New Object() {CloudID, UniqueCode}, Me.LoadOrderEntryContactsOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadOrderEntryContactsOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadOrderEntryContactsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadOrderEntryContactsCompleted(Me, New LoadOrderEntryContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadSpecialOptions", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadSpecialOptions(ByVal CloudID As Integer, ByVal UniqueCode As String) As SpecialOptions()
            Dim results() As Object = Me.Invoke("LoadSpecialOptions", New Object() {CloudID, UniqueCode})
            Return CType(results(0),SpecialOptions())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadSpecialOptions(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadSpecialOptions", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadSpecialOptions(ByVal asyncResult As System.IAsyncResult) As SpecialOptions()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),SpecialOptions())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadSpecialOptionsAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadSpecialOptionsAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadSpecialOptionsAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadSpecialOptionsOperationCompleted Is Nothing) Then
                Me.LoadSpecialOptionsOperationCompleted = AddressOf Me.OnLoadSpecialOptionsOperationCompleted
            End If
            Me.InvokeAsync("LoadSpecialOptions", New Object() {CloudID, UniqueCode}, Me.LoadSpecialOptionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadSpecialOptionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadSpecialOptionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadSpecialOptionsCompleted(Me, New LoadSpecialOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadRatingEquipment", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadRatingEquipment(ByVal CloudID As Integer, ByVal UniqueCode As String) As RatingEquipment()
            Dim results() As Object = Me.Invoke("LoadRatingEquipment", New Object() {CloudID, UniqueCode})
            Return CType(results(0),RatingEquipment())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadRatingEquipment(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadRatingEquipment", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadRatingEquipment(ByVal asyncResult As System.IAsyncResult) As RatingEquipment()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),RatingEquipment())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadRatingEquipmentAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadRatingEquipmentAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadRatingEquipmentAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadRatingEquipmentOperationCompleted Is Nothing) Then
                Me.LoadRatingEquipmentOperationCompleted = AddressOf Me.OnLoadRatingEquipmentOperationCompleted
            End If
            Me.InvokeAsync("LoadRatingEquipment", New Object() {CloudID, UniqueCode}, Me.LoadRatingEquipmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadRatingEquipmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadRatingEquipmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadRatingEquipmentCompleted(Me, New LoadRatingEquipmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadPumpPackage", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadPumpPackage(ByVal CloudID As Integer, ByVal UniqueCode As String) As PumpPackage()
            Dim results() As Object = Me.Invoke("LoadPumpPackage", New Object() {CloudID, UniqueCode})
            Return CType(results(0),PumpPackage())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadPumpPackage(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadPumpPackage", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadPumpPackage(ByVal asyncResult As System.IAsyncResult) As PumpPackage()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),PumpPackage())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadPumpPackageAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadPumpPackageAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadPumpPackageAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadPumpPackageOperationCompleted Is Nothing) Then
                Me.LoadPumpPackageOperationCompleted = AddressOf Me.OnLoadPumpPackageOperationCompleted
            End If
            Me.InvokeAsync("LoadPumpPackage", New Object() {CloudID, UniqueCode}, Me.LoadPumpPackageOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadPumpPackageOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadPumpPackageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadPumpPackageCompleted(Me, New LoadPumpPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadProjects", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadProjects(ByVal CloudID As Integer, ByVal UniqueCode As String) As Projects()
            Dim results() As Object = Me.Invoke("LoadProjects", New Object() {CloudID, UniqueCode})
            Return CType(results(0),Projects())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadProjects(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadProjects", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadProjects(ByVal asyncResult As System.IAsyncResult) As Projects()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Projects())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadProjectsAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadProjectsAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadProjectsAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadProjectsOperationCompleted Is Nothing) Then
                Me.LoadProjectsOperationCompleted = AddressOf Me.OnLoadProjectsOperationCompleted
            End If
            Me.InvokeAsync("LoadProjects", New Object() {CloudID, UniqueCode}, Me.LoadProjectsOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadProjectsOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadProjectsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadProjectsCompleted(Me, New LoadProjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadProductCooler", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadProductCooler(ByVal CloudID As Integer, ByVal UniqueCode As String) As ProductCooler()
            Dim results() As Object = Me.Invoke("LoadProductCooler", New Object() {CloudID, UniqueCode})
            Return CType(results(0),ProductCooler())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadProductCooler(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadProductCooler", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadProductCooler(ByVal asyncResult As System.IAsyncResult) As ProductCooler()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),ProductCooler())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadProductCoolerAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadProductCoolerAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadProductCoolerAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadProductCoolerOperationCompleted Is Nothing) Then
                Me.LoadProductCoolerOperationCompleted = AddressOf Me.OnLoadProductCoolerOperationCompleted
            End If
            Me.InvokeAsync("LoadProductCooler", New Object() {CloudID, UniqueCode}, Me.LoadProductCoolerOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadProductCoolerOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadProductCoolerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadProductCoolerCompleted(Me, New LoadProductCoolerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadProcessSpecific", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadProcessSpecific(ByVal CloudID As Integer, ByVal UniqueCode As String) As ProcessSpecific()
            Dim results() As Object = Me.Invoke("LoadProcessSpecific", New Object() {CloudID, UniqueCode})
            Return CType(results(0),ProcessSpecific())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadProcessSpecific(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadProcessSpecific", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadProcessSpecific(ByVal asyncResult As System.IAsyncResult) As ProcessSpecific()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),ProcessSpecific())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadProcessSpecificAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadProcessSpecificAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadProcessSpecificAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadProcessSpecificOperationCompleted Is Nothing) Then
                Me.LoadProcessSpecificOperationCompleted = AddressOf Me.OnLoadProcessSpecificOperationCompleted
            End If
            Me.InvokeAsync("LoadProcessSpecific", New Object() {CloudID, UniqueCode}, Me.LoadProcessSpecificOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadProcessSpecificOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadProcessSpecificCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadProcessSpecificCompleted(Me, New LoadProcessSpecificCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadProcesses", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadProcesses(ByVal CloudID As Integer, ByVal UniqueCode As String) As Processes()
            Dim results() As Object = Me.Invoke("LoadProcesses", New Object() {CloudID, UniqueCode})
            Return CType(results(0),Processes())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadProcesses(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadProcesses", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadProcesses(ByVal asyncResult As System.IAsyncResult) As Processes()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Processes())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadProcessesAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadProcessesAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadProcessesAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadProcessesOperationCompleted Is Nothing) Then
                Me.LoadProcessesOperationCompleted = AddressOf Me.OnLoadProcessesOperationCompleted
            End If
            Me.InvokeAsync("LoadProcesses", New Object() {CloudID, UniqueCode}, Me.LoadProcessesOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadProcessesOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadProcessesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadProcessesCompleted(Me, New LoadProcessesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadProcessEquip", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadProcessEquip(ByVal CloudID As Integer, ByVal UniqueCode As String) As ProcessEquip()
            Dim results() As Object = Me.Invoke("LoadProcessEquip", New Object() {CloudID, UniqueCode})
            Return CType(results(0),ProcessEquip())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadProcessEquip(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadProcessEquip", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadProcessEquip(ByVal asyncResult As System.IAsyncResult) As ProcessEquip()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),ProcessEquip())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadProcessEquipAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadProcessEquipAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadProcessEquipAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadProcessEquipOperationCompleted Is Nothing) Then
                Me.LoadProcessEquipOperationCompleted = AddressOf Me.OnLoadProcessEquipOperationCompleted
            End If
            Me.InvokeAsync("LoadProcessEquip", New Object() {CloudID, UniqueCode}, Me.LoadProcessEquipOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadProcessEquipOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadProcessEquipCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadProcessEquipCompleted(Me, New LoadProcessEquipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadOtherEquipmentCosts", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadOtherEquipmentCosts(ByVal CloudID As Integer, ByVal UniqueCode As String) As OtherEquipmentCosts()
            Dim results() As Object = Me.Invoke("LoadOtherEquipmentCosts", New Object() {CloudID, UniqueCode})
            Return CType(results(0),OtherEquipmentCosts())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadOtherEquipmentCosts(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadOtherEquipmentCosts", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadOtherEquipmentCosts(ByVal asyncResult As System.IAsyncResult) As OtherEquipmentCosts()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),OtherEquipmentCosts())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadOtherEquipmentCostsAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadOtherEquipmentCostsAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadOtherEquipmentCostsAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadOtherEquipmentCostsOperationCompleted Is Nothing) Then
                Me.LoadOtherEquipmentCostsOperationCompleted = AddressOf Me.OnLoadOtherEquipmentCostsOperationCompleted
            End If
            Me.InvokeAsync("LoadOtherEquipmentCosts", New Object() {CloudID, UniqueCode}, Me.LoadOtherEquipmentCostsOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadOtherEquipmentCostsOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadOtherEquipmentCostsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadOtherEquipmentCostsCompleted(Me, New LoadOtherEquipmentCostsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadFluidCoolerProcesses", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadFluidCoolerProcesses(ByVal CloudID As Integer, ByVal UniqueCode As String) As FluidCoolerProcesses()
            Dim results() As Object = Me.Invoke("LoadFluidCoolerProcesses", New Object() {CloudID, UniqueCode})
            Return CType(results(0),FluidCoolerProcesses())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadFluidCoolerProcesses(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadFluidCoolerProcesses", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadFluidCoolerProcesses(ByVal asyncResult As System.IAsyncResult) As FluidCoolerProcesses()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),FluidCoolerProcesses())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadFluidCoolerProcessesAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadFluidCoolerProcessesAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadFluidCoolerProcessesAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadFluidCoolerProcessesOperationCompleted Is Nothing) Then
                Me.LoadFluidCoolerProcessesOperationCompleted = AddressOf Me.OnLoadFluidCoolerProcessesOperationCompleted
            End If
            Me.InvokeAsync("LoadFluidCoolerProcesses", New Object() {CloudID, UniqueCode}, Me.LoadFluidCoolerProcessesOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadFluidCoolerProcessesOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadFluidCoolerProcessesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadFluidCoolerProcessesCompleted(Me, New LoadFluidCoolerProcessesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadFluidCooler", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadFluidCooler(ByVal CloudID As Integer, ByVal UniqueCode As String) As FluidCooler()
            Dim results() As Object = Me.Invoke("LoadFluidCooler", New Object() {CloudID, UniqueCode})
            Return CType(results(0),FluidCooler())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadFluidCooler(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadFluidCooler", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadFluidCooler(ByVal asyncResult As System.IAsyncResult) As FluidCooler()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),FluidCooler())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadFluidCoolerAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadFluidCoolerAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadFluidCoolerAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadFluidCoolerOperationCompleted Is Nothing) Then
                Me.LoadFluidCoolerOperationCompleted = AddressOf Me.OnLoadFluidCoolerOperationCompleted
            End If
            Me.InvokeAsync("LoadFluidCooler", New Object() {CloudID, UniqueCode}, Me.LoadFluidCoolerOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadFluidCoolerOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadFluidCoolerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadFluidCoolerCompleted(Me, New LoadFluidCoolerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadEvapChillerProcesses", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadEvapChillerProcesses(ByVal CloudID As Integer, ByVal UniqueCode As String) As EvapChillerProcesses()
            Dim results() As Object = Me.Invoke("LoadEvapChillerProcesses", New Object() {CloudID, UniqueCode})
            Return CType(results(0),EvapChillerProcesses())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadEvapChillerProcesses(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadEvapChillerProcesses", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadEvapChillerProcesses(ByVal asyncResult As System.IAsyncResult) As EvapChillerProcesses()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),EvapChillerProcesses())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadEvapChillerProcessesAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadEvapChillerProcessesAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadEvapChillerProcessesAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadEvapChillerProcessesOperationCompleted Is Nothing) Then
                Me.LoadEvapChillerProcessesOperationCompleted = AddressOf Me.OnLoadEvapChillerProcessesOperationCompleted
            End If
            Me.InvokeAsync("LoadEvapChillerProcesses", New Object() {CloudID, UniqueCode}, Me.LoadEvapChillerProcessesOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadEvapChillerProcessesOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadEvapChillerProcessesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadEvapChillerProcessesCompleted(Me, New LoadEvapChillerProcessesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadEquipmentOptions", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadEquipmentOptions(ByVal CloudID As Integer, ByVal UniqueCode As String) As EquipmentOptions()
            Dim results() As Object = Me.Invoke("LoadEquipmentOptions", New Object() {CloudID, UniqueCode})
            Return CType(results(0),EquipmentOptions())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadEquipmentOptions(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadEquipmentOptions", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadEquipmentOptions(ByVal asyncResult As System.IAsyncResult) As EquipmentOptions()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),EquipmentOptions())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadEquipmentOptionsAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadEquipmentOptionsAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadEquipmentOptionsAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadEquipmentOptionsOperationCompleted Is Nothing) Then
                Me.LoadEquipmentOptionsOperationCompleted = AddressOf Me.OnLoadEquipmentOptionsOperationCompleted
            End If
            Me.InvokeAsync("LoadEquipmentOptions", New Object() {CloudID, UniqueCode}, Me.LoadEquipmentOptionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadEquipmentOptionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadEquipmentOptionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadEquipmentOptionsCompleted(Me, New LoadEquipmentOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadEquipment", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadEquipment(ByVal CloudID As Integer, ByVal UniqueCode As String) As Equipment()
            Dim results() As Object = Me.Invoke("LoadEquipment", New Object() {CloudID, UniqueCode})
            Return CType(results(0),Equipment())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadEquipment(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadEquipment", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadEquipment(ByVal asyncResult As System.IAsyncResult) As Equipment()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Equipment())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadEquipmentAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadEquipmentAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadEquipmentAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadEquipmentOperationCompleted Is Nothing) Then
                Me.LoadEquipmentOperationCompleted = AddressOf Me.OnLoadEquipmentOperationCompleted
            End If
            Me.InvokeAsync("LoadEquipment", New Object() {CloudID, UniqueCode}, Me.LoadEquipmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadEquipmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadEquipmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadEquipmentCompleted(Me, New LoadEquipmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadEquipment2", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadEquipment2(ByVal CloudID As Integer, ByVal UniqueCode As String) As Equipment2()
            Dim results() As Object = Me.Invoke("LoadEquipment2", New Object() {CloudID, UniqueCode})
            Return CType(results(0),Equipment2())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadEquipment2(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadEquipment2", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadEquipment2(ByVal asyncResult As System.IAsyncResult) As Equipment2()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Equipment2())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadEquipment2Async(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadEquipment2Async(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadEquipment2Async(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadEquipment2OperationCompleted Is Nothing) Then
                Me.LoadEquipment2OperationCompleted = AddressOf Me.OnLoadEquipment2OperationCompleted
            End If
            Me.InvokeAsync("LoadEquipment2", New Object() {CloudID, UniqueCode}, Me.LoadEquipment2OperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadEquipment2OperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadEquipment2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadEquipment2Completed(Me, New LoadEquipment2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadEquipment3", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadEquipment3(ByVal CloudID As Integer, ByVal UniqueCode As String) As Equipment3()
            Dim results() As Object = Me.Invoke("LoadEquipment3", New Object() {CloudID, UniqueCode})
            Return CType(results(0),Equipment3())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadEquipment3(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadEquipment3", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadEquipment3(ByVal asyncResult As System.IAsyncResult) As Equipment3()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Equipment3())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadEquipment3Async(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadEquipment3Async(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadEquipment3Async(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadEquipment3OperationCompleted Is Nothing) Then
                Me.LoadEquipment3OperationCompleted = AddressOf Me.OnLoadEquipment3OperationCompleted
            End If
            Me.InvokeAsync("LoadEquipment3", New Object() {CloudID, UniqueCode}, Me.LoadEquipment3OperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadEquipment3OperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadEquipment3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadEquipment3Completed(Me, New LoadEquipment3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadCondensingUnitProcesses", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadCondensingUnitProcesses(ByVal CloudID As Integer, ByVal UniqueCode As String) As CondensingUnitProcesses()
            Dim results() As Object = Me.Invoke("LoadCondensingUnitProcesses", New Object() {CloudID, UniqueCode})
            Return CType(results(0),CondensingUnitProcesses())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadCondensingUnitProcesses(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadCondensingUnitProcesses", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadCondensingUnitProcesses(ByVal asyncResult As System.IAsyncResult) As CondensingUnitProcesses()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),CondensingUnitProcesses())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadCondensingUnitProcessesAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadCondensingUnitProcessesAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadCondensingUnitProcessesAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadCondensingUnitProcessesOperationCompleted Is Nothing) Then
                Me.LoadCondensingUnitProcessesOperationCompleted = AddressOf Me.OnLoadCondensingUnitProcessesOperationCompleted
            End If
            Me.InvokeAsync("LoadCondensingUnitProcesses", New Object() {CloudID, UniqueCode}, Me.LoadCondensingUnitProcessesOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadCondensingUnitProcessesOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadCondensingUnitProcessesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadCondensingUnitProcessesCompleted(Me, New LoadCondensingUnitProcessesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadCondensingUnits", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadCondensingUnits(ByVal CloudID As Integer, ByVal UniqueCode As String) As CondensingUnit()
            Dim results() As Object = Me.Invoke("LoadCondensingUnits", New Object() {CloudID, UniqueCode})
            Return CType(results(0),CondensingUnit())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadCondensingUnits(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadCondensingUnits", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadCondensingUnits(ByVal asyncResult As System.IAsyncResult) As CondensingUnit()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),CondensingUnit())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadCondensingUnitsAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadCondensingUnitsAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadCondensingUnitsAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadCondensingUnitsOperationCompleted Is Nothing) Then
                Me.LoadCondensingUnitsOperationCompleted = AddressOf Me.OnLoadCondensingUnitsOperationCompleted
            End If
            Me.InvokeAsync("LoadCondensingUnits", New Object() {CloudID, UniqueCode}, Me.LoadCondensingUnitsOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadCondensingUnitsOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadCondensingUnitsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadCondensingUnitsCompleted(Me, New LoadCondensingUnitsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadCondenserProcesses", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadCondenserProcesses(ByVal CloudID As Integer, ByVal UniqueCode As String) As CondenserProcesses()
            Dim results() As Object = Me.Invoke("LoadCondenserProcesses", New Object() {CloudID, UniqueCode})
            Return CType(results(0),CondenserProcesses())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadCondenserProcesses(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadCondenserProcesses", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadCondenserProcesses(ByVal asyncResult As System.IAsyncResult) As CondenserProcesses()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),CondenserProcesses())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadCondenserProcessesAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadCondenserProcessesAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadCondenserProcessesAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadCondenserProcessesOperationCompleted Is Nothing) Then
                Me.LoadCondenserProcessesOperationCompleted = AddressOf Me.OnLoadCondenserProcessesOperationCompleted
            End If
            Me.InvokeAsync("LoadCondenserProcesses", New Object() {CloudID, UniqueCode}, Me.LoadCondenserProcessesOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadCondenserProcessesOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadCondenserProcessesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadCondenserProcessesCompleted(Me, New LoadCondenserProcessesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadCondensers", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadCondensers(ByVal CloudID As Integer, ByVal UniqueCode As String) As Condenser()
            Dim results() As Object = Me.Invoke("LoadCondensers", New Object() {CloudID, UniqueCode})
            Return CType(results(0),Condenser())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadCondensers(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadCondensers", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadCondensers(ByVal asyncResult As System.IAsyncResult) As Condenser()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Condenser())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadCondensersAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadCondensersAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadCondensersAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadCondensersOperationCompleted Is Nothing) Then
                Me.LoadCondensersOperationCompleted = AddressOf Me.OnLoadCondensersOperationCompleted
            End If
            Me.InvokeAsync("LoadCondensers", New Object() {CloudID, UniqueCode}, Me.LoadCondensersOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadCondensersOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadCondensersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadCondensersCompleted(Me, New LoadCondensersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/LoadChillers", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadChillers(ByVal CloudID As Integer, ByVal UniqueCode As String) As Chiller()
            Dim results() As Object = Me.Invoke("LoadChillers", New Object() {CloudID, UniqueCode})
            Return CType(results(0),Chiller())
        End Function
        
        '''<remarks/>
        Public Function BeginLoadChillers(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadChillers", New Object() {CloudID, UniqueCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadChillers(ByVal asyncResult As System.IAsyncResult) As Chiller()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Chiller())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadChillersAsync(ByVal CloudID As Integer, ByVal UniqueCode As String)
            Me.LoadChillersAsync(CloudID, UniqueCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadChillersAsync(ByVal CloudID As Integer, ByVal UniqueCode As String, ByVal userState As Object)
            If (Me.LoadChillersOperationCompleted Is Nothing) Then
                Me.LoadChillersOperationCompleted = AddressOf Me.OnLoadChillersOperationCompleted
            End If
            Me.InvokeAsync("LoadChillers", New Object() {CloudID, UniqueCode}, Me.LoadChillersOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadChillersOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadChillersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadChillersCompleted(Me, New LoadChillersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/GetUsersToShareWith", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUsersToShareWith(ByVal UserName As String, ByVal CompanyCode As String, ByVal SameCompany As Boolean) As UserShareList()
            Dim results() As Object = Me.Invoke("GetUsersToShareWith", New Object() {UserName, CompanyCode, SameCompany})
            Return CType(results(0),UserShareList())
        End Function
        
        '''<remarks/>
        Public Function BeginGetUsersToShareWith(ByVal UserName As String, ByVal CompanyCode As String, ByVal SameCompany As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetUsersToShareWith", New Object() {UserName, CompanyCode, SameCompany}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetUsersToShareWith(ByVal asyncResult As System.IAsyncResult) As UserShareList()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),UserShareList())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUsersToShareWithAsync(ByVal UserName As String, ByVal CompanyCode As String, ByVal SameCompany As Boolean)
            Me.GetUsersToShareWithAsync(UserName, CompanyCode, SameCompany, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUsersToShareWithAsync(ByVal UserName As String, ByVal CompanyCode As String, ByVal SameCompany As Boolean, ByVal userState As Object)
            If (Me.GetUsersToShareWithOperationCompleted Is Nothing) Then
                Me.GetUsersToShareWithOperationCompleted = AddressOf Me.OnGetUsersToShareWithOperationCompleted
            End If
            Me.InvokeAsync("GetUsersToShareWith", New Object() {UserName, CompanyCode, SameCompany}, Me.GetUsersToShareWithOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUsersToShareWithOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUsersToShareWithCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUsersToShareWithCompleted(Me, New GetUsersToShareWithCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/GetCloudProjectsUserCanAccess", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCloudProjectsUserCanAccess(ByVal userName As String, ByVal isRAE As Boolean, ByVal userFilter As String, ByVal startDate As String, ByVal endDate As String) As ProjectList()
            Dim results() As Object = Me.Invoke("GetCloudProjectsUserCanAccess", New Object() {userName, isRAE, userFilter, startDate, endDate})
            Return CType(results(0),ProjectList())
        End Function
        
        '''<remarks/>
        Public Function BeginGetCloudProjectsUserCanAccess(ByVal userName As String, ByVal isRAE As Boolean, ByVal userFilter As String, ByVal startDate As String, ByVal endDate As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCloudProjectsUserCanAccess", New Object() {userName, isRAE, userFilter, startDate, endDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCloudProjectsUserCanAccess(ByVal asyncResult As System.IAsyncResult) As ProjectList()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),ProjectList())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCloudProjectsUserCanAccessAsync(ByVal userName As String, ByVal isRAE As Boolean, ByVal userFilter As String, ByVal startDate As String, ByVal endDate As String)
            Me.GetCloudProjectsUserCanAccessAsync(userName, isRAE, userFilter, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCloudProjectsUserCanAccessAsync(ByVal userName As String, ByVal isRAE As Boolean, ByVal userFilter As String, ByVal startDate As String, ByVal endDate As String, ByVal userState As Object)
            If (Me.GetCloudProjectsUserCanAccessOperationCompleted Is Nothing) Then
                Me.GetCloudProjectsUserCanAccessOperationCompleted = AddressOf Me.OnGetCloudProjectsUserCanAccessOperationCompleted
            End If
            Me.InvokeAsync("GetCloudProjectsUserCanAccess", New Object() {userName, isRAE, userFilter, startDate, endDate}, Me.GetCloudProjectsUserCanAccessOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCloudProjectsUserCanAccessOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCloudProjectsUserCanAccessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCloudProjectsUserCanAccessCompleted(Me, New GetCloudProjectsUserCanAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://raesolutions.net/ShareOrUnshareProjects", RequestNamespace:="http://raesolutions.net/", ResponseNamespace:="http://raesolutions.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ShareOrUnshareProjects(ByVal UserName As String, ByVal ShareWithUsername As String, ByVal shareWith As Boolean)
            Me.Invoke("ShareOrUnshareProjects", New Object() {UserName, ShareWithUsername, shareWith})
        End Sub
        
        '''<remarks/>
        Public Function BeginShareOrUnshareProjects(ByVal UserName As String, ByVal ShareWithUsername As String, ByVal shareWith As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ShareOrUnshareProjects", New Object() {UserName, ShareWithUsername, shareWith}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndShareOrUnshareProjects(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ShareOrUnshareProjectsAsync(ByVal UserName As String, ByVal ShareWithUsername As String, ByVal shareWith As Boolean)
            Me.ShareOrUnshareProjectsAsync(UserName, ShareWithUsername, shareWith, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ShareOrUnshareProjectsAsync(ByVal UserName As String, ByVal ShareWithUsername As String, ByVal shareWith As Boolean, ByVal userState As Object)
            If (Me.ShareOrUnshareProjectsOperationCompleted Is Nothing) Then
                Me.ShareOrUnshareProjectsOperationCompleted = AddressOf Me.OnShareOrUnshareProjectsOperationCompleted
            End If
            Me.InvokeAsync("ShareOrUnshareProjects", New Object() {UserName, ShareWithUsername, shareWith}, Me.ShareOrUnshareProjectsOperationCompleted, userState)
        End Sub
        
        Private Sub OnShareOrUnshareProjectsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ShareOrUnshareProjectsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ShareOrUnshareProjectsCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class CloudProjectInfo
        
        Private shareGUIDField As String
        
        Private cloudIDField As Integer
        
        '''<remarks/>
        Public Property ShareGUID() As String
            Get
                Return Me.shareGUIDField
            End Get
            Set
                Me.shareGUIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CloudID() As Integer
            Get
                Return Me.cloudIDField
            End Get
            Set
                Me.cloudIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class ProjectList
        
        Private cloudIDField As String
        
        Private userNameField As String
        
        Private companyCodeField As String
        
        Private projectNameField As String
        
        Private createdDTField As Date
        
        '''<remarks/>
        Public Property CloudID() As String
            Get
                Return Me.cloudIDField
            End Get
            Set
                Me.cloudIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserName() As String
            Get
                Return Me.userNameField
            End Get
            Set
                Me.userNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompanyCode() As String
            Get
                Return Me.companyCodeField
            End Get
            Set
                Me.companyCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectName() As String
            Get
                Return Me.projectNameField
            End Get
            Set
                Me.projectNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreatedDT() As Date
            Get
                Return Me.createdDTField
            End Get
            Set
                Me.createdDTField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class UserShareList
        
        Private userNameField As String
        
        Private fullNameField As String
        
        Private accessLevelField As String
        
        Private authorityGroupField As Integer
        
        Private isDisabledField As Boolean
        
        Private emailAddressField As String
        
        Private isAdminField As Boolean
        
        Private companyNumberField As String
        
        Private companyNameField As String
        
        Private userCanSeeProjectsField As Boolean
        
        '''<remarks/>
        Public Property UserName() As String
            Get
                Return Me.userNameField
            End Get
            Set
                Me.userNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FullName() As String
            Get
                Return Me.fullNameField
            End Get
            Set
                Me.fullNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccessLevel() As String
            Get
                Return Me.accessLevelField
            End Get
            Set
                Me.accessLevelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AuthorityGroup() As Integer
            Get
                Return Me.authorityGroupField
            End Get
            Set
                Me.authorityGroupField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property isDisabled() As Boolean
            Get
                Return Me.isDisabledField
            End Get
            Set
                Me.isDisabledField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property emailAddress() As String
            Get
                Return Me.emailAddressField
            End Get
            Set
                Me.emailAddressField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property isAdmin() As Boolean
            Get
                Return Me.isAdminField
            End Get
            Set
                Me.isAdminField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompanyNumber() As String
            Get
                Return Me.companyNumberField
            End Get
            Set
                Me.companyNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompanyName() As String
            Get
                Return Me.companyNameField
            End Get
            Set
                Me.companyNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserCanSeeProjects() As Boolean
            Get
                Return Me.userCanSeeProjectsField
            End Get
            Set
                Me.userCanSeeProjectsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class Chiller
        
        Private equipmentIdField As String
        
        Private revisionField As Decimal
        
        Private capacityField As Single
        
        Private ambientTempField As Single
        
        Private enteringFluidTempField As Single
        
        Private leavingFluidTempField As Single
        
        Private glycolPercentField As Single
        
        Private fluidField As String
        
        Private flowField As Integer
        
        Private refrigerantField As String
        
        Private evaporatorPressureDropField As Single
        
        Private unitKwPerTonField As String
        
        Private compressorAmps1Field As Single
        
        Private compressorAmps2Field As Single
        
        Private compressorQuantity1Field As Single
        
        Private compressorQuantity2Field As Single
        
        Private condenserQuantityField As Single
        
        Private sprayPumpAmpsField As Single
        
        Private blowerAmpsField As Single
        
        Private hasBalanceField As Boolean
        
        '''<remarks/>
        Public Property EquipmentId() As String
            Get
                Return Me.equipmentIdField
            End Get
            Set
                Me.equipmentIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Capacity() As Single
            Get
                Return Me.capacityField
            End Get
            Set
                Me.capacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AmbientTemp() As Single
            Get
                Return Me.ambientTempField
            End Get
            Set
                Me.ambientTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EnteringFluidTemp() As Single
            Get
                Return Me.enteringFluidTempField
            End Get
            Set
                Me.enteringFluidTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LeavingFluidTemp() As Single
            Get
                Return Me.leavingFluidTempField
            End Get
            Set
                Me.leavingFluidTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GlycolPercent() As Single
            Get
                Return Me.glycolPercentField
            End Get
            Set
                Me.glycolPercentField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Fluid() As String
            Get
                Return Me.fluidField
            End Get
            Set
                Me.fluidField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Flow() As Integer
            Get
                Return Me.flowField
            End Get
            Set
                Me.flowField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Refrigerant() As String
            Get
                Return Me.refrigerantField
            End Get
            Set
                Me.refrigerantField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EvaporatorPressureDrop() As Single
            Get
                Return Me.evaporatorPressureDropField
            End Get
            Set
                Me.evaporatorPressureDropField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitKwPerTon() As String
            Get
                Return Me.unitKwPerTonField
            End Get
            Set
                Me.unitKwPerTonField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompressorAmps1() As Single
            Get
                Return Me.compressorAmps1Field
            End Get
            Set
                Me.compressorAmps1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompressorAmps2() As Single
            Get
                Return Me.compressorAmps2Field
            End Get
            Set
                Me.compressorAmps2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompressorQuantity1() As Single
            Get
                Return Me.compressorQuantity1Field
            End Get
            Set
                Me.compressorQuantity1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompressorQuantity2() As Single
            Get
                Return Me.compressorQuantity2Field
            End Get
            Set
                Me.compressorQuantity2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondenserQuantity() As Single
            Get
                Return Me.condenserQuantityField
            End Get
            Set
                Me.condenserQuantityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SprayPumpAmps() As Single
            Get
                Return Me.sprayPumpAmpsField
            End Get
            Set
                Me.sprayPumpAmpsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BlowerAmps() As Single
            Get
                Return Me.blowerAmpsField
            End Get
            Set
                Me.blowerAmpsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property HasBalance() As Boolean
            Get
                Return Me.hasBalanceField
            End Get
            Set
                Me.hasBalanceField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class Condenser
        
        Private equipmentIdField As String
        
        Private revisionField As Decimal
        
        Private ambientTempField As Single
        
        Private refrigerantField As String
        
        Private thrCircuit1Field As Single
        
        Private thrCircuit2Field As Single
        
        Private thrCircuit3Field As Single
        
        Private thrCircuit4Field As Single
        
        Private tempDifferenceField As Single
        
        Private fpiField As Single
        
        Private subCoolingField As Boolean
        
        '''<remarks/>
        Public Property EquipmentId() As String
            Get
                Return Me.equipmentIdField
            End Get
            Set
                Me.equipmentIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AmbientTemp() As Single
            Get
                Return Me.ambientTempField
            End Get
            Set
                Me.ambientTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Refrigerant() As String
            Get
                Return Me.refrigerantField
            End Get
            Set
                Me.refrigerantField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ThrCircuit1() As Single
            Get
                Return Me.thrCircuit1Field
            End Get
            Set
                Me.thrCircuit1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ThrCircuit2() As Single
            Get
                Return Me.thrCircuit2Field
            End Get
            Set
                Me.thrCircuit2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ThrCircuit3() As Single
            Get
                Return Me.thrCircuit3Field
            End Get
            Set
                Me.thrCircuit3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ThrCircuit4() As Single
            Get
                Return Me.thrCircuit4Field
            End Get
            Set
                Me.thrCircuit4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TempDifference() As Single
            Get
                Return Me.tempDifferenceField
            End Get
            Set
                Me.tempDifferenceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Fpi() As Single
            Get
                Return Me.fpiField
            End Get
            Set
                Me.fpiField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SubCooling() As Boolean
            Get
                Return Me.subCoolingField
            End Get
            Set
                Me.subCoolingField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class CondenserProcesses
        
        Private processIDField As String
        
        Private revisionField As Decimal
        
        Private revisionDateField As Date
        
        Private projectRevisionField As Integer
        
        Private processRevisionDescriptionField As String
        
        Private createdByField As String
        
        Private versionField As String
        
        Private notesField As String
        
        Private altitudeField As Single
        
        Private ambientTempField As Single
        
        Private catalogRatingField As Boolean
        
        Private cFMField As Single
        
        Private coilDescField As String
        
        Private coilLengthField As Single
        
        Private coilWidthField As Single
        
        Private extStaticPressureField As Single
        
        Private fanField As String
        
        Private modelField As String
        
        Private nameField As String
        
        Private numFansField As Single
        
        Private refrigerantField As String
        
        Private seriesField As String
        
        Private subCoolingField As Boolean
        
        Private subCoolingPercentageField As Single
        
        Private tdField As Single
        
        Private divisionField As String
        
        '''<remarks/>
        Public Property ProcessID() As String
            Get
                Return Me.processIDField
            End Get
            Set
                Me.processIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RevisionDate() As Date
            Get
                Return Me.revisionDateField
            End Get
            Set
                Me.revisionDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectRevision() As Integer
            Get
                Return Me.projectRevisionField
            End Get
            Set
                Me.projectRevisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProcessRevisionDescription() As String
            Get
                Return Me.processRevisionDescriptionField
            End Get
            Set
                Me.processRevisionDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreatedBy() As String
            Get
                Return Me.createdByField
            End Get
            Set
                Me.createdByField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Version() As String
            Get
                Return Me.versionField
            End Get
            Set
                Me.versionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Notes() As String
            Get
                Return Me.notesField
            End Get
            Set
                Me.notesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Altitude() As Single
            Get
                Return Me.altitudeField
            End Get
            Set
                Me.altitudeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AmbientTemp() As Single
            Get
                Return Me.ambientTempField
            End Get
            Set
                Me.ambientTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CatalogRating() As Boolean
            Get
                Return Me.catalogRatingField
            End Get
            Set
                Me.catalogRatingField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CFM() As Single
            Get
                Return Me.cFMField
            End Get
            Set
                Me.cFMField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoilDesc() As String
            Get
                Return Me.coilDescField
            End Get
            Set
                Me.coilDescField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoilLength() As Single
            Get
                Return Me.coilLengthField
            End Get
            Set
                Me.coilLengthField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoilWidth() As Single
            Get
                Return Me.coilWidthField
            End Get
            Set
                Me.coilWidthField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExtStaticPressure() As Single
            Get
                Return Me.extStaticPressureField
            End Get
            Set
                Me.extStaticPressureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Fan() As String
            Get
                Return Me.fanField
            End Get
            Set
                Me.fanField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumFans() As Single
            Get
                Return Me.numFansField
            End Get
            Set
                Me.numFansField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Refrigerant() As String
            Get
                Return Me.refrigerantField
            End Get
            Set
                Me.refrigerantField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Series() As String
            Get
                Return Me.seriesField
            End Get
            Set
                Me.seriesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SubCooling() As Boolean
            Get
                Return Me.subCoolingField
            End Get
            Set
                Me.subCoolingField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SubCoolingPercentage() As Single
            Get
                Return Me.subCoolingPercentageField
            End Get
            Set
                Me.subCoolingPercentageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TD() As Single
            Get
                Return Me.tdField
            End Get
            Set
                Me.tdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Division() As String
            Get
                Return Me.divisionField
            End Get
            Set
                Me.divisionField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class CondensingUnit
        
        Private equipmentIdField As String
        
        Private revisionField As Decimal
        
        Private ambientTempField As Single
        
        Private suctionTempField As Single
        
        Private refrigerantField As String
        
        Private circuit1CapacityField As Single
        
        Private circuit2CapacityField As Single
        
        Private circuit3CapacityField As Integer
        
        Private circuit4CapacityField As Integer
        
        Private evapTempField As Single
        
        Private efficiencyField As Single
        
        '''<remarks/>
        Public Property EquipmentId() As String
            Get
                Return Me.equipmentIdField
            End Get
            Set
                Me.equipmentIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AmbientTemp() As Single
            Get
                Return Me.ambientTempField
            End Get
            Set
                Me.ambientTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SuctionTemp() As Single
            Get
                Return Me.suctionTempField
            End Get
            Set
                Me.suctionTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Refrigerant() As String
            Get
                Return Me.refrigerantField
            End Get
            Set
                Me.refrigerantField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Circuit1Capacity() As Single
            Get
                Return Me.circuit1CapacityField
            End Get
            Set
                Me.circuit1CapacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Circuit2Capacity() As Single
            Get
                Return Me.circuit2CapacityField
            End Get
            Set
                Me.circuit2CapacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Circuit3Capacity() As Integer
            Get
                Return Me.circuit3CapacityField
            End Get
            Set
                Me.circuit3CapacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Circuit4Capacity() As Integer
            Get
                Return Me.circuit4CapacityField
            End Get
            Set
                Me.circuit4CapacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EvapTemp() As Single
            Get
                Return Me.evapTempField
            End Get
            Set
                Me.evapTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Efficiency() As Single
            Get
                Return Me.efficiencyField
            End Get
            Set
                Me.efficiencyField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class CondensingUnitProcesses
        
        Private processIDField As String
        
        Private revisionField As Decimal
        
        Private revisionDateField As Date
        
        Private projectRevisionField As Integer
        
        Private processRevisionDescriptionField As String
        
        Private createdByField As String
        
        Private versionField As String
        
        Private notesField As String
        
        Private nameField As String
        
        Private condensingUnitSeriesField As String
        
        Private capacityField As Single
        
        Private runTimeAdjustField As Boolean
        
        Private condensingUnitsRequiredField As Single
        
        Private runTimeField As Single
        
        Private ambientTemperatureField As Single
        
        Private suctionTemperatureField As Single
        
        Private refrigerantField As String
        
        Private compressorField As String
        
        Private compressorPerUnitField As Integer
        
        Private circuitsPerUnitField As Integer
        
        Private altitudeField As Single
        
        Private runTypeField As String
        
        Private noCondensingUnitsField As Boolean
        
        Private condensingUnitModelField As String
        
        Private customCondensingUnitModelField As String
        
        Private ratingAmbientField As Single
        
        Private ratingAmbientIntervalField As Single
        
        Private ratingAmbientStepField As Single
        
        Private ratingSuctionField As Single
        
        Private ratingSuctionIntervalField As Single
        
        Private ratingSuctionStepField As Single
        
        Private ratingRefrigerantField As String
        
        Private ratingAltitudeField As Single
        
        Private ratingSubCoolingField As Single
        
        Private ratingCatalogField As Boolean
        
        Private ratingHertzField As Single
        
        Private ratingSafetyField As Boolean
        
        Private compressor1Field As String
        
        Private compressor2Field As String
        
        Private compressor3Field As String
        
        Private compressor4Field As String
        
        Private compressorQuantity1Field As Integer
        
        Private compressorQuantity2Field As Integer
        
        Private compressorQuantity3Field As Integer
        
        Private compressorQuantity4Field As Integer
        
        Private finHeight1Field As Single
        
        Private finHeight2Field As Single
        
        Private finHeight3Field As Single
        
        Private finHeight4Field As Single
        
        Private coilFinWidth1Field As Single
        
        Private coilFinWidth2Field As Single
        
        Private coilFinWidth3Field As Single
        
        Private coilFinWidth4Field As Single
        
        Private coilRows1Field As Integer
        
        Private coilRows2Field As Integer
        
        Private coilRows3Field As Integer
        
        Private coilRows4Field As Integer
        
        Private coilSubCoolingPercentage1Field As Single
        
        Private coilSubCoolingPercentage2Field As Single
        
        Private coilSubCoolingPercentage3Field As Single
        
        Private coilSubCoolingPercentage4Field As Single
        
        Private finsPerInch1Field As Integer
        
        Private finsPerInch2Field As Integer
        
        Private finsPerInch3Field As Integer
        
        Private finsPerInch4Field As Integer
        
        Private fanDia1Field As String
        
        Private fanDia2Field As String
        
        Private fanDia3Field As String
        
        Private fanDia4Field As String
        
        Private fanQuantity1Field As Integer
        
        Private fanQuantity2Field As Integer
        
        Private fanQuantity3Field As Integer
        
        Private fanQuantity4Field As Integer
        
        Private divisionField As String
        
        Private voltageField As Integer
        
        Private use10CoefficientsField As Boolean
        
        Private tubeDiameter1Field As Single
        
        Private tubeDiameter2Field As Single
        
        Private tubeDiameter3Field As Single
        
        Private tubeDiameter4Field As Single
        
        Private tubeSurface1Field As String
        
        Private tubeSurface2Field As String
        
        Private tubeSurface3Field As String
        
        Private tubeSurface4Field As String
        
        Private finType1Field As String
        
        Private finType2Field As String
        
        Private finType3Field As String
        
        Private finType4Field As String
        
        Private fanRPM1Field As Decimal
        
        Private fanRPM2Field As Decimal
        
        Private fanRPM3Field As Decimal
        
        Private fanRPM4Field As Decimal
        
        Private dOEModelField As String
        
        '''<remarks/>
        Public Property ProcessID() As String
            Get
                Return Me.processIDField
            End Get
            Set
                Me.processIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RevisionDate() As Date
            Get
                Return Me.revisionDateField
            End Get
            Set
                Me.revisionDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectRevision() As Integer
            Get
                Return Me.projectRevisionField
            End Get
            Set
                Me.projectRevisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProcessRevisionDescription() As String
            Get
                Return Me.processRevisionDescriptionField
            End Get
            Set
                Me.processRevisionDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreatedBy() As String
            Get
                Return Me.createdByField
            End Get
            Set
                Me.createdByField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Version() As String
            Get
                Return Me.versionField
            End Get
            Set
                Me.versionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Notes() As String
            Get
                Return Me.notesField
            End Get
            Set
                Me.notesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondensingUnitSeries() As String
            Get
                Return Me.condensingUnitSeriesField
            End Get
            Set
                Me.condensingUnitSeriesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Capacity() As Single
            Get
                Return Me.capacityField
            End Get
            Set
                Me.capacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RunTimeAdjust() As Boolean
            Get
                Return Me.runTimeAdjustField
            End Get
            Set
                Me.runTimeAdjustField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondensingUnitsRequired() As Single
            Get
                Return Me.condensingUnitsRequiredField
            End Get
            Set
                Me.condensingUnitsRequiredField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RunTime() As Single
            Get
                Return Me.runTimeField
            End Get
            Set
                Me.runTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AmbientTemperature() As Single
            Get
                Return Me.ambientTemperatureField
            End Get
            Set
                Me.ambientTemperatureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SuctionTemperature() As Single
            Get
                Return Me.suctionTemperatureField
            End Get
            Set
                Me.suctionTemperatureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Refrigerant() As String
            Get
                Return Me.refrigerantField
            End Get
            Set
                Me.refrigerantField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Compressor() As String
            Get
                Return Me.compressorField
            End Get
            Set
                Me.compressorField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompressorPerUnit() As Integer
            Get
                Return Me.compressorPerUnitField
            End Get
            Set
                Me.compressorPerUnitField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CircuitsPerUnit() As Integer
            Get
                Return Me.circuitsPerUnitField
            End Get
            Set
                Me.circuitsPerUnitField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Altitude() As Single
            Get
                Return Me.altitudeField
            End Get
            Set
                Me.altitudeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RunType() As String
            Get
                Return Me.runTypeField
            End Get
            Set
                Me.runTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NoCondensingUnits() As Boolean
            Get
                Return Me.noCondensingUnitsField
            End Get
            Set
                Me.noCondensingUnitsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondensingUnitModel() As String
            Get
                Return Me.condensingUnitModelField
            End Get
            Set
                Me.condensingUnitModelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomCondensingUnitModel() As String
            Get
                Return Me.customCondensingUnitModelField
            End Get
            Set
                Me.customCondensingUnitModelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RatingAmbient() As Single
            Get
                Return Me.ratingAmbientField
            End Get
            Set
                Me.ratingAmbientField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RatingAmbientInterval() As Single
            Get
                Return Me.ratingAmbientIntervalField
            End Get
            Set
                Me.ratingAmbientIntervalField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RatingAmbientStep() As Single
            Get
                Return Me.ratingAmbientStepField
            End Get
            Set
                Me.ratingAmbientStepField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RatingSuction() As Single
            Get
                Return Me.ratingSuctionField
            End Get
            Set
                Me.ratingSuctionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RatingSuctionInterval() As Single
            Get
                Return Me.ratingSuctionIntervalField
            End Get
            Set
                Me.ratingSuctionIntervalField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RatingSuctionStep() As Single
            Get
                Return Me.ratingSuctionStepField
            End Get
            Set
                Me.ratingSuctionStepField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RatingRefrigerant() As String
            Get
                Return Me.ratingRefrigerantField
            End Get
            Set
                Me.ratingRefrigerantField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RatingAltitude() As Single
            Get
                Return Me.ratingAltitudeField
            End Get
            Set
                Me.ratingAltitudeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RatingSubCooling() As Single
            Get
                Return Me.ratingSubCoolingField
            End Get
            Set
                Me.ratingSubCoolingField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RatingCatalog() As Boolean
            Get
                Return Me.ratingCatalogField
            End Get
            Set
                Me.ratingCatalogField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RatingHertz() As Single
            Get
                Return Me.ratingHertzField
            End Get
            Set
                Me.ratingHertzField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RatingSafety() As Boolean
            Get
                Return Me.ratingSafetyField
            End Get
            Set
                Me.ratingSafetyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Compressor1() As String
            Get
                Return Me.compressor1Field
            End Get
            Set
                Me.compressor1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Compressor2() As String
            Get
                Return Me.compressor2Field
            End Get
            Set
                Me.compressor2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Compressor3() As String
            Get
                Return Me.compressor3Field
            End Get
            Set
                Me.compressor3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Compressor4() As String
            Get
                Return Me.compressor4Field
            End Get
            Set
                Me.compressor4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompressorQuantity1() As Integer
            Get
                Return Me.compressorQuantity1Field
            End Get
            Set
                Me.compressorQuantity1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompressorQuantity2() As Integer
            Get
                Return Me.compressorQuantity2Field
            End Get
            Set
                Me.compressorQuantity2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompressorQuantity3() As Integer
            Get
                Return Me.compressorQuantity3Field
            End Get
            Set
                Me.compressorQuantity3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompressorQuantity4() As Integer
            Get
                Return Me.compressorQuantity4Field
            End Get
            Set
                Me.compressorQuantity4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinHeight1() As Single
            Get
                Return Me.finHeight1Field
            End Get
            Set
                Me.finHeight1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinHeight2() As Single
            Get
                Return Me.finHeight2Field
            End Get
            Set
                Me.finHeight2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinHeight3() As Single
            Get
                Return Me.finHeight3Field
            End Get
            Set
                Me.finHeight3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinHeight4() As Single
            Get
                Return Me.finHeight4Field
            End Get
            Set
                Me.finHeight4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoilFinWidth1() As Single
            Get
                Return Me.coilFinWidth1Field
            End Get
            Set
                Me.coilFinWidth1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoilFinWidth2() As Single
            Get
                Return Me.coilFinWidth2Field
            End Get
            Set
                Me.coilFinWidth2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoilFinWidth3() As Single
            Get
                Return Me.coilFinWidth3Field
            End Get
            Set
                Me.coilFinWidth3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoilFinWidth4() As Single
            Get
                Return Me.coilFinWidth4Field
            End Get
            Set
                Me.coilFinWidth4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoilRows1() As Integer
            Get
                Return Me.coilRows1Field
            End Get
            Set
                Me.coilRows1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoilRows2() As Integer
            Get
                Return Me.coilRows2Field
            End Get
            Set
                Me.coilRows2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoilRows3() As Integer
            Get
                Return Me.coilRows3Field
            End Get
            Set
                Me.coilRows3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoilRows4() As Integer
            Get
                Return Me.coilRows4Field
            End Get
            Set
                Me.coilRows4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoilSubCoolingPercentage1() As Single
            Get
                Return Me.coilSubCoolingPercentage1Field
            End Get
            Set
                Me.coilSubCoolingPercentage1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoilSubCoolingPercentage2() As Single
            Get
                Return Me.coilSubCoolingPercentage2Field
            End Get
            Set
                Me.coilSubCoolingPercentage2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoilSubCoolingPercentage3() As Single
            Get
                Return Me.coilSubCoolingPercentage3Field
            End Get
            Set
                Me.coilSubCoolingPercentage3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoilSubCoolingPercentage4() As Single
            Get
                Return Me.coilSubCoolingPercentage4Field
            End Get
            Set
                Me.coilSubCoolingPercentage4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinsPerInch1() As Integer
            Get
                Return Me.finsPerInch1Field
            End Get
            Set
                Me.finsPerInch1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinsPerInch2() As Integer
            Get
                Return Me.finsPerInch2Field
            End Get
            Set
                Me.finsPerInch2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinsPerInch3() As Integer
            Get
                Return Me.finsPerInch3Field
            End Get
            Set
                Me.finsPerInch3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinsPerInch4() As Integer
            Get
                Return Me.finsPerInch4Field
            End Get
            Set
                Me.finsPerInch4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FanDia1() As String
            Get
                Return Me.fanDia1Field
            End Get
            Set
                Me.fanDia1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FanDia2() As String
            Get
                Return Me.fanDia2Field
            End Get
            Set
                Me.fanDia2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FanDia3() As String
            Get
                Return Me.fanDia3Field
            End Get
            Set
                Me.fanDia3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FanDia4() As String
            Get
                Return Me.fanDia4Field
            End Get
            Set
                Me.fanDia4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FanQuantity1() As Integer
            Get
                Return Me.fanQuantity1Field
            End Get
            Set
                Me.fanQuantity1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FanQuantity2() As Integer
            Get
                Return Me.fanQuantity2Field
            End Get
            Set
                Me.fanQuantity2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FanQuantity3() As Integer
            Get
                Return Me.fanQuantity3Field
            End Get
            Set
                Me.fanQuantity3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FanQuantity4() As Integer
            Get
                Return Me.fanQuantity4Field
            End Get
            Set
                Me.fanQuantity4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Division() As String
            Get
                Return Me.divisionField
            End Get
            Set
                Me.divisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Voltage() As Integer
            Get
                Return Me.voltageField
            End Get
            Set
                Me.voltageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Use10Coefficients() As Boolean
            Get
                Return Me.use10CoefficientsField
            End Get
            Set
                Me.use10CoefficientsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TubeDiameter1() As Single
            Get
                Return Me.tubeDiameter1Field
            End Get
            Set
                Me.tubeDiameter1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TubeDiameter2() As Single
            Get
                Return Me.tubeDiameter2Field
            End Get
            Set
                Me.tubeDiameter2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TubeDiameter3() As Single
            Get
                Return Me.tubeDiameter3Field
            End Get
            Set
                Me.tubeDiameter3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TubeDiameter4() As Single
            Get
                Return Me.tubeDiameter4Field
            End Get
            Set
                Me.tubeDiameter4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TubeSurface1() As String
            Get
                Return Me.tubeSurface1Field
            End Get
            Set
                Me.tubeSurface1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TubeSurface2() As String
            Get
                Return Me.tubeSurface2Field
            End Get
            Set
                Me.tubeSurface2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TubeSurface3() As String
            Get
                Return Me.tubeSurface3Field
            End Get
            Set
                Me.tubeSurface3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TubeSurface4() As String
            Get
                Return Me.tubeSurface4Field
            End Get
            Set
                Me.tubeSurface4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinType1() As String
            Get
                Return Me.finType1Field
            End Get
            Set
                Me.finType1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinType2() As String
            Get
                Return Me.finType2Field
            End Get
            Set
                Me.finType2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinType3() As String
            Get
                Return Me.finType3Field
            End Get
            Set
                Me.finType3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinType4() As String
            Get
                Return Me.finType4Field
            End Get
            Set
                Me.finType4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FanRPM1() As Decimal
            Get
                Return Me.fanRPM1Field
            End Get
            Set
                Me.fanRPM1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FanRPM2() As Decimal
            Get
                Return Me.fanRPM2Field
            End Get
            Set
                Me.fanRPM2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FanRPM3() As Decimal
            Get
                Return Me.fanRPM3Field
            End Get
            Set
                Me.fanRPM3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FanRPM4() As Decimal
            Get
                Return Me.fanRPM4Field
            End Get
            Set
                Me.fanRPM4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DOEModel() As String
            Get
                Return Me.dOEModelField
            End Get
            Set
                Me.dOEModelField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class Equipment3
        
        Private projectIdField As String
        
        Private projectRevisionField As Integer
        
        Private equipmentIdField As String
        
        Private revisionField As Decimal
        
        Private nameField As String
        
        Private typeTableNameField As String
        
        Private divisionField As String
        
        Private authorField As String
        
        Private seriesField As String
        
        Private modelField As String
        
        Private quantityField As Integer
        
        Private parMultiplierField As Single
        
        Private warrantyPriceField As Single
        
        Private freightPriceField As Single
        
        Private startUpPriceField As Single
        
        Private commissionRateField As Single
        
        Private unitVoltageField As String
        
        Private controlVoltageField As String
        
        Private lengthField As Single
        
        Private widthField As Single
        
        Private heightField As Single
        
        Private mcaField As Single
        
        Private rlaField As Single
        
        Private altitudeField As Single
        
        Private notesField As String
        
        Private tagField As String
        
        Private shippingWeightField As Single
        
        Private operatingWeightField As Single
        
        Private includedField As Boolean
        
        Private otherPriceField As Single
        
        Private otherDescriptionField As String
        
        Private customModelField As String
        
        Private overriddenBaseListPriceField As Single
        
        Private shouldOverrideBaseListPriceField As Boolean
        
        Private multiplierCodeField As String
        
        Private multiplierTypeField As String
        
        Private listPositionField As Integer
        
        '''<remarks/>
        Public Property ProjectId() As String
            Get
                Return Me.projectIdField
            End Get
            Set
                Me.projectIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectRevision() As Integer
            Get
                Return Me.projectRevisionField
            End Get
            Set
                Me.projectRevisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EquipmentId() As String
            Get
                Return Me.equipmentIdField
            End Get
            Set
                Me.equipmentIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TypeTableName() As String
            Get
                Return Me.typeTableNameField
            End Get
            Set
                Me.typeTableNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Division() As String
            Get
                Return Me.divisionField
            End Get
            Set
                Me.divisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Author() As String
            Get
                Return Me.authorField
            End Get
            Set
                Me.authorField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Series() As String
            Get
                Return Me.seriesField
            End Get
            Set
                Me.seriesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Quantity() As Integer
            Get
                Return Me.quantityField
            End Get
            Set
                Me.quantityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ParMultiplier() As Single
            Get
                Return Me.parMultiplierField
            End Get
            Set
                Me.parMultiplierField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property WarrantyPrice() As Single
            Get
                Return Me.warrantyPriceField
            End Get
            Set
                Me.warrantyPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FreightPrice() As Single
            Get
                Return Me.freightPriceField
            End Get
            Set
                Me.freightPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StartUpPrice() As Single
            Get
                Return Me.startUpPriceField
            End Get
            Set
                Me.startUpPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CommissionRate() As Single
            Get
                Return Me.commissionRateField
            End Get
            Set
                Me.commissionRateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitVoltage() As String
            Get
                Return Me.unitVoltageField
            End Get
            Set
                Me.unitVoltageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ControlVoltage() As String
            Get
                Return Me.controlVoltageField
            End Get
            Set
                Me.controlVoltageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Length() As Single
            Get
                Return Me.lengthField
            End Get
            Set
                Me.lengthField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Width() As Single
            Get
                Return Me.widthField
            End Get
            Set
                Me.widthField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Height() As Single
            Get
                Return Me.heightField
            End Get
            Set
                Me.heightField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Mca() As Single
            Get
                Return Me.mcaField
            End Get
            Set
                Me.mcaField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Rla() As Single
            Get
                Return Me.rlaField
            End Get
            Set
                Me.rlaField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Altitude() As Single
            Get
                Return Me.altitudeField
            End Get
            Set
                Me.altitudeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Notes() As String
            Get
                Return Me.notesField
            End Get
            Set
                Me.notesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tag() As String
            Get
                Return Me.tagField
            End Get
            Set
                Me.tagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ShippingWeight() As Single
            Get
                Return Me.shippingWeightField
            End Get
            Set
                Me.shippingWeightField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OperatingWeight() As Single
            Get
                Return Me.operatingWeightField
            End Get
            Set
                Me.operatingWeightField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Included() As Boolean
            Get
                Return Me.includedField
            End Get
            Set
                Me.includedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OtherPrice() As Single
            Get
                Return Me.otherPriceField
            End Get
            Set
                Me.otherPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OtherDescription() As String
            Get
                Return Me.otherDescriptionField
            End Get
            Set
                Me.otherDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomModel() As String
            Get
                Return Me.customModelField
            End Get
            Set
                Me.customModelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OverriddenBaseListPrice() As Single
            Get
                Return Me.overriddenBaseListPriceField
            End Get
            Set
                Me.overriddenBaseListPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ShouldOverrideBaseListPrice() As Boolean
            Get
                Return Me.shouldOverrideBaseListPriceField
            End Get
            Set
                Me.shouldOverrideBaseListPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MultiplierCode() As String
            Get
                Return Me.multiplierCodeField
            End Get
            Set
                Me.multiplierCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MultiplierType() As String
            Get
                Return Me.multiplierTypeField
            End Get
            Set
                Me.multiplierTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ListPosition() As Integer
            Get
                Return Me.listPositionField
            End Get
            Set
                Me.listPositionField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class Equipment2
        
        Private projectIdField As String
        
        Private projectRevisionField As Integer
        
        Private equipmentIdField As String
        
        Private revisionField As Decimal
        
        Private nameField As String
        
        Private typeTableNameField As String
        
        Private divisionField As String
        
        Private authorField As String
        
        Private seriesField As String
        
        Private modelField As String
        
        Private quantityField As Integer
        
        Private parMultiplierField As Single
        
        Private warrantyPriceField As Single
        
        Private freightPriceField As Single
        
        Private startUpPriceField As Single
        
        Private commissionRateField As Single
        
        Private unitVoltageField As String
        
        Private controlVoltageField As String
        
        Private lengthField As Single
        
        Private widthField As Single
        
        Private heightField As Single
        
        Private mcaField As Single
        
        Private rlaField As Single
        
        Private altitudeField As Single
        
        Private notesField As String
        
        Private tagField As String
        
        Private shippingWeightField As Single
        
        Private operatingWeightField As Single
        
        Private includedField As Boolean
        
        Private otherPriceField As Single
        
        Private otherDescriptionField As String
        
        Private customModelField As String
        
        Private overriddenBaseListPriceField As Single
        
        Private shouldOverrideBaseListPriceField As Boolean
        
        Private multiplierCodeField As String
        
        Private multiplierTypeField As String
        
        '''<remarks/>
        Public Property ProjectId() As String
            Get
                Return Me.projectIdField
            End Get
            Set
                Me.projectIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectRevision() As Integer
            Get
                Return Me.projectRevisionField
            End Get
            Set
                Me.projectRevisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EquipmentId() As String
            Get
                Return Me.equipmentIdField
            End Get
            Set
                Me.equipmentIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TypeTableName() As String
            Get
                Return Me.typeTableNameField
            End Get
            Set
                Me.typeTableNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Division() As String
            Get
                Return Me.divisionField
            End Get
            Set
                Me.divisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Author() As String
            Get
                Return Me.authorField
            End Get
            Set
                Me.authorField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Series() As String
            Get
                Return Me.seriesField
            End Get
            Set
                Me.seriesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Quantity() As Integer
            Get
                Return Me.quantityField
            End Get
            Set
                Me.quantityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ParMultiplier() As Single
            Get
                Return Me.parMultiplierField
            End Get
            Set
                Me.parMultiplierField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property WarrantyPrice() As Single
            Get
                Return Me.warrantyPriceField
            End Get
            Set
                Me.warrantyPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FreightPrice() As Single
            Get
                Return Me.freightPriceField
            End Get
            Set
                Me.freightPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StartUpPrice() As Single
            Get
                Return Me.startUpPriceField
            End Get
            Set
                Me.startUpPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CommissionRate() As Single
            Get
                Return Me.commissionRateField
            End Get
            Set
                Me.commissionRateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitVoltage() As String
            Get
                Return Me.unitVoltageField
            End Get
            Set
                Me.unitVoltageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ControlVoltage() As String
            Get
                Return Me.controlVoltageField
            End Get
            Set
                Me.controlVoltageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Length() As Single
            Get
                Return Me.lengthField
            End Get
            Set
                Me.lengthField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Width() As Single
            Get
                Return Me.widthField
            End Get
            Set
                Me.widthField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Height() As Single
            Get
                Return Me.heightField
            End Get
            Set
                Me.heightField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Mca() As Single
            Get
                Return Me.mcaField
            End Get
            Set
                Me.mcaField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Rla() As Single
            Get
                Return Me.rlaField
            End Get
            Set
                Me.rlaField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Altitude() As Single
            Get
                Return Me.altitudeField
            End Get
            Set
                Me.altitudeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Notes() As String
            Get
                Return Me.notesField
            End Get
            Set
                Me.notesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tag() As String
            Get
                Return Me.tagField
            End Get
            Set
                Me.tagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ShippingWeight() As Single
            Get
                Return Me.shippingWeightField
            End Get
            Set
                Me.shippingWeightField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OperatingWeight() As Single
            Get
                Return Me.operatingWeightField
            End Get
            Set
                Me.operatingWeightField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Included() As Boolean
            Get
                Return Me.includedField
            End Get
            Set
                Me.includedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OtherPrice() As Single
            Get
                Return Me.otherPriceField
            End Get
            Set
                Me.otherPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OtherDescription() As String
            Get
                Return Me.otherDescriptionField
            End Get
            Set
                Me.otherDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomModel() As String
            Get
                Return Me.customModelField
            End Get
            Set
                Me.customModelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OverriddenBaseListPrice() As Single
            Get
                Return Me.overriddenBaseListPriceField
            End Get
            Set
                Me.overriddenBaseListPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ShouldOverrideBaseListPrice() As Boolean
            Get
                Return Me.shouldOverrideBaseListPriceField
            End Get
            Set
                Me.shouldOverrideBaseListPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MultiplierCode() As String
            Get
                Return Me.multiplierCodeField
            End Get
            Set
                Me.multiplierCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MultiplierType() As String
            Get
                Return Me.multiplierTypeField
            End Get
            Set
                Me.multiplierTypeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class Equipment
        
        Private projectIdField As String
        
        Private projectRevisionField As Integer
        
        Private equipmentIdField As String
        
        Private revisionField As Decimal
        
        Private nameField As String
        
        Private typeTableNameField As String
        
        Private divisionField As String
        
        Private authorField As String
        
        Private seriesField As String
        
        Private modelField As String
        
        Private quantityField As Integer
        
        Private parMultiplierField As Single
        
        Private warrantyPriceField As Single
        
        Private freightPriceField As Single
        
        Private startUpPriceField As Single
        
        Private commissionRateField As Single
        
        Private unitVoltageField As String
        
        Private controlVoltageField As String
        
        Private lengthField As Single
        
        Private widthField As Single
        
        Private heightField As Single
        
        Private mcaField As Single
        
        Private rlaField As Single
        
        Private altitudeField As Single
        
        Private notesField As String
        
        Private tagField As String
        
        Private shippingWeightField As Single
        
        Private operatingWeightField As Single
        
        Private includedField As Boolean
        
        Private otherPriceField As Single
        
        Private otherDescriptionField As String
        
        Private customModelField As String
        
        Private overriddenBaseListPriceField As Single
        
        Private shouldOverrideBaseListPriceField As Boolean
        
        Private multiplierCodeField As String
        
        '''<remarks/>
        Public Property ProjectId() As String
            Get
                Return Me.projectIdField
            End Get
            Set
                Me.projectIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectRevision() As Integer
            Get
                Return Me.projectRevisionField
            End Get
            Set
                Me.projectRevisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EquipmentId() As String
            Get
                Return Me.equipmentIdField
            End Get
            Set
                Me.equipmentIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TypeTableName() As String
            Get
                Return Me.typeTableNameField
            End Get
            Set
                Me.typeTableNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Division() As String
            Get
                Return Me.divisionField
            End Get
            Set
                Me.divisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Author() As String
            Get
                Return Me.authorField
            End Get
            Set
                Me.authorField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Series() As String
            Get
                Return Me.seriesField
            End Get
            Set
                Me.seriesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Quantity() As Integer
            Get
                Return Me.quantityField
            End Get
            Set
                Me.quantityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ParMultiplier() As Single
            Get
                Return Me.parMultiplierField
            End Get
            Set
                Me.parMultiplierField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property WarrantyPrice() As Single
            Get
                Return Me.warrantyPriceField
            End Get
            Set
                Me.warrantyPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FreightPrice() As Single
            Get
                Return Me.freightPriceField
            End Get
            Set
                Me.freightPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StartUpPrice() As Single
            Get
                Return Me.startUpPriceField
            End Get
            Set
                Me.startUpPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CommissionRate() As Single
            Get
                Return Me.commissionRateField
            End Get
            Set
                Me.commissionRateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitVoltage() As String
            Get
                Return Me.unitVoltageField
            End Get
            Set
                Me.unitVoltageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ControlVoltage() As String
            Get
                Return Me.controlVoltageField
            End Get
            Set
                Me.controlVoltageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Length() As Single
            Get
                Return Me.lengthField
            End Get
            Set
                Me.lengthField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Width() As Single
            Get
                Return Me.widthField
            End Get
            Set
                Me.widthField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Height() As Single
            Get
                Return Me.heightField
            End Get
            Set
                Me.heightField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Mca() As Single
            Get
                Return Me.mcaField
            End Get
            Set
                Me.mcaField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Rla() As Single
            Get
                Return Me.rlaField
            End Get
            Set
                Me.rlaField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Altitude() As Single
            Get
                Return Me.altitudeField
            End Get
            Set
                Me.altitudeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Notes() As String
            Get
                Return Me.notesField
            End Get
            Set
                Me.notesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tag() As String
            Get
                Return Me.tagField
            End Get
            Set
                Me.tagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ShippingWeight() As Single
            Get
                Return Me.shippingWeightField
            End Get
            Set
                Me.shippingWeightField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OperatingWeight() As Single
            Get
                Return Me.operatingWeightField
            End Get
            Set
                Me.operatingWeightField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Included() As Boolean
            Get
                Return Me.includedField
            End Get
            Set
                Me.includedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OtherPrice() As Single
            Get
                Return Me.otherPriceField
            End Get
            Set
                Me.otherPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OtherDescription() As String
            Get
                Return Me.otherDescriptionField
            End Get
            Set
                Me.otherDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomModel() As String
            Get
                Return Me.customModelField
            End Get
            Set
                Me.customModelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OverriddenBaseListPrice() As Single
            Get
                Return Me.overriddenBaseListPriceField
            End Get
            Set
                Me.overriddenBaseListPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ShouldOverrideBaseListPrice() As Boolean
            Get
                Return Me.shouldOverrideBaseListPriceField
            End Get
            Set
                Me.shouldOverrideBaseListPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MultiplierCode() As String
            Get
                Return Me.multiplierCodeField
            End Get
            Set
                Me.multiplierCodeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class EquipmentOptions
        
        Private idField As Integer
        
        Private revisionField As Decimal
        
        Private pricingIdField As Integer
        
        Private equipmentIdField As String
        
        Private quantityField As Integer
        
        '''<remarks/>
        Public Property Id() As Integer
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PricingId() As Integer
            Get
                Return Me.pricingIdField
            End Get
            Set
                Me.pricingIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EquipmentId() As String
            Get
                Return Me.equipmentIdField
            End Get
            Set
                Me.equipmentIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Quantity() As Integer
            Get
                Return Me.quantityField
            End Get
            Set
                Me.quantityField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class EvapChillerProcesses
        
        Private processIDField As String
        
        Private revisionField As Decimal
        
        Private revisionDateField As Date
        
        Private projectRevisionField As Integer
        
        Private processRevisionDescriptionField As String
        
        Private createdByField As String
        
        Private versionField As String
        
        Private notesField As String
        
        Private nameField As String
        
        Private seriesField As String
        
        Private newCoefficientsField As Boolean
        
        Private modelField As String
        
        Private modelDescField As String
        
        Private fluidField As String
        
        Private glycolPercentageField As Single
        
        Private coolingMediaField As String
        
        Private specificHeatField As Single
        
        Private specificGravityField As Single
        
        Private subCoolingField As Single
        
        Private refrigerantField As String
        
        Private tempRangeField As Single
        
        Private ambientTempField As Single
        
        Private leavingFluidTempField As Single
        
        Private systemField As String
        
        Private hertzField As Single
        
        Private voltsField As Single
        
        Private approachField As String
        
        Private tEMinField As Single
        
        Private tEMaxField As Single
        
        Private tEIncrementField As Single
        
        Private aTMinField As Single
        
        Private aTMaxField As Single
        
        Private aTIncrementField As Single
        
        Private safetyOverrideField As Boolean
        
        Private circuit1Field As Boolean
        
        Private circuit2Field As Boolean
        
        Private numCompressors1Field As Integer
        
        Private numCompressors2Field As Integer
        
        Private compressors1Field As String
        
        Private compressors2Field As String
        
        Private numCoils1Field As Single
        
        Private numCoils2Field As Single
        
        Private condenser1Field As String
        
        Private condenser2Field As String
        
        Private dischargeLineLossField As Single
        
        Private suctionLineLossField As Single
        
        Private altitudeField As Single
        
        Private pumpWattsField As Single
        
        Private fanWattsField As Single
        
        Private condenserCapacity1Field As Single
        
        Private condenserCapacity2Field As Single
        
        Private evaporatorModelField As String
        
        Private evaporatorModelDescField As String
        
        Private numEvapField As Integer
        
        Private foulingFactorField As Single
        
        Private capacityTypeField As String
        
        Private evaporatorCapacityField As Single
        
        Private catalogRatingField As Boolean
        
        Private approachRangeField As String
        
        Private evap8Degr1Field As Single
        
        Private evap8Degr2Field As Single
        
        Private evap10Degr1Field As Single
        
        Private evap10Degr2Field As Single
        
        Private divisionField As String
        
        Private subcoolingCoilOptionField As Boolean
        
        Private soundAttenuationOptionField As Boolean
        
        Private customCondenserModelField As String
        
        Private fanMotorHpField As Single
        
        Private pumpMotorHpField As Single
        
        '''<remarks/>
        Public Property ProcessID() As String
            Get
                Return Me.processIDField
            End Get
            Set
                Me.processIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RevisionDate() As Date
            Get
                Return Me.revisionDateField
            End Get
            Set
                Me.revisionDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectRevision() As Integer
            Get
                Return Me.projectRevisionField
            End Get
            Set
                Me.projectRevisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProcessRevisionDescription() As String
            Get
                Return Me.processRevisionDescriptionField
            End Get
            Set
                Me.processRevisionDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreatedBy() As String
            Get
                Return Me.createdByField
            End Get
            Set
                Me.createdByField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Version() As String
            Get
                Return Me.versionField
            End Get
            Set
                Me.versionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Notes() As String
            Get
                Return Me.notesField
            End Get
            Set
                Me.notesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Series() As String
            Get
                Return Me.seriesField
            End Get
            Set
                Me.seriesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NewCoefficients() As Boolean
            Get
                Return Me.newCoefficientsField
            End Get
            Set
                Me.newCoefficientsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ModelDesc() As String
            Get
                Return Me.modelDescField
            End Get
            Set
                Me.modelDescField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Fluid() As String
            Get
                Return Me.fluidField
            End Get
            Set
                Me.fluidField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GlycolPercentage() As Single
            Get
                Return Me.glycolPercentageField
            End Get
            Set
                Me.glycolPercentageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoolingMedia() As String
            Get
                Return Me.coolingMediaField
            End Get
            Set
                Me.coolingMediaField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SpecificHeat() As Single
            Get
                Return Me.specificHeatField
            End Get
            Set
                Me.specificHeatField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SpecificGravity() As Single
            Get
                Return Me.specificGravityField
            End Get
            Set
                Me.specificGravityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SubCooling() As Single
            Get
                Return Me.subCoolingField
            End Get
            Set
                Me.subCoolingField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Refrigerant() As String
            Get
                Return Me.refrigerantField
            End Get
            Set
                Me.refrigerantField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TempRange() As Single
            Get
                Return Me.tempRangeField
            End Get
            Set
                Me.tempRangeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AmbientTemp() As Single
            Get
                Return Me.ambientTempField
            End Get
            Set
                Me.ambientTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LeavingFluidTemp() As Single
            Get
                Return Me.leavingFluidTempField
            End Get
            Set
                Me.leavingFluidTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property System() As String
            Get
                Return Me.systemField
            End Get
            Set
                Me.systemField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Hertz() As Single
            Get
                Return Me.hertzField
            End Get
            Set
                Me.hertzField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Volts() As Single
            Get
                Return Me.voltsField
            End Get
            Set
                Me.voltsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Approach() As String
            Get
                Return Me.approachField
            End Get
            Set
                Me.approachField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TEMin() As Single
            Get
                Return Me.tEMinField
            End Get
            Set
                Me.tEMinField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TEMax() As Single
            Get
                Return Me.tEMaxField
            End Get
            Set
                Me.tEMaxField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TEIncrement() As Single
            Get
                Return Me.tEIncrementField
            End Get
            Set
                Me.tEIncrementField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ATMin() As Single
            Get
                Return Me.aTMinField
            End Get
            Set
                Me.aTMinField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ATMax() As Single
            Get
                Return Me.aTMaxField
            End Get
            Set
                Me.aTMaxField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ATIncrement() As Single
            Get
                Return Me.aTIncrementField
            End Get
            Set
                Me.aTIncrementField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SafetyOverride() As Boolean
            Get
                Return Me.safetyOverrideField
            End Get
            Set
                Me.safetyOverrideField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Circuit1() As Boolean
            Get
                Return Me.circuit1Field
            End Get
            Set
                Me.circuit1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Circuit2() As Boolean
            Get
                Return Me.circuit2Field
            End Get
            Set
                Me.circuit2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumCompressors1() As Integer
            Get
                Return Me.numCompressors1Field
            End Get
            Set
                Me.numCompressors1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumCompressors2() As Integer
            Get
                Return Me.numCompressors2Field
            End Get
            Set
                Me.numCompressors2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Compressors1() As String
            Get
                Return Me.compressors1Field
            End Get
            Set
                Me.compressors1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Compressors2() As String
            Get
                Return Me.compressors2Field
            End Get
            Set
                Me.compressors2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumCoils1() As Single
            Get
                Return Me.numCoils1Field
            End Get
            Set
                Me.numCoils1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumCoils2() As Single
            Get
                Return Me.numCoils2Field
            End Get
            Set
                Me.numCoils2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Condenser1() As String
            Get
                Return Me.condenser1Field
            End Get
            Set
                Me.condenser1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Condenser2() As String
            Get
                Return Me.condenser2Field
            End Get
            Set
                Me.condenser2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DischargeLineLoss() As Single
            Get
                Return Me.dischargeLineLossField
            End Get
            Set
                Me.dischargeLineLossField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SuctionLineLoss() As Single
            Get
                Return Me.suctionLineLossField
            End Get
            Set
                Me.suctionLineLossField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Altitude() As Single
            Get
                Return Me.altitudeField
            End Get
            Set
                Me.altitudeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PumpWatts() As Single
            Get
                Return Me.pumpWattsField
            End Get
            Set
                Me.pumpWattsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FanWatts() As Single
            Get
                Return Me.fanWattsField
            End Get
            Set
                Me.fanWattsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondenserCapacity1() As Single
            Get
                Return Me.condenserCapacity1Field
            End Get
            Set
                Me.condenserCapacity1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondenserCapacity2() As Single
            Get
                Return Me.condenserCapacity2Field
            End Get
            Set
                Me.condenserCapacity2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EvaporatorModel() As String
            Get
                Return Me.evaporatorModelField
            End Get
            Set
                Me.evaporatorModelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EvaporatorModelDesc() As String
            Get
                Return Me.evaporatorModelDescField
            End Get
            Set
                Me.evaporatorModelDescField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumEvap() As Integer
            Get
                Return Me.numEvapField
            End Get
            Set
                Me.numEvapField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FoulingFactor() As Single
            Get
                Return Me.foulingFactorField
            End Get
            Set
                Me.foulingFactorField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CapacityType() As String
            Get
                Return Me.capacityTypeField
            End Get
            Set
                Me.capacityTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EvaporatorCapacity() As Single
            Get
                Return Me.evaporatorCapacityField
            End Get
            Set
                Me.evaporatorCapacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CatalogRating() As Boolean
            Get
                Return Me.catalogRatingField
            End Get
            Set
                Me.catalogRatingField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ApproachRange() As String
            Get
                Return Me.approachRangeField
            End Get
            Set
                Me.approachRangeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Evap8Degr1() As Single
            Get
                Return Me.evap8Degr1Field
            End Get
            Set
                Me.evap8Degr1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Evap8Degr2() As Single
            Get
                Return Me.evap8Degr2Field
            End Get
            Set
                Me.evap8Degr2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Evap10Degr1() As Single
            Get
                Return Me.evap10Degr1Field
            End Get
            Set
                Me.evap10Degr1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Evap10Degr2() As Single
            Get
                Return Me.evap10Degr2Field
            End Get
            Set
                Me.evap10Degr2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Division() As String
            Get
                Return Me.divisionField
            End Get
            Set
                Me.divisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SubcoolingCoilOption() As Boolean
            Get
                Return Me.subcoolingCoilOptionField
            End Get
            Set
                Me.subcoolingCoilOptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SoundAttenuationOption() As Boolean
            Get
                Return Me.soundAttenuationOptionField
            End Get
            Set
                Me.soundAttenuationOptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomCondenserModel() As String
            Get
                Return Me.customCondenserModelField
            End Get
            Set
                Me.customCondenserModelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FanMotorHp() As Single
            Get
                Return Me.fanMotorHpField
            End Get
            Set
                Me.fanMotorHpField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PumpMotorHp() As Single
            Get
                Return Me.pumpMotorHpField
            End Get
            Set
                Me.pumpMotorHpField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class FluidCooler
        
        Private equipmentIdField As String
        
        Private revisionField As Decimal
        
        Private capacityField As Single
        
        Private ambientTempField As Single
        
        Private enteringFluidTempField As Single
        
        Private leavingFluidTempField As Single
        
        Private glycolPercentField As Single
        
        Private fluidField As String
        
        Private flowField As Integer
        
        Private refrigerantField As String
        
        '''<remarks/>
        Public Property EquipmentId() As String
            Get
                Return Me.equipmentIdField
            End Get
            Set
                Me.equipmentIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Capacity() As Single
            Get
                Return Me.capacityField
            End Get
            Set
                Me.capacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AmbientTemp() As Single
            Get
                Return Me.ambientTempField
            End Get
            Set
                Me.ambientTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EnteringFluidTemp() As Single
            Get
                Return Me.enteringFluidTempField
            End Get
            Set
                Me.enteringFluidTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LeavingFluidTemp() As Single
            Get
                Return Me.leavingFluidTempField
            End Get
            Set
                Me.leavingFluidTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GlycolPercent() As Single
            Get
                Return Me.glycolPercentField
            End Get
            Set
                Me.glycolPercentField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Fluid() As String
            Get
                Return Me.fluidField
            End Get
            Set
                Me.fluidField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Flow() As Integer
            Get
                Return Me.flowField
            End Get
            Set
                Me.flowField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Refrigerant() As String
            Get
                Return Me.refrigerantField
            End Get
            Set
                Me.refrigerantField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class FluidCoolerProcesses
        
        Private processIDField As String
        
        Private revisionField As Decimal
        
        Private revisionDateField As Date
        
        Private projectRevisionField As Integer
        
        Private processRevisionDescriptionField As String
        
        Private createdByField As String
        
        Private nameField As String
        
        Private altitudeField As Single
        
        Private capacityField As Single
        
        Private ambientTempField As Single
        
        Private enteringFluidTempField As Single
        
        Private leavingFluidTempField As Single
        
        Private glycolPercentField As Single
        
        Private fluidField As String
        
        Private flowField As Single
        
        Private fluidCoolerXMLField As String
        
        '''<remarks/>
        Public Property ProcessID() As String
            Get
                Return Me.processIDField
            End Get
            Set
                Me.processIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RevisionDate() As Date
            Get
                Return Me.revisionDateField
            End Get
            Set
                Me.revisionDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectRevision() As Integer
            Get
                Return Me.projectRevisionField
            End Get
            Set
                Me.projectRevisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProcessRevisionDescription() As String
            Get
                Return Me.processRevisionDescriptionField
            End Get
            Set
                Me.processRevisionDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreatedBy() As String
            Get
                Return Me.createdByField
            End Get
            Set
                Me.createdByField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Altitude() As Single
            Get
                Return Me.altitudeField
            End Get
            Set
                Me.altitudeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Capacity() As Single
            Get
                Return Me.capacityField
            End Get
            Set
                Me.capacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AmbientTemp() As Single
            Get
                Return Me.ambientTempField
            End Get
            Set
                Me.ambientTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EnteringFluidTemp() As Single
            Get
                Return Me.enteringFluidTempField
            End Get
            Set
                Me.enteringFluidTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LeavingFluidTemp() As Single
            Get
                Return Me.leavingFluidTempField
            End Get
            Set
                Me.leavingFluidTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GlycolPercent() As Single
            Get
                Return Me.glycolPercentField
            End Get
            Set
                Me.glycolPercentField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Fluid() As String
            Get
                Return Me.fluidField
            End Get
            Set
                Me.fluidField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Flow() As Single
            Get
                Return Me.flowField
            End Get
            Set
                Me.flowField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FluidCoolerXML() As String
            Get
                Return Me.fluidCoolerXMLField
            End Get
            Set
                Me.fluidCoolerXMLField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class OtherEquipmentCosts
        
        Private idField As Integer
        
        Private revisionField As Decimal
        
        Private equipmentIdField As String
        
        Private priceField As Single
        
        Private descriptionField As String
        
        '''<remarks/>
        Public Property Id() As Integer
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EquipmentId() As String
            Get
                Return Me.equipmentIdField
            End Get
            Set
                Me.equipmentIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Price() As Single
            Get
                Return Me.priceField
            End Get
            Set
                Me.priceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class ProcessEquip
        
        Private idField As String
        
        Private processIDField As String
        
        Private equipmentIDField As String
        
        '''<remarks/>
        Public Property ID() As String
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProcessID() As String
            Get
                Return Me.processIDField
            End Get
            Set
                Me.processIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EquipmentID() As String
            Get
                Return Me.equipmentIDField
            End Get
            Set
                Me.equipmentIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class Processes
        
        Private idField As String
        
        Private projectIDField As String
        
        Private processTableNameField As String
        
        '''<remarks/>
        Public Property ID() As String
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectID() As String
            Get
                Return Me.projectIDField
            End Get
            Set
                Me.projectIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProcessTableName() As String
            Get
                Return Me.processTableNameField
            End Get
            Set
                Me.processTableNameField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class ProcessSpecific
        
        Private processIDField As String
        
        Private controlNameField As String
        
        Private controlValueField As String
        
        Private loadOrderField As String
        
        Private fireProcedureField As String
        
        '''<remarks/>
        Public Property ProcessID() As String
            Get
                Return Me.processIDField
            End Get
            Set
                Me.processIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ControlName() As String
            Get
                Return Me.controlNameField
            End Get
            Set
                Me.controlNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ControlValue() As String
            Get
                Return Me.controlValueField
            End Get
            Set
                Me.controlValueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LoadOrder() As String
            Get
                Return Me.loadOrderField
            End Get
            Set
                Me.loadOrderField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FireProcedure() As String
            Get
                Return Me.fireProcedureField
            End Get
            Set
                Me.fireProcedureField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class ProductCooler
        
        Private equipmentIdField As String
        
        Private revisionField As Decimal
        
        Private capacityField As Single
        
        Private evaporatorTempField As Single
        
        Private boxTempField As Single
        
        Private tempDifferenceField As Single
        
        Private condensingTempField As Single
        
        Private liquidTempField As Single
        
        Private refrigerantField As String
        
        '''<remarks/>
        Public Property EquipmentId() As String
            Get
                Return Me.equipmentIdField
            End Get
            Set
                Me.equipmentIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Capacity() As Single
            Get
                Return Me.capacityField
            End Get
            Set
                Me.capacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EvaporatorTemp() As Single
            Get
                Return Me.evaporatorTempField
            End Get
            Set
                Me.evaporatorTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BoxTemp() As Single
            Get
                Return Me.boxTempField
            End Get
            Set
                Me.boxTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TempDifference() As Single
            Get
                Return Me.tempDifferenceField
            End Get
            Set
                Me.tempDifferenceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondensingTemp() As Single
            Get
                Return Me.condensingTempField
            End Get
            Set
                Me.condensingTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LiquidTemp() As Single
            Get
                Return Me.liquidTempField
            End Get
            Set
                Me.liquidTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Refrigerant() As String
            Get
                Return Me.refrigerantField
            End Get
            Set
                Me.refrigerantField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class Projects
        
        Private projectIdField As String
        
        Private projectRevisionField As Integer
        
        Private nameField As String
        
        Private notesField As String
        
        Private tagField As String
        
        Private releaseStatusField As String
        
        Private releaseNumField As Integer
        
        Private hoursBeforeDeliveryToCallField As Single
        
        Private poNumField As Integer
        
        Private poDateField As Date
        
        Private requestedShipDateField As Date
        
        Private salesClassField As String
        
        Private repIdField As Integer
        
        Private architectNameField As String
        
        Private contractorNameField As String
        
        Private engineerNameField As String
        
        Private repCompanyIdField As Integer
        
        Private architectCompanyNameField As String
        
        Private contractorCompanyNameField As String
        
        Private engineerCompanyNameField As String
        
        Private descriptionField As String
        
        Private contactDataStructureField As String
        
        Private projectOwnerField As String
        
        Private openedByField As String
        
        Private checkedOutByField As String
        
        Private revisionDateField As Date
        
        '''<remarks/>
        Public Property ProjectId() As String
            Get
                Return Me.projectIdField
            End Get
            Set
                Me.projectIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectRevision() As Integer
            Get
                Return Me.projectRevisionField
            End Get
            Set
                Me.projectRevisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Notes() As String
            Get
                Return Me.notesField
            End Get
            Set
                Me.notesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tag() As String
            Get
                Return Me.tagField
            End Get
            Set
                Me.tagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ReleaseStatus() As String
            Get
                Return Me.releaseStatusField
            End Get
            Set
                Me.releaseStatusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ReleaseNum() As Integer
            Get
                Return Me.releaseNumField
            End Get
            Set
                Me.releaseNumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property HoursBeforeDeliveryToCall() As Single
            Get
                Return Me.hoursBeforeDeliveryToCallField
            End Get
            Set
                Me.hoursBeforeDeliveryToCallField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PoNum() As Integer
            Get
                Return Me.poNumField
            End Get
            Set
                Me.poNumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PoDate() As Date
            Get
                Return Me.poDateField
            End Get
            Set
                Me.poDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RequestedShipDate() As Date
            Get
                Return Me.requestedShipDateField
            End Get
            Set
                Me.requestedShipDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SalesClass() As String
            Get
                Return Me.salesClassField
            End Get
            Set
                Me.salesClassField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RepId() As Integer
            Get
                Return Me.repIdField
            End Get
            Set
                Me.repIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ArchitectName() As String
            Get
                Return Me.architectNameField
            End Get
            Set
                Me.architectNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ContractorName() As String
            Get
                Return Me.contractorNameField
            End Get
            Set
                Me.contractorNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EngineerName() As String
            Get
                Return Me.engineerNameField
            End Get
            Set
                Me.engineerNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RepCompanyId() As Integer
            Get
                Return Me.repCompanyIdField
            End Get
            Set
                Me.repCompanyIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ArchitectCompanyName() As String
            Get
                Return Me.architectCompanyNameField
            End Get
            Set
                Me.architectCompanyNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ContractorCompanyName() As String
            Get
                Return Me.contractorCompanyNameField
            End Get
            Set
                Me.contractorCompanyNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EngineerCompanyName() As String
            Get
                Return Me.engineerCompanyNameField
            End Get
            Set
                Me.engineerCompanyNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ContactDataStructure() As String
            Get
                Return Me.contactDataStructureField
            End Get
            Set
                Me.contactDataStructureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectOwner() As String
            Get
                Return Me.projectOwnerField
            End Get
            Set
                Me.projectOwnerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OpenedBy() As String
            Get
                Return Me.openedByField
            End Get
            Set
                Me.openedByField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CheckedOutBy() As String
            Get
                Return Me.checkedOutByField
            End Get
            Set
                Me.checkedOutByField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RevisionDate() As Date
            Get
                Return Me.revisionDateField
            End Get
            Set
                Me.revisionDateField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class PumpPackage
        
        Private equipmentIdField As String
        
        Private revisionField As Decimal
        
        Private manufacturerField As String
        
        Private flowField As Single
        
        Private headField As Single
        
        Private systemField As String
        
        Private chillerIdField As String
        
        '''<remarks/>
        Public Property EquipmentId() As String
            Get
                Return Me.equipmentIdField
            End Get
            Set
                Me.equipmentIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Manufacturer() As String
            Get
                Return Me.manufacturerField
            End Get
            Set
                Me.manufacturerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Flow() As Single
            Get
                Return Me.flowField
            End Get
            Set
                Me.flowField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Head() As Single
            Get
                Return Me.headField
            End Get
            Set
                Me.headField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property System() As String
            Get
                Return Me.systemField
            End Get
            Set
                Me.systemField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ChillerId() As String
            Get
                Return Me.chillerIdField
            End Get
            Set
                Me.chillerIdField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class RatingEquipment
        
        Private projectIDField As String
        
        Private projectRevisionField As Integer
        
        Private equipmentIDField As String
        
        Private revisionField As Decimal
        
        Private ratingEquipmentXMLField As String
        
        '''<remarks/>
        Public Property ProjectID() As String
            Get
                Return Me.projectIDField
            End Get
            Set
                Me.projectIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectRevision() As Integer
            Get
                Return Me.projectRevisionField
            End Get
            Set
                Me.projectRevisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EquipmentID() As String
            Get
                Return Me.equipmentIDField
            End Get
            Set
                Me.equipmentIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RatingEquipmentXML() As String
            Get
                Return Me.ratingEquipmentXMLField
            End Get
            Set
                Me.ratingEquipmentXMLField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class SpecialOptions
        
        Private idField As Integer
        
        Private revisionField As Decimal
        
        Private equipmentIdField As String
        
        Private codeField As String
        
        Private descriptionField As String
        
        Private quantityField As Integer
        
        Private priceField As Single
        
        Private authorizedForField As String
        
        Private authorizedByField As String
        
        '''<remarks/>
        Public Property Id() As Integer
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EquipmentId() As String
            Get
                Return Me.equipmentIdField
            End Get
            Set
                Me.equipmentIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Code() As String
            Get
                Return Me.codeField
            End Get
            Set
                Me.codeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Quantity() As Integer
            Get
                Return Me.quantityField
            End Get
            Set
                Me.quantityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Price() As Single
            Get
                Return Me.priceField
            End Get
            Set
                Me.priceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AuthorizedFor() As String
            Get
                Return Me.authorizedForField
            End Get
            Set
                Me.authorizedForField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AuthorizedBy() As String
            Get
                Return Me.authorizedByField
            End Get
            Set
                Me.authorizedByField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class OrderEntryContacts
        
        Private projectIdField As String
        
        Private nameField As String
        
        Private address1Field As String
        
        Private address2Field As String
        
        Private cityField As String
        
        Private stateField As String
        
        Private zipField As String
        
        Private phoneField As String
        
        Private contactTypeField As String
        
        Private importedFromCloudField As String
        
        '''<remarks/>
        Public Property ProjectId() As String
            Get
                Return Me.projectIdField
            End Get
            Set
                Me.projectIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property address1() As String
            Get
                Return Me.address1Field
            End Get
            Set
                Me.address1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property address2() As String
            Get
                Return Me.address2Field
            End Get
            Set
                Me.address2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property City() As String
            Get
                Return Me.cityField
            End Get
            Set
                Me.cityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property State() As String
            Get
                Return Me.stateField
            End Get
            Set
                Me.stateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Zip() As String
            Get
                Return Me.zipField
            End Get
            Set
                Me.zipField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Phone() As String
            Get
                Return Me.phoneField
            End Get
            Set
                Me.phoneField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ContactType() As String
            Get
                Return Me.contactTypeField
            End Get
            Set
                Me.contactTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ImportedFromCloud() As String
            Get
                Return Me.importedFromCloudField
            End Get
            Set
                Me.importedFromCloudField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class ProjectContacts
        
        Private projectIdField As String
        
        Private contactIdField As String
        
        '''<remarks/>
        Public Property ProjectId() As String
            Get
                Return Me.projectIdField
            End Get
            Set
                Me.projectIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ContactId() As String
            Get
                Return Me.contactIdField
            End Get
            Set
                Me.contactIdField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class Contacts1
        
        Private customerNumField As String
        
        Private repNumField As String
        
        Private firstNameField As String
        
        Private lastNameField As String
        
        Private companyIdField As String
        
        Private emailField As String
        
        Private descriptionField As String
        
        Private line1Field As String
        
        Private line2Field As String
        
        Private cityField As String
        
        Private stateField As String
        
        Private zipCode5Field As String
        
        Private zipCode4Field As String
        
        Private phoneNumAreaCodeField As String
        
        Private phoneNumField As String
        
        Private phoneNumExtensionField As String
        
        Private faxNumField As String
        
        Private faxNumAreaCodeField As String
        
        Private projectIDField As String
        
        '''<remarks/>
        Public Property CustomerNum() As String
            Get
                Return Me.customerNumField
            End Get
            Set
                Me.customerNumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RepNum() As String
            Get
                Return Me.repNumField
            End Get
            Set
                Me.repNumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FirstName() As String
            Get
                Return Me.firstNameField
            End Get
            Set
                Me.firstNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastName() As String
            Get
                Return Me.lastNameField
            End Get
            Set
                Me.lastNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompanyId() As String
            Get
                Return Me.companyIdField
            End Get
            Set
                Me.companyIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Email() As String
            Get
                Return Me.emailField
            End Get
            Set
                Me.emailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Line1() As String
            Get
                Return Me.line1Field
            End Get
            Set
                Me.line1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Line2() As String
            Get
                Return Me.line2Field
            End Get
            Set
                Me.line2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property City() As String
            Get
                Return Me.cityField
            End Get
            Set
                Me.cityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property State() As String
            Get
                Return Me.stateField
            End Get
            Set
                Me.stateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ZipCode5() As String
            Get
                Return Me.zipCode5Field
            End Get
            Set
                Me.zipCode5Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ZipCode4() As String
            Get
                Return Me.zipCode4Field
            End Get
            Set
                Me.zipCode4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhoneNumAreaCode() As String
            Get
                Return Me.phoneNumAreaCodeField
            End Get
            Set
                Me.phoneNumAreaCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhoneNum() As String
            Get
                Return Me.phoneNumField
            End Get
            Set
                Me.phoneNumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhoneNumExtension() As String
            Get
                Return Me.phoneNumExtensionField
            End Get
            Set
                Me.phoneNumExtensionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FaxNum() As String
            Get
                Return Me.faxNumField
            End Get
            Set
                Me.faxNumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FaxNumAreaCode() As String
            Get
                Return Me.faxNumAreaCodeField
            End Get
            Set
                Me.faxNumAreaCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectID() As String
            Get
                Return Me.projectIDField
            End Get
            Set
                Me.projectIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class Contacts
        
        Private customerNumField As String
        
        Private repNumField As String
        
        Private firstNameField As String
        
        Private lastNameField As String
        
        Private companyIdField As String
        
        Private emailField As String
        
        Private descriptionField As String
        
        Private line1Field As String
        
        Private line2Field As String
        
        Private cityField As String
        
        Private stateField As String
        
        Private zipCode5Field As String
        
        Private zipCode4Field As String
        
        Private phoneNumAreaCodeField As String
        
        Private phoneNumField As String
        
        Private phoneNumExtensionField As String
        
        Private faxNumField As String
        
        Private faxNumAreaCodeField As String
        
        '''<remarks/>
        Public Property CustomerNum() As String
            Get
                Return Me.customerNumField
            End Get
            Set
                Me.customerNumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RepNum() As String
            Get
                Return Me.repNumField
            End Get
            Set
                Me.repNumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FirstName() As String
            Get
                Return Me.firstNameField
            End Get
            Set
                Me.firstNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastName() As String
            Get
                Return Me.lastNameField
            End Get
            Set
                Me.lastNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompanyId() As String
            Get
                Return Me.companyIdField
            End Get
            Set
                Me.companyIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Email() As String
            Get
                Return Me.emailField
            End Get
            Set
                Me.emailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Line1() As String
            Get
                Return Me.line1Field
            End Get
            Set
                Me.line1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Line2() As String
            Get
                Return Me.line2Field
            End Get
            Set
                Me.line2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property City() As String
            Get
                Return Me.cityField
            End Get
            Set
                Me.cityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property State() As String
            Get
                Return Me.stateField
            End Get
            Set
                Me.stateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ZipCode5() As String
            Get
                Return Me.zipCode5Field
            End Get
            Set
                Me.zipCode5Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ZipCode4() As String
            Get
                Return Me.zipCode4Field
            End Get
            Set
                Me.zipCode4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhoneNumAreaCode() As String
            Get
                Return Me.phoneNumAreaCodeField
            End Get
            Set
                Me.phoneNumAreaCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhoneNum() As String
            Get
                Return Me.phoneNumField
            End Get
            Set
                Me.phoneNumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhoneNumExtension() As String
            Get
                Return Me.phoneNumExtensionField
            End Get
            Set
                Me.phoneNumExtensionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FaxNum() As String
            Get
                Return Me.faxNumField
            End Get
            Set
                Me.faxNumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FaxNumAreaCode() As String
            Get
                Return Me.faxNumAreaCodeField
            End Get
            Set
                Me.faxNumAreaCodeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class Companies
        
        Private customerNumField As String
        
        Private repNumField As String
        
        Private nameField As String
        
        Private websiteField As String
        
        Private emailField As String
        
        Private descriptionField As String
        
        Private line1Field As String
        
        Private line2Field As String
        
        Private cityField As String
        
        Private stateField As String
        
        Private zipCode5Field As String
        
        Private zipCode4Field As String
        
        Private phoneNumAreaCodeField As String
        
        Private phoneNumField As String
        
        Private phoneNumExtensionField As String
        
        Private faxNumField As String
        
        Private faxNumAreaCodeField As String
        
        '''<remarks/>
        Public Property CustomerNum() As String
            Get
                Return Me.customerNumField
            End Get
            Set
                Me.customerNumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RepNum() As String
            Get
                Return Me.repNumField
            End Get
            Set
                Me.repNumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Website() As String
            Get
                Return Me.websiteField
            End Get
            Set
                Me.websiteField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Email() As String
            Get
                Return Me.emailField
            End Get
            Set
                Me.emailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Line1() As String
            Get
                Return Me.line1Field
            End Get
            Set
                Me.line1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Line2() As String
            Get
                Return Me.line2Field
            End Get
            Set
                Me.line2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property City() As String
            Get
                Return Me.cityField
            End Get
            Set
                Me.cityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property State() As String
            Get
                Return Me.stateField
            End Get
            Set
                Me.stateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ZipCode5() As String
            Get
                Return Me.zipCode5Field
            End Get
            Set
                Me.zipCode5Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ZipCode4() As String
            Get
                Return Me.zipCode4Field
            End Get
            Set
                Me.zipCode4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhoneNumAreaCode() As String
            Get
                Return Me.phoneNumAreaCodeField
            End Get
            Set
                Me.phoneNumAreaCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhoneNum() As String
            Get
                Return Me.phoneNumField
            End Get
            Set
                Me.phoneNumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhoneNumExtension() As String
            Get
                Return Me.phoneNumExtensionField
            End Get
            Set
                Me.phoneNumExtensionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FaxNum() As String
            Get
                Return Me.faxNumField
            End Get
            Set
                Me.faxNumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FaxNumAreaCode() As String
            Get
                Return Me.faxNumAreaCodeField
            End Get
            Set
                Me.faxNumAreaCodeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class UnitCooler
        
        Private equipmentIdField As String
        
        Private evaporatorTempField As Single
        
        Private boxTempField As Single
        
        Private condensingTempField As Single
        
        Private tempDifferenceField As Single
        
        Private liquidTempField As Single
        
        Private capacityField As Single
        
        Private refrigerantField As String
        
        Private revisionField As Decimal
        
        Private defrostVoltageField As String
        
        Private fanVoltageField As String
        
        Private unitCoolerTypeField As String
        
        '''<remarks/>
        Public Property EquipmentId() As String
            Get
                Return Me.equipmentIdField
            End Get
            Set
                Me.equipmentIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EvaporatorTemp() As Single
            Get
                Return Me.evaporatorTempField
            End Get
            Set
                Me.evaporatorTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BoxTemp() As Single
            Get
                Return Me.boxTempField
            End Get
            Set
                Me.boxTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondensingTemp() As Single
            Get
                Return Me.condensingTempField
            End Get
            Set
                Me.condensingTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TempDifference() As Single
            Get
                Return Me.tempDifferenceField
            End Get
            Set
                Me.tempDifferenceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LiquidTemp() As Single
            Get
                Return Me.liquidTempField
            End Get
            Set
                Me.liquidTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Capacity() As Single
            Get
                Return Me.capacityField
            End Get
            Set
                Me.capacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Refrigerant() As String
            Get
                Return Me.refrigerantField
            End Get
            Set
                Me.refrigerantField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DefrostVoltage() As String
            Get
                Return Me.defrostVoltageField
            End Get
            Set
                Me.defrostVoltageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FanVoltage() As String
            Get
                Return Me.fanVoltageField
            End Get
            Set
                Me.fanVoltageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitCoolerType() As String
            Get
                Return Me.unitCoolerTypeField
            End Get
            Set
                Me.unitCoolerTypeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class UnitCoolerProcesses
        
        Private processIdField As String
        
        Private revisionField As Decimal
        
        Private revisionDateField As Date
        
        Private projectRevisionField As Integer
        
        Private revisionDescriptionField As String
        
        Private createdByField As String
        
        Private versionField As String
        
        Private notesField As String
        
        Private nameField As String
        
        Private condensingUnitSeriesField As String
        
        Private shouldAdjustCapacityForRunTimeField As Boolean
        
        Private numRunTimeHoursField As Single
        
        Private compressorTypeField As String
        
        Private refrigerantField As String
        
        Private numCompressorsPerUnitField As Integer
        
        Private numCircuitsPerUnitField As Integer
        
        Private capacityRequiredField As Single
        
        Private altitudeField As Single
        
        Private numCondensingUnitsRequiredField As Integer
        
        Private suctionTemperatureField As Integer
        
        Private numRoomsField As Integer
        
        Private ambientTemperatureField As Single
        
        Private ambientMinTemperatureField As Single
        
        Private ambientMaxTemperatureField As Single
        
        Private ambientTemperatureIncrementField As Single
        
        Private roomTemperatureField As Single
        
        Private roomMinTemperatureField As Single
        
        Private roomMaxTemperatureField As Single
        
        Private roomTemperatureIncrementField As Single
        
        Private condenserCapacityPerDegreeField As Single
        
        Private condensingUnitModelField As String
        
        Private seriesField As String
        
        Private suctionLineLossField As Integer
        
        Private shouldOverrideUnitCoolerCapacityCriteriaField As Boolean
        
        Private selectedUnitCoolerIndexField As Integer
        
        Private unitCooler1ModelField As String
        
        Private unitCooler2ModelField As String
        
        Private unitCooler3ModelField As String
        
        Private unitCooler1CapacityField As Single
        
        Private unitCooler2CapacityField As Single
        
        Private unitCooler3CapacityField As Single
        
        Private unitCooler1QuantityField As Integer
        
        Private unitCooler2QuantityField As Integer
        
        Private unitCooler3QuantityField As Integer
        
        Private evaporator1CapacityPerDegreeField As Single
        
        Private evaporator2CapacityPerDegreeField As Single
        
        Private evaporator3CapacityPerDegreeField As Single
        
        Private isThereAUnitCooler1Field As Boolean
        
        Private isThereAUnitCooler2Field As Boolean
        
        Private isThereAUnitCooler3Field As Boolean
        
        Private isThereACustomUnitCoolerField As Boolean
        
        Private customUnitCoolerModelField As String
        
        Private customUnitCoolerCapacityField As Single
        
        Private customUnitCoolerQuantityField As Integer
        
        Private customUnitCoolerCapacityPerDegreeField As Single
        
        Private balanceField As Single
        
        Private evaporatorTemperatureField As Single
        
        Private airTemperatureField As Single
        
        Private condenserTemperatureField As Single
        
        Private capacityField As Single
        
        Private runTimeField As Single
        
        Private unitKwField As Single
        
        Private condenserCapacityField As Single
        
        Private unitAmps230Field As Single
        
        Private unitAmps460Field As Single
        
        Private unitEerField As Single
        
        Private temperatureDifferenceField As Single
        
        Private unitMca230Field As Single
        
        Private unitMca460Field As Single
        
        Private dimensionsField As String
        
        Private baseListPriceField As Integer
        
        Private customCondensingUnitField As String
        
        Private divisionField As String
        
        Private objectLinkXMLField As String
        
        Private objectLinkTypeField As String
        
        Private static_pressure_1Field As Single
        
        Private static_pressure_2Field As Single
        
        Private static_pressure_3Field As Single
        
        Private dOEModelField As String
        
        '''<remarks/>
        Public Property ProcessId() As String
            Get
                Return Me.processIdField
            End Get
            Set
                Me.processIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RevisionDate() As Date
            Get
                Return Me.revisionDateField
            End Get
            Set
                Me.revisionDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectRevision() As Integer
            Get
                Return Me.projectRevisionField
            End Get
            Set
                Me.projectRevisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RevisionDescription() As String
            Get
                Return Me.revisionDescriptionField
            End Get
            Set
                Me.revisionDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreatedBy() As String
            Get
                Return Me.createdByField
            End Get
            Set
                Me.createdByField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Version() As String
            Get
                Return Me.versionField
            End Get
            Set
                Me.versionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Notes() As String
            Get
                Return Me.notesField
            End Get
            Set
                Me.notesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondensingUnitSeries() As String
            Get
                Return Me.condensingUnitSeriesField
            End Get
            Set
                Me.condensingUnitSeriesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ShouldAdjustCapacityForRunTime() As Boolean
            Get
                Return Me.shouldAdjustCapacityForRunTimeField
            End Get
            Set
                Me.shouldAdjustCapacityForRunTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumRunTimeHours() As Single
            Get
                Return Me.numRunTimeHoursField
            End Get
            Set
                Me.numRunTimeHoursField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompressorType() As String
            Get
                Return Me.compressorTypeField
            End Get
            Set
                Me.compressorTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Refrigerant() As String
            Get
                Return Me.refrigerantField
            End Get
            Set
                Me.refrigerantField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumCompressorsPerUnit() As Integer
            Get
                Return Me.numCompressorsPerUnitField
            End Get
            Set
                Me.numCompressorsPerUnitField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumCircuitsPerUnit() As Integer
            Get
                Return Me.numCircuitsPerUnitField
            End Get
            Set
                Me.numCircuitsPerUnitField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CapacityRequired() As Single
            Get
                Return Me.capacityRequiredField
            End Get
            Set
                Me.capacityRequiredField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Altitude() As Single
            Get
                Return Me.altitudeField
            End Get
            Set
                Me.altitudeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumCondensingUnitsRequired() As Integer
            Get
                Return Me.numCondensingUnitsRequiredField
            End Get
            Set
                Me.numCondensingUnitsRequiredField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SuctionTemperature() As Integer
            Get
                Return Me.suctionTemperatureField
            End Get
            Set
                Me.suctionTemperatureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumRooms() As Integer
            Get
                Return Me.numRoomsField
            End Get
            Set
                Me.numRoomsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AmbientTemperature() As Single
            Get
                Return Me.ambientTemperatureField
            End Get
            Set
                Me.ambientTemperatureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AmbientMinTemperature() As Single
            Get
                Return Me.ambientMinTemperatureField
            End Get
            Set
                Me.ambientMinTemperatureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AmbientMaxTemperature() As Single
            Get
                Return Me.ambientMaxTemperatureField
            End Get
            Set
                Me.ambientMaxTemperatureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AmbientTemperatureIncrement() As Single
            Get
                Return Me.ambientTemperatureIncrementField
            End Get
            Set
                Me.ambientTemperatureIncrementField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RoomTemperature() As Single
            Get
                Return Me.roomTemperatureField
            End Get
            Set
                Me.roomTemperatureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RoomMinTemperature() As Single
            Get
                Return Me.roomMinTemperatureField
            End Get
            Set
                Me.roomMinTemperatureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RoomMaxTemperature() As Single
            Get
                Return Me.roomMaxTemperatureField
            End Get
            Set
                Me.roomMaxTemperatureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RoomTemperatureIncrement() As Single
            Get
                Return Me.roomTemperatureIncrementField
            End Get
            Set
                Me.roomTemperatureIncrementField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondenserCapacityPerDegree() As Single
            Get
                Return Me.condenserCapacityPerDegreeField
            End Get
            Set
                Me.condenserCapacityPerDegreeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondensingUnitModel() As String
            Get
                Return Me.condensingUnitModelField
            End Get
            Set
                Me.condensingUnitModelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Series() As String
            Get
                Return Me.seriesField
            End Get
            Set
                Me.seriesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SuctionLineLoss() As Integer
            Get
                Return Me.suctionLineLossField
            End Get
            Set
                Me.suctionLineLossField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ShouldOverrideUnitCoolerCapacityCriteria() As Boolean
            Get
                Return Me.shouldOverrideUnitCoolerCapacityCriteriaField
            End Get
            Set
                Me.shouldOverrideUnitCoolerCapacityCriteriaField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SelectedUnitCoolerIndex() As Integer
            Get
                Return Me.selectedUnitCoolerIndexField
            End Get
            Set
                Me.selectedUnitCoolerIndexField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitCooler1Model() As String
            Get
                Return Me.unitCooler1ModelField
            End Get
            Set
                Me.unitCooler1ModelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitCooler2Model() As String
            Get
                Return Me.unitCooler2ModelField
            End Get
            Set
                Me.unitCooler2ModelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitCooler3Model() As String
            Get
                Return Me.unitCooler3ModelField
            End Get
            Set
                Me.unitCooler3ModelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitCooler1Capacity() As Single
            Get
                Return Me.unitCooler1CapacityField
            End Get
            Set
                Me.unitCooler1CapacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitCooler2Capacity() As Single
            Get
                Return Me.unitCooler2CapacityField
            End Get
            Set
                Me.unitCooler2CapacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitCooler3Capacity() As Single
            Get
                Return Me.unitCooler3CapacityField
            End Get
            Set
                Me.unitCooler3CapacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitCooler1Quantity() As Integer
            Get
                Return Me.unitCooler1QuantityField
            End Get
            Set
                Me.unitCooler1QuantityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitCooler2Quantity() As Integer
            Get
                Return Me.unitCooler2QuantityField
            End Get
            Set
                Me.unitCooler2QuantityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitCooler3Quantity() As Integer
            Get
                Return Me.unitCooler3QuantityField
            End Get
            Set
                Me.unitCooler3QuantityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Evaporator1CapacityPerDegree() As Single
            Get
                Return Me.evaporator1CapacityPerDegreeField
            End Get
            Set
                Me.evaporator1CapacityPerDegreeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Evaporator2CapacityPerDegree() As Single
            Get
                Return Me.evaporator2CapacityPerDegreeField
            End Get
            Set
                Me.evaporator2CapacityPerDegreeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Evaporator3CapacityPerDegree() As Single
            Get
                Return Me.evaporator3CapacityPerDegreeField
            End Get
            Set
                Me.evaporator3CapacityPerDegreeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IsThereAUnitCooler1() As Boolean
            Get
                Return Me.isThereAUnitCooler1Field
            End Get
            Set
                Me.isThereAUnitCooler1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IsThereAUnitCooler2() As Boolean
            Get
                Return Me.isThereAUnitCooler2Field
            End Get
            Set
                Me.isThereAUnitCooler2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IsThereAUnitCooler3() As Boolean
            Get
                Return Me.isThereAUnitCooler3Field
            End Get
            Set
                Me.isThereAUnitCooler3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IsThereACustomUnitCooler() As Boolean
            Get
                Return Me.isThereACustomUnitCoolerField
            End Get
            Set
                Me.isThereACustomUnitCoolerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomUnitCoolerModel() As String
            Get
                Return Me.customUnitCoolerModelField
            End Get
            Set
                Me.customUnitCoolerModelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomUnitCoolerCapacity() As Single
            Get
                Return Me.customUnitCoolerCapacityField
            End Get
            Set
                Me.customUnitCoolerCapacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomUnitCoolerQuantity() As Integer
            Get
                Return Me.customUnitCoolerQuantityField
            End Get
            Set
                Me.customUnitCoolerQuantityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomUnitCoolerCapacityPerDegree() As Single
            Get
                Return Me.customUnitCoolerCapacityPerDegreeField
            End Get
            Set
                Me.customUnitCoolerCapacityPerDegreeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Balance() As Single
            Get
                Return Me.balanceField
            End Get
            Set
                Me.balanceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EvaporatorTemperature() As Single
            Get
                Return Me.evaporatorTemperatureField
            End Get
            Set
                Me.evaporatorTemperatureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AirTemperature() As Single
            Get
                Return Me.airTemperatureField
            End Get
            Set
                Me.airTemperatureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondenserTemperature() As Single
            Get
                Return Me.condenserTemperatureField
            End Get
            Set
                Me.condenserTemperatureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Capacity() As Single
            Get
                Return Me.capacityField
            End Get
            Set
                Me.capacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RunTime() As Single
            Get
                Return Me.runTimeField
            End Get
            Set
                Me.runTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitKw() As Single
            Get
                Return Me.unitKwField
            End Get
            Set
                Me.unitKwField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondenserCapacity() As Single
            Get
                Return Me.condenserCapacityField
            End Get
            Set
                Me.condenserCapacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitAmps230() As Single
            Get
                Return Me.unitAmps230Field
            End Get
            Set
                Me.unitAmps230Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitAmps460() As Single
            Get
                Return Me.unitAmps460Field
            End Get
            Set
                Me.unitAmps460Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitEer() As Single
            Get
                Return Me.unitEerField
            End Get
            Set
                Me.unitEerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TemperatureDifference() As Single
            Get
                Return Me.temperatureDifferenceField
            End Get
            Set
                Me.temperatureDifferenceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitMca230() As Single
            Get
                Return Me.unitMca230Field
            End Get
            Set
                Me.unitMca230Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnitMca460() As Single
            Get
                Return Me.unitMca460Field
            End Get
            Set
                Me.unitMca460Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Dimensions() As String
            Get
                Return Me.dimensionsField
            End Get
            Set
                Me.dimensionsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BaseListPrice() As Integer
            Get
                Return Me.baseListPriceField
            End Get
            Set
                Me.baseListPriceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomCondensingUnit() As String
            Get
                Return Me.customCondensingUnitField
            End Get
            Set
                Me.customCondensingUnitField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Division() As String
            Get
                Return Me.divisionField
            End Get
            Set
                Me.divisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ObjectLinkXML() As String
            Get
                Return Me.objectLinkXMLField
            End Get
            Set
                Me.objectLinkXMLField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ObjectLinkType() As String
            Get
                Return Me.objectLinkTypeField
            End Get
            Set
                Me.objectLinkTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property static_pressure_1() As Single
            Get
                Return Me.static_pressure_1Field
            End Get
            Set
                Me.static_pressure_1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property static_pressure_2() As Single
            Get
                Return Me.static_pressure_2Field
            End Get
            Set
                Me.static_pressure_2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property static_pressure_3() As Single
            Get
                Return Me.static_pressure_3Field
            End Get
            Set
                Me.static_pressure_3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DOEModel() As String
            Get
                Return Me.dOEModelField
            End Get
            Set
                Me.dOEModelField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class WCChillerProcesses
        
        Private processIDField As String
        
        Private revisionField As Decimal
        
        Private revisionDateField As Date
        
        Private projectRevisionField As Integer
        
        Private processRevisionDescriptionField As String
        
        Private createdByField As String
        
        Private versionField As String
        
        Private notesField As String
        
        Private nameField As String
        
        Private seriesField As String
        
        Private newCoefficientsField As Boolean
        
        Private modelField As String
        
        Private modelDescField As String
        
        Private fluidField As String
        
        Private glycolPercentageField As Single
        
        Private coolingMediaField As String
        
        Private specificHeatField As Single
        
        Private specificGravityField As Single
        
        Private subCoolingField As Boolean
        
        Private refrigerantField As String
        
        Private tempRangeField As Single
        
        Private ambientTempField As Single
        
        Private leavingFluidTempField As Single
        
        Private systemField As String
        
        Private hertzField As Single
        
        Private voltsField As Single
        
        Private approachField As String
        
        Private safetyOverrideField As Boolean
        
        Private circuit1Field As Boolean
        
        Private circuit2Field As Boolean
        
        Private numCompressors1Field As Single
        
        Private numCompressors2Field As Single
        
        Private compressors1Field As String
        
        Private compressors2Field As String
        
        Private numCoils1Field As Single
        
        Private numCoils2Field As Single
        
        Private condenser1Field As String
        
        Private condenser2Field As String
        
        Private condenserTD1Field As Single
        
        Private condenserTD2Field As Single
        
        Private dischargeLineLossField As Single
        
        Private suctionLineLossField As Single
        
        Private altitudeField As Single
        
        Private cfmOverrideField As Single
        
        Private condenserCapacity1Field As Single
        
        Private condenserCapacity2Field As Single
        
        Private evaporatorModelField As String
        
        Private evaporatorModelDescField As String
        
        Private numEvapField As Single
        
        Private foulingFactorField As Single
        
        Private capacityTypeField As String
        
        Private evaporatorCapacityField As Single
        
        Private catalogRatingField As Boolean
        
        Private approachRangeField As String
        
        Private evap8Degr1Field As Single
        
        Private evap8Degr2Field As Single
        
        Private evap10Degr1Field As Single
        
        Private evap10Degr2Field As Single
        
        Private divisionField As String
        
        '''<remarks/>
        Public Property ProcessID() As String
            Get
                Return Me.processIDField
            End Get
            Set
                Me.processIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RevisionDate() As Date
            Get
                Return Me.revisionDateField
            End Get
            Set
                Me.revisionDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectRevision() As Integer
            Get
                Return Me.projectRevisionField
            End Get
            Set
                Me.projectRevisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProcessRevisionDescription() As String
            Get
                Return Me.processRevisionDescriptionField
            End Get
            Set
                Me.processRevisionDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreatedBy() As String
            Get
                Return Me.createdByField
            End Get
            Set
                Me.createdByField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Version() As String
            Get
                Return Me.versionField
            End Get
            Set
                Me.versionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Notes() As String
            Get
                Return Me.notesField
            End Get
            Set
                Me.notesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Series() As String
            Get
                Return Me.seriesField
            End Get
            Set
                Me.seriesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NewCoefficients() As Boolean
            Get
                Return Me.newCoefficientsField
            End Get
            Set
                Me.newCoefficientsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ModelDesc() As String
            Get
                Return Me.modelDescField
            End Get
            Set
                Me.modelDescField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Fluid() As String
            Get
                Return Me.fluidField
            End Get
            Set
                Me.fluidField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GlycolPercentage() As Single
            Get
                Return Me.glycolPercentageField
            End Get
            Set
                Me.glycolPercentageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoolingMedia() As String
            Get
                Return Me.coolingMediaField
            End Get
            Set
                Me.coolingMediaField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SpecificHeat() As Single
            Get
                Return Me.specificHeatField
            End Get
            Set
                Me.specificHeatField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SpecificGravity() As Single
            Get
                Return Me.specificGravityField
            End Get
            Set
                Me.specificGravityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SubCooling() As Boolean
            Get
                Return Me.subCoolingField
            End Get
            Set
                Me.subCoolingField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Refrigerant() As String
            Get
                Return Me.refrigerantField
            End Get
            Set
                Me.refrigerantField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TempRange() As Single
            Get
                Return Me.tempRangeField
            End Get
            Set
                Me.tempRangeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AmbientTemp() As Single
            Get
                Return Me.ambientTempField
            End Get
            Set
                Me.ambientTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LeavingFluidTemp() As Single
            Get
                Return Me.leavingFluidTempField
            End Get
            Set
                Me.leavingFluidTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property System() As String
            Get
                Return Me.systemField
            End Get
            Set
                Me.systemField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Hertz() As Single
            Get
                Return Me.hertzField
            End Get
            Set
                Me.hertzField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Volts() As Single
            Get
                Return Me.voltsField
            End Get
            Set
                Me.voltsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Approach() As String
            Get
                Return Me.approachField
            End Get
            Set
                Me.approachField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SafetyOverride() As Boolean
            Get
                Return Me.safetyOverrideField
            End Get
            Set
                Me.safetyOverrideField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Circuit1() As Boolean
            Get
                Return Me.circuit1Field
            End Get
            Set
                Me.circuit1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Circuit2() As Boolean
            Get
                Return Me.circuit2Field
            End Get
            Set
                Me.circuit2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumCompressors1() As Single
            Get
                Return Me.numCompressors1Field
            End Get
            Set
                Me.numCompressors1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumCompressors2() As Single
            Get
                Return Me.numCompressors2Field
            End Get
            Set
                Me.numCompressors2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Compressors1() As String
            Get
                Return Me.compressors1Field
            End Get
            Set
                Me.compressors1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Compressors2() As String
            Get
                Return Me.compressors2Field
            End Get
            Set
                Me.compressors2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumCoils1() As Single
            Get
                Return Me.numCoils1Field
            End Get
            Set
                Me.numCoils1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumCoils2() As Single
            Get
                Return Me.numCoils2Field
            End Get
            Set
                Me.numCoils2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Condenser1() As String
            Get
                Return Me.condenser1Field
            End Get
            Set
                Me.condenser1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Condenser2() As String
            Get
                Return Me.condenser2Field
            End Get
            Set
                Me.condenser2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondenserTD1() As Single
            Get
                Return Me.condenserTD1Field
            End Get
            Set
                Me.condenserTD1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondenserTD2() As Single
            Get
                Return Me.condenserTD2Field
            End Get
            Set
                Me.condenserTD2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DischargeLineLoss() As Single
            Get
                Return Me.dischargeLineLossField
            End Get
            Set
                Me.dischargeLineLossField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SuctionLineLoss() As Single
            Get
                Return Me.suctionLineLossField
            End Get
            Set
                Me.suctionLineLossField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Altitude() As Single
            Get
                Return Me.altitudeField
            End Get
            Set
                Me.altitudeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CfmOverride() As Single
            Get
                Return Me.cfmOverrideField
            End Get
            Set
                Me.cfmOverrideField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondenserCapacity1() As Single
            Get
                Return Me.condenserCapacity1Field
            End Get
            Set
                Me.condenserCapacity1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondenserCapacity2() As Single
            Get
                Return Me.condenserCapacity2Field
            End Get
            Set
                Me.condenserCapacity2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EvaporatorModel() As String
            Get
                Return Me.evaporatorModelField
            End Get
            Set
                Me.evaporatorModelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EvaporatorModelDesc() As String
            Get
                Return Me.evaporatorModelDescField
            End Get
            Set
                Me.evaporatorModelDescField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumEvap() As Single
            Get
                Return Me.numEvapField
            End Get
            Set
                Me.numEvapField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FoulingFactor() As Single
            Get
                Return Me.foulingFactorField
            End Get
            Set
                Me.foulingFactorField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CapacityType() As String
            Get
                Return Me.capacityTypeField
            End Get
            Set
                Me.capacityTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EvaporatorCapacity() As Single
            Get
                Return Me.evaporatorCapacityField
            End Get
            Set
                Me.evaporatorCapacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CatalogRating() As Boolean
            Get
                Return Me.catalogRatingField
            End Get
            Set
                Me.catalogRatingField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ApproachRange() As String
            Get
                Return Me.approachRangeField
            End Get
            Set
                Me.approachRangeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Evap8Degr1() As Single
            Get
                Return Me.evap8Degr1Field
            End Get
            Set
                Me.evap8Degr1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Evap8Degr2() As Single
            Get
                Return Me.evap8Degr2Field
            End Get
            Set
                Me.evap8Degr2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Evap10Degr1() As Single
            Get
                Return Me.evap10Degr1Field
            End Get
            Set
                Me.evap10Degr1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Evap10Degr2() As Single
            Get
                Return Me.evap10Degr2Field
            End Get
            Set
                Me.evap10Degr2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Division() As String
            Get
                Return Me.divisionField
            End Get
            Set
                Me.divisionField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://raesolutions.net/")>  _
    Partial Public Class ACChillerProcesses
        
        Private processIDField As String
        
        Private revisionField As Decimal
        
        Private revisionDateField As Date
        
        Private projectRevisionField As Integer
        
        Private processRevisionDescriptionField As String
        
        Private createdByField As String
        
        Private versionField As String
        
        Private notesField As String
        
        Private nameField As String
        
        Private seriesField As String
        
        Private newCoefficientsField As Boolean
        
        Private modelField As String
        
        Private modelDescField As String
        
        Private fluidField As String
        
        Private glycolPercentageField As Single
        
        Private coolingMediaField As String
        
        Private specificHeatField As Single
        
        Private specificGravityField As Single
        
        Private subCoolingField As Boolean
        
        Private refrigerantField As String
        
        Private tempRangeField As Single
        
        Private ambientTempField As Single
        
        Private leavingFluidTempField As Single
        
        Private systemField As String
        
        Private hertzField As Single
        
        Private voltsField As Single
        
        Private approachField As String
        
        Private safetyOverrideField As Boolean
        
        Private circuit1Field As Boolean
        
        Private circuit2Field As Boolean
        
        Private numCompressors1Field As Integer
        
        Private numCompressors2Field As Integer
        
        Private compressors1Field As String
        
        Private compressors2Field As String
        
        Private numCoils1Field As Integer
        
        Private numCoils2Field As Integer
        
        Private condenser1Field As String
        
        Private condenser2Field As String
        
        Private finsPerInch1Field As Integer
        
        Private finsPerInch2Field As Integer
        
        Private subCooling1Field As Boolean
        
        Private subCooling2Field As Boolean
        
        Private subCoolingPercent1Field As Single
        
        Private subCoolingPercent2Field As Single
        
        Private condenserTD1Field As Single
        
        Private condenserTD2Field As Single
        
        Private finHeight1Field As Single
        
        Private finHeight2Field As Single
        
        Private finLength1Field As Single
        
        Private finLength2Field As Single
        
        Private dischargeLineLossField As Single
        
        Private suctionLineLossField As Single
        
        Private altitudeField As Single
        
        Private fanField As String
        
        Private cfmOverrideField As Single
        
        Private numFans1Field As Single
        
        Private numFans2Field As Single
        
        Private condenserCapacity1Field As Single
        
        Private condenserCapacity2Field As Single
        
        Private evaporatorModelField As String
        
        Private evaporatorModelDescField As String
        
        Private numEvapField As Integer
        
        Private foulingFactorField As Single
        
        Private capacityTypeField As String
        
        Private evaporatorCapacityField As Integer
        
        Private catalogRatingField As Boolean
        
        Private approachRangeField As String
        
        Private evap8Degr1Field As Single
        
        Private evap8Degr2Field As Single
        
        Private evap10Degr1Field As Integer
        
        Private evap10Degr2Field As Single
        
        Private divisionField As String
        
        Private fanWattsField As Single
        
        '''<remarks/>
        Public Property ProcessID() As String
            Get
                Return Me.processIDField
            End Get
            Set
                Me.processIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As Decimal
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RevisionDate() As Date
            Get
                Return Me.revisionDateField
            End Get
            Set
                Me.revisionDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectRevision() As Integer
            Get
                Return Me.projectRevisionField
            End Get
            Set
                Me.projectRevisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProcessRevisionDescription() As String
            Get
                Return Me.processRevisionDescriptionField
            End Get
            Set
                Me.processRevisionDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreatedBy() As String
            Get
                Return Me.createdByField
            End Get
            Set
                Me.createdByField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Version() As String
            Get
                Return Me.versionField
            End Get
            Set
                Me.versionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Notes() As String
            Get
                Return Me.notesField
            End Get
            Set
                Me.notesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Series() As String
            Get
                Return Me.seriesField
            End Get
            Set
                Me.seriesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NewCoefficients() As Boolean
            Get
                Return Me.newCoefficientsField
            End Get
            Set
                Me.newCoefficientsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ModelDesc() As String
            Get
                Return Me.modelDescField
            End Get
            Set
                Me.modelDescField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Fluid() As String
            Get
                Return Me.fluidField
            End Get
            Set
                Me.fluidField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GlycolPercentage() As Single
            Get
                Return Me.glycolPercentageField
            End Get
            Set
                Me.glycolPercentageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoolingMedia() As String
            Get
                Return Me.coolingMediaField
            End Get
            Set
                Me.coolingMediaField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SpecificHeat() As Single
            Get
                Return Me.specificHeatField
            End Get
            Set
                Me.specificHeatField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SpecificGravity() As Single
            Get
                Return Me.specificGravityField
            End Get
            Set
                Me.specificGravityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SubCooling() As Boolean
            Get
                Return Me.subCoolingField
            End Get
            Set
                Me.subCoolingField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Refrigerant() As String
            Get
                Return Me.refrigerantField
            End Get
            Set
                Me.refrigerantField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TempRange() As Single
            Get
                Return Me.tempRangeField
            End Get
            Set
                Me.tempRangeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AmbientTemp() As Single
            Get
                Return Me.ambientTempField
            End Get
            Set
                Me.ambientTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LeavingFluidTemp() As Single
            Get
                Return Me.leavingFluidTempField
            End Get
            Set
                Me.leavingFluidTempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property System() As String
            Get
                Return Me.systemField
            End Get
            Set
                Me.systemField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Hertz() As Single
            Get
                Return Me.hertzField
            End Get
            Set
                Me.hertzField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Volts() As Single
            Get
                Return Me.voltsField
            End Get
            Set
                Me.voltsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Approach() As String
            Get
                Return Me.approachField
            End Get
            Set
                Me.approachField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SafetyOverride() As Boolean
            Get
                Return Me.safetyOverrideField
            End Get
            Set
                Me.safetyOverrideField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Circuit1() As Boolean
            Get
                Return Me.circuit1Field
            End Get
            Set
                Me.circuit1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Circuit2() As Boolean
            Get
                Return Me.circuit2Field
            End Get
            Set
                Me.circuit2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumCompressors1() As Integer
            Get
                Return Me.numCompressors1Field
            End Get
            Set
                Me.numCompressors1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumCompressors2() As Integer
            Get
                Return Me.numCompressors2Field
            End Get
            Set
                Me.numCompressors2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Compressors1() As String
            Get
                Return Me.compressors1Field
            End Get
            Set
                Me.compressors1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Compressors2() As String
            Get
                Return Me.compressors2Field
            End Get
            Set
                Me.compressors2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumCoils1() As Integer
            Get
                Return Me.numCoils1Field
            End Get
            Set
                Me.numCoils1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumCoils2() As Integer
            Get
                Return Me.numCoils2Field
            End Get
            Set
                Me.numCoils2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Condenser1() As String
            Get
                Return Me.condenser1Field
            End Get
            Set
                Me.condenser1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Condenser2() As String
            Get
                Return Me.condenser2Field
            End Get
            Set
                Me.condenser2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinsPerInch1() As Integer
            Get
                Return Me.finsPerInch1Field
            End Get
            Set
                Me.finsPerInch1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinsPerInch2() As Integer
            Get
                Return Me.finsPerInch2Field
            End Get
            Set
                Me.finsPerInch2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SubCooling1() As Boolean
            Get
                Return Me.subCooling1Field
            End Get
            Set
                Me.subCooling1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SubCooling2() As Boolean
            Get
                Return Me.subCooling2Field
            End Get
            Set
                Me.subCooling2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SubCoolingPercent1() As Single
            Get
                Return Me.subCoolingPercent1Field
            End Get
            Set
                Me.subCoolingPercent1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SubCoolingPercent2() As Single
            Get
                Return Me.subCoolingPercent2Field
            End Get
            Set
                Me.subCoolingPercent2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondenserTD1() As Single
            Get
                Return Me.condenserTD1Field
            End Get
            Set
                Me.condenserTD1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondenserTD2() As Single
            Get
                Return Me.condenserTD2Field
            End Get
            Set
                Me.condenserTD2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinHeight1() As Single
            Get
                Return Me.finHeight1Field
            End Get
            Set
                Me.finHeight1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinHeight2() As Single
            Get
                Return Me.finHeight2Field
            End Get
            Set
                Me.finHeight2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinLength1() As Single
            Get
                Return Me.finLength1Field
            End Get
            Set
                Me.finLength1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinLength2() As Single
            Get
                Return Me.finLength2Field
            End Get
            Set
                Me.finLength2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DischargeLineLoss() As Single
            Get
                Return Me.dischargeLineLossField
            End Get
            Set
                Me.dischargeLineLossField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SuctionLineLoss() As Single
            Get
                Return Me.suctionLineLossField
            End Get
            Set
                Me.suctionLineLossField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Altitude() As Single
            Get
                Return Me.altitudeField
            End Get
            Set
                Me.altitudeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Fan() As String
            Get
                Return Me.fanField
            End Get
            Set
                Me.fanField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CfmOverride() As Single
            Get
                Return Me.cfmOverrideField
            End Get
            Set
                Me.cfmOverrideField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumFans1() As Single
            Get
                Return Me.numFans1Field
            End Get
            Set
                Me.numFans1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumFans2() As Single
            Get
                Return Me.numFans2Field
            End Get
            Set
                Me.numFans2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondenserCapacity1() As Single
            Get
                Return Me.condenserCapacity1Field
            End Get
            Set
                Me.condenserCapacity1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CondenserCapacity2() As Single
            Get
                Return Me.condenserCapacity2Field
            End Get
            Set
                Me.condenserCapacity2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EvaporatorModel() As String
            Get
                Return Me.evaporatorModelField
            End Get
            Set
                Me.evaporatorModelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EvaporatorModelDesc() As String
            Get
                Return Me.evaporatorModelDescField
            End Get
            Set
                Me.evaporatorModelDescField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumEvap() As Integer
            Get
                Return Me.numEvapField
            End Get
            Set
                Me.numEvapField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FoulingFactor() As Single
            Get
                Return Me.foulingFactorField
            End Get
            Set
                Me.foulingFactorField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CapacityType() As String
            Get
                Return Me.capacityTypeField
            End Get
            Set
                Me.capacityTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EvaporatorCapacity() As Integer
            Get
                Return Me.evaporatorCapacityField
            End Get
            Set
                Me.evaporatorCapacityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CatalogRating() As Boolean
            Get
                Return Me.catalogRatingField
            End Get
            Set
                Me.catalogRatingField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ApproachRange() As String
            Get
                Return Me.approachRangeField
            End Get
            Set
                Me.approachRangeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Evap8Degr1() As Single
            Get
                Return Me.evap8Degr1Field
            End Get
            Set
                Me.evap8Degr1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Evap8Degr2() As Single
            Get
                Return Me.evap8Degr2Field
            End Get
            Set
                Me.evap8Degr2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Evap10Degr1() As Integer
            Get
                Return Me.evap10Degr1Field
            End Get
            Set
                Me.evap10Degr1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Evap10Degr2() As Single
            Get
                Return Me.evap10Degr2Field
            End Get
            Set
                Me.evap10Degr2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Division() As String
            Get
                Return Me.divisionField
            End Get
            Set
                Me.divisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FanWatts() As Single
            Get
                Return Me.fanWattsField
            End Get
            Set
                Me.fanWattsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CreateCloudProjectCompletedEventHandler(ByVal sender As Object, ByVal e As CreateCloudProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateCloudProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CloudProjectInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CloudProjectInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetCloudIDFromGUIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetCloudIDFromGUIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCloudIDFromGUIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyProjectsRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyProcessesRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyEquipmentRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyEquipmentRecord2CompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyEquipmentRecord3CompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub sendErrorEmailCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyACChillerProcessesRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyAddressesRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyChillerRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyCompaniesRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyCondenserRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyCondenserProcessesRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyCondensingUnitRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyCondensingUnitProcessesRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyCoolStuffUserAshraeRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyCoolStuffReportProjectRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyCoolStuffProjectsRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyCoolStuffProductSelectionsReportRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyCoolStuffProductSelectionsRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyWCChillerProcessesRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyUnitCoolerProcessesRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyUnitCoolerRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopySpecialOptionsRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyRatingEquipmentRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyPumpPackageRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyOrderEntryContactsCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyProjectContactsRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyProductCoolerRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyProcessSpecificRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyProcessEquipRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyOtherEquipmentCostsRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyFluidCoolerProcessesRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyEquipmentOptionsRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyEvapChillerProcessesRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyFluidCoolerRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyContactsRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CopyContactsRecord1CompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadACChillerProcessesCompletedEventHandler(ByVal sender As Object, ByVal e As LoadACChillerProcessesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadACChillerProcessesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ACChillerProcesses()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ACChillerProcesses())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadWCChillerProcessesCompletedEventHandler(ByVal sender As Object, ByVal e As LoadWCChillerProcessesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadWCChillerProcessesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WCChillerProcesses()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WCChillerProcesses())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadUnitCoolerProcessesCompletedEventHandler(ByVal sender As Object, ByVal e As LoadUnitCoolerProcessesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadUnitCoolerProcessesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As UnitCoolerProcesses()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),UnitCoolerProcesses())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadUnitCoolerCompletedEventHandler(ByVal sender As Object, ByVal e As LoadUnitCoolerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadUnitCoolerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As UnitCooler()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),UnitCooler())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadCompaniesRecordsCompletedEventHandler(ByVal sender As Object, ByVal e As LoadCompaniesRecordsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadCompaniesRecordsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Companies()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Companies())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadContactsRecordsCompletedEventHandler(ByVal sender As Object, ByVal e As LoadContactsRecordsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadContactsRecordsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Contacts()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Contacts())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadContactsRecords1CompletedEventHandler(ByVal sender As Object, ByVal e As LoadContactsRecords1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadContactsRecords1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Contacts1()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Contacts1())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadProjectContactsRecordsCompletedEventHandler(ByVal sender As Object, ByVal e As LoadProjectContactsRecordsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadProjectContactsRecordsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ProjectContacts()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ProjectContacts())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadOrderEntryContactsCompletedEventHandler(ByVal sender As Object, ByVal e As LoadOrderEntryContactsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadOrderEntryContactsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As OrderEntryContacts()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),OrderEntryContacts())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadSpecialOptionsCompletedEventHandler(ByVal sender As Object, ByVal e As LoadSpecialOptionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadSpecialOptionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As SpecialOptions()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SpecialOptions())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadRatingEquipmentCompletedEventHandler(ByVal sender As Object, ByVal e As LoadRatingEquipmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadRatingEquipmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As RatingEquipment()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),RatingEquipment())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadPumpPackageCompletedEventHandler(ByVal sender As Object, ByVal e As LoadPumpPackageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadPumpPackageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As PumpPackage()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),PumpPackage())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadProjectsCompletedEventHandler(ByVal sender As Object, ByVal e As LoadProjectsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadProjectsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Projects()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Projects())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadProductCoolerCompletedEventHandler(ByVal sender As Object, ByVal e As LoadProductCoolerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadProductCoolerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ProductCooler()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ProductCooler())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadProcessSpecificCompletedEventHandler(ByVal sender As Object, ByVal e As LoadProcessSpecificCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadProcessSpecificCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ProcessSpecific()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ProcessSpecific())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadProcessesCompletedEventHandler(ByVal sender As Object, ByVal e As LoadProcessesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadProcessesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Processes()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Processes())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadProcessEquipCompletedEventHandler(ByVal sender As Object, ByVal e As LoadProcessEquipCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadProcessEquipCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ProcessEquip()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ProcessEquip())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadOtherEquipmentCostsCompletedEventHandler(ByVal sender As Object, ByVal e As LoadOtherEquipmentCostsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadOtherEquipmentCostsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As OtherEquipmentCosts()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),OtherEquipmentCosts())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadFluidCoolerProcessesCompletedEventHandler(ByVal sender As Object, ByVal e As LoadFluidCoolerProcessesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadFluidCoolerProcessesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FluidCoolerProcesses()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FluidCoolerProcesses())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadFluidCoolerCompletedEventHandler(ByVal sender As Object, ByVal e As LoadFluidCoolerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadFluidCoolerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FluidCooler()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FluidCooler())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadEvapChillerProcessesCompletedEventHandler(ByVal sender As Object, ByVal e As LoadEvapChillerProcessesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadEvapChillerProcessesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As EvapChillerProcesses()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),EvapChillerProcesses())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadEquipmentOptionsCompletedEventHandler(ByVal sender As Object, ByVal e As LoadEquipmentOptionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadEquipmentOptionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As EquipmentOptions()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),EquipmentOptions())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadEquipmentCompletedEventHandler(ByVal sender As Object, ByVal e As LoadEquipmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadEquipmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Equipment()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Equipment())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadEquipment2CompletedEventHandler(ByVal sender As Object, ByVal e As LoadEquipment2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadEquipment2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Equipment2()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Equipment2())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadEquipment3CompletedEventHandler(ByVal sender As Object, ByVal e As LoadEquipment3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadEquipment3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Equipment3()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Equipment3())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadCondensingUnitProcessesCompletedEventHandler(ByVal sender As Object, ByVal e As LoadCondensingUnitProcessesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadCondensingUnitProcessesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CondensingUnitProcesses()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CondensingUnitProcesses())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadCondensingUnitsCompletedEventHandler(ByVal sender As Object, ByVal e As LoadCondensingUnitsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadCondensingUnitsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CondensingUnit()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CondensingUnit())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadCondenserProcessesCompletedEventHandler(ByVal sender As Object, ByVal e As LoadCondenserProcessesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadCondenserProcessesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CondenserProcesses()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CondenserProcesses())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadCondensersCompletedEventHandler(ByVal sender As Object, ByVal e As LoadCondensersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadCondensersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Condenser()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Condenser())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub LoadChillersCompletedEventHandler(ByVal sender As Object, ByVal e As LoadChillersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadChillersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Chiller()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Chiller())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetUsersToShareWithCompletedEventHandler(ByVal sender As Object, ByVal e As GetUsersToShareWithCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUsersToShareWithCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As UserShareList()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),UserShareList())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetCloudProjectsUserCanAccessCompletedEventHandler(ByVal sender As Object, ByVal e As GetCloudProjectsUserCanAccessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCloudProjectsUserCanAccessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ProjectList()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ProjectList())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub ShareOrUnshareProjectsCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
End Namespace

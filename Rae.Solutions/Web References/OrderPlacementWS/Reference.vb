'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
'
Namespace OrderPlacementWS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="TransferFileSoap", [Namespace]:="http://rae-corp.com/")>  _
    Partial Public Class TransferFile
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private SendNewOrderEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendFileBase64OperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Rae.RaeSolutions.My.MySettings.Default.RaeSolutions_OrderPlacementWS_TransferFile
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event SendNewOrderEmailCompleted As SendNewOrderEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event SendFileCompleted As SendFileCompletedEventHandler
        
        '''<remarks/>
        Public Event SendFileBase64Completed As SendFileBase64CompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://rae-corp.com/SendNewOrderEmail", RequestNamespace:="http://rae-corp.com/", ResponseNamespace:="http://rae-corp.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SendNewOrderEmail(ByVal orderNumber As String, ByVal customerNumber As String, ByVal key As String)
            Me.Invoke("SendNewOrderEmail", New Object() {orderNumber, customerNumber, key})
        End Sub
        
        '''<remarks/>
        Public Function BeginSendNewOrderEmail(ByVal orderNumber As String, ByVal customerNumber As String, ByVal key As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendNewOrderEmail", New Object() {orderNumber, customerNumber, key}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndSendNewOrderEmail(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendNewOrderEmailAsync(ByVal orderNumber As String, ByVal customerNumber As String, ByVal key As String)
            Me.SendNewOrderEmailAsync(orderNumber, customerNumber, key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendNewOrderEmailAsync(ByVal orderNumber As String, ByVal customerNumber As String, ByVal key As String, ByVal userState As Object)
            If (Me.SendNewOrderEmailOperationCompleted Is Nothing) Then
                Me.SendNewOrderEmailOperationCompleted = AddressOf Me.OnSendNewOrderEmailOperationCompleted
            End If
            Me.InvokeAsync("SendNewOrderEmail", New Object() {orderNumber, customerNumber, key}, Me.SendNewOrderEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendNewOrderEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendNewOrderEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendNewOrderEmailCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://rae-corp.com/SendFile", RequestNamespace:="http://rae-corp.com/", ResponseNamespace:="http://rae-corp.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendFile(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal fileBytes() As Byte, ByVal filename As String, ByVal orderNumber As String, ByVal customerNumber As String) As String
            Dim results() As Object = Me.Invoke("SendFile", New Object() {fileBytes, filename, orderNumber, customerNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginSendFile(ByVal fileBytes() As Byte, ByVal filename As String, ByVal orderNumber As String, ByVal customerNumber As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendFile", New Object() {fileBytes, filename, orderNumber, customerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendFile(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendFileAsync(ByVal fileBytes() As Byte, ByVal filename As String, ByVal orderNumber As String, ByVal customerNumber As String)
            Me.SendFileAsync(fileBytes, filename, orderNumber, customerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendFileAsync(ByVal fileBytes() As Byte, ByVal filename As String, ByVal orderNumber As String, ByVal customerNumber As String, ByVal userState As Object)
            If (Me.SendFileOperationCompleted Is Nothing) Then
                Me.SendFileOperationCompleted = AddressOf Me.OnSendFileOperationCompleted
            End If
            Me.InvokeAsync("SendFile", New Object() {fileBytes, filename, orderNumber, customerNumber}, Me.SendFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendFileCompleted(Me, New SendFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://rae-corp.com/SendFileBase64", RequestNamespace:="http://rae-corp.com/", ResponseNamespace:="http://rae-corp.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendFileBase64(ByVal fileBase64 As String, ByVal length As Integer, ByVal filename As String, ByVal orderNumber As String, ByVal customerNumber As String) As String
            Dim results() As Object = Me.Invoke("SendFileBase64", New Object() {fileBase64, length, filename, orderNumber, customerNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginSendFileBase64(ByVal fileBase64 As String, ByVal length As Integer, ByVal filename As String, ByVal orderNumber As String, ByVal customerNumber As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendFileBase64", New Object() {fileBase64, length, filename, orderNumber, customerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendFileBase64(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendFileBase64Async(ByVal fileBase64 As String, ByVal length As Integer, ByVal filename As String, ByVal orderNumber As String, ByVal customerNumber As String)
            Me.SendFileBase64Async(fileBase64, length, filename, orderNumber, customerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendFileBase64Async(ByVal fileBase64 As String, ByVal length As Integer, ByVal filename As String, ByVal orderNumber As String, ByVal customerNumber As String, ByVal userState As Object)
            If (Me.SendFileBase64OperationCompleted Is Nothing) Then
                Me.SendFileBase64OperationCompleted = AddressOf Me.OnSendFileBase64OperationCompleted
            End If
            Me.InvokeAsync("SendFileBase64", New Object() {fileBase64, length, filename, orderNumber, customerNumber}, Me.SendFileBase64OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendFileBase64OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendFileBase64CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendFileBase64Completed(Me, New SendFileBase64CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendNewOrderEmailCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendFileCompletedEventHandler(ByVal sender As Object, ByVal e As SendFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendFileBase64CompletedEventHandler(ByVal sender As Object, ByVal e As SendFileBase64CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendFileBase64CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
